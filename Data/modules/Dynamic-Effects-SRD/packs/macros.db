{"_id":"5QMyL9TRKHzKScdS","name":"Invisibility","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1])\nif (args[0] === \"on\") {\n    ChatMessage.create({ content: `${target.name} turns invisible` });\n    target.update({ \"hidden\": true });\n}\nif (args[0] === \"off\") {\n    ChatMessage.create({ content: `${target.name} re-appears` });\n    target.update({ \"hidden\": false });\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/fog-sky-2.jpg","actorIds":[]}
{"_id":"96O8bSGNEf1xy3b3","name":"Shillelagh","permission":{"default":0,"gSvPH9u5wzkE1oU1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.cslIZHQ9ILsUGEMj"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet weapons = target.actor.items.filter(i => i.data.type === `weapon`);\nlet weapon_content = ``;\n\nfor (let weapon of weapons) {\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\n}\nif (args[0] === \"on\" && !target.getFlag('world', 'shillelagh')) {\n    let content = `\n<div class=\"form-group\">\n  <label>Weapons : </label>\n  <select name=\"weapons\">\n    ${weapon_content}\n  </select>\n</div>`;\n\n    new Dialog({\n        title: \"Choose a club or quarterstaff\",\n        content,\n        buttons:\n        {\n            Ok:\n            {\n                label: `Ok`,\n                callback: (html) => {\n                    let itemId = html.find('[name=weapons]')[0].value;\n                    let item = target.actor.items.get(itemId);\n                    let copy_item = duplicate(item);\n                    target.actor.setFlag(`world`, `shillelagh`, {\n                        id : itemId,\n                        damage : copy_item.data.damage.parts[0][0]    \n                    });\n                    let damage = copy_item.data.damage.parts[0][0];\n                    var newdamage = damage.replace(/1d(4|6)/g,\"1d8\");\n                    copy_item.data.damage.parts[0][0] = newdamage;\n                    copy_item.data.ability = \"wis\";\n                    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n                    ChatMessage.create({content: copy_item.name + \" is empowered\"});\n                }\n            },\n            Cancel:\n            {\n                label: `Cancel`\n            }\n        }\n    }).render(true);\n}\n\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag(`world`, `shillelagh`);\n    let itemId = flag.id;\n    let damage = flag.damage;\n    let item = target.actor.items.get(itemId);\n    let copy_item = duplicate(item);\n    copy_item.data.damage.parts[0][0] = damage;\n    copy_item.data.ability = \"\";\n    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n    target.actor.unsetFlag(`world`, `shillelagh`);\n    ChatMessage.create({content: copy_item.name + \" returns to normal\"});\n\n}","author":"gSvPH9u5wzkE1oU1","img":"systems/dnd5e/icons/spells/enchant-jade-1.jpg","actorIds":[]}
{"_id":"9cZIxmBVwbFpE9cP","name":"BlindDeaf","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.oiEgd0VHxlxJZsWN"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Choose an Effect\",\n        buttons: {\n            one: {\n                label: \"Blindness\",\n                callback: () => {\n                    game.macros.getName(\"BlindExecute\").execute(\"Blinded\", args[1], 1 )\n                }\n            },\n            two: {\n                label: \"Deafness\",\n                callback: () => {\n                    game.macros.getName(\"BlindExecute\").execute(\"Deafened\", args[1], 1 )\n                }\n            }\n        },\n    }).render(true);\n}\nif(args[0] === \"off\"){\n    if (target.actor.getFlag('world', 'DE Blinded')) {\n        game.macros.getName(\"BlindExecute\").execute(\"Blinded\", args[1], 2 )\n    } else if (target.actor.getFlag('world', 'DE Deafened')) {\n        game.macros.getName(\"BlindExecute\").execute(\"Deafened\", args[1], 2 )\n    }\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/evil-eye-red-2.jpg","actorIds":[]}
{"_id":"ApIbt7KyC0MwlAMb","name":"ProtectionFromEnergy","permission":{"default":0,"gSvPH9u5wzkE1oU1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.rRYlkSknbZUTGI0a"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\n  let target = canvas.tokens.get(args[1]);\n\n  if (args[0] === \"on\") {\n    new Dialog({\n      title: 'Choose a damage type',\n      content: `\n          <form class=\"flexcol\">\n            <div class=\"form-group\">\n              <select id=\"element\">\n                <option value=\"acid\">Acid</option>\n                <option value=\"cold\">Cold</option>\n                <option value=\"fire\">Fire</option>\n                <option value=\"lightning\">Lightning</option>\n                <option value=\"thunder\">Thunder</option>\n              </select>\n            </div>\n          </form>\n        `,\n      buttons: {\n        yes: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: 'Yes',\n          callback: (html) => {\n            let element = html.find('#element').val();\n            let resistances = target.actor.data.data.traits.dr.value;\n            resistances.push(element);\n            target.actor.update({ \"data.traits.dr.value\": resistances });\n            target.actor.setFlag('world', 'ProtectionFromEnergy', element);\n            ChatMessage.create({ content: target.name + \" gains resistance to \" + element });\n          }\n        },\n      },\n    }).render(true);\n  }\n  if (args[0] === \"off\") {\n    let element = target.actor.getFlag('world', 'ProtectionFromEnergy');\n    let resistances = target.actor.data.data.traits.dr.value;\n    const index = resistances.indexOf(element);\n    resistances.splice(index, 1);\n    target.actor.update({ \"data.traits.dr.value\": resistances });\n    target.actor.unsetFlag('world', 'ProtectionFromEnergy');\n    ChatMessage.create({ content: `${target.name} loses resistance to ${element}`});\n  }","author":"gSvPH9u5wzkE1oU1","img":"systems/dnd5e/icons/spells/protect-jade-2.jpg","actorIds":[]}
{"_id":"EDVrkYKhRMIyDSmp","name":"Eyebite","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.yrTB6zHbr4HwYGnS"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ConditionControl = game.macros.getName(\"CUB Condition\");\n\n/**\n * Dialog appears on players screen, CondtionControll callback execute on GM end \n */\n\nfunction EyebiteDialog() {\n    new Dialog({\n        title: \"Eyebite options\",\n        content: \"<p>Target a token and select the effect</p>\",\n        buttons: {\n            one: {\n                label: \"Asleep\",\n                callback: async () => {\n                    for (let target of game.user.targets) {\n                        let { total } = await target.actor.rollAbilitySave(\"wis\");\n                        if (total < args[2]) {\n                            ChatMessage.create({ content: target.name + \" failed the save with a \" + total });\n                            ConditionControl.execute(\"apply\", \"Unconscious\", target);\n                        }\n else {\n                            ChatMessage.create({ content: target.name + \" passed the save with a \" + total });\n                        }\n                    }\n                }\n            },\n            two: {\n                label: \"Panicked\",\n                callback: async () => {\n                    for (let target of game.user.targets) {\n                        let { total } = await target.actor.rollAbilitySave(\"wis\");\n                        if (total < args[2]) {\n                            ChatMessage.create({ content: target.name + \" failed the save with a \" + total });\n                            ConditionControl.execute(\"apply\", \"Frightened\", target);\n                        }\n else {\n                            ChatMessage.create({ content: target.name + \" passed the save with a \" + total });\n                        }\n                    }\n                }\n            },\n            three: {\n                label: \"Sickened\",\n                callback: async () => {\n                    for (let target of game.user.targets) {\n                        let { total } = await target.actor.rollAbilitySave(\"wis\");\n                        if (total < args[2]) {\n                            ChatMessage.create({ content: target.name + \" failed the save with a \" + total });\n                            ConditionControl.execute(\"apply\", \"Poisoned\", target);\n                        }\n else {\n                            ChatMessage.create({ content: target.name + \" passed the save with a \" + total });\n                        }\n                    }\n                }\n            },\n        }\n    }).render(true);\n}\n\nif (args[0] === \"on\") {\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\n        if (!(\"round\" in update || \"turn\" in update)) return;\n        if (combat.combatant.tokenId === args[1]) {\n            EyebiteDialog();\n        }\n    });\n    target.actor.setFlag(\"world\", \"EyebiteSpell\", hookId);\n    ChatMessage.create({ content: target.name + \" is blessed with Eyebite\" });\n    EyebiteDialog();\n\n}\n\n//Cleanup hooks and flags.\nif (args[0] === \"off\") {\n    async function off() {\n        ChatMessage.create({ content: \"Eyebite is removed\" });\n        let hookIdFlag = await target.actor.getFlag(\"world\", \"EyebiteSpell\");\n        Hooks.off(\"updateCombat\", hookIdFlag);\n    }\n    off();\n    target.actor.unsetFlag(\"world\", \"EyebiteSpell\");\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/evil-eye-red-3.jpg","actorIds":[]}
{"_id":"IbpEUtL9u8v8SK8r","name":"Enhance Ability","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\nlet target = canvas.tokens.get(args[1]);\n\n/**\n * For each target select the effect (GM selection)\n */\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Choose enhance ability effect for \" + target.name,\n        buttons: {\n            one: {\n                label: \"Bear's Endurance\",\n                callback: () => {\n                    let formula = `2d6`;\n                    let amount = new Roll(formula).roll().total;\n                    target.actor.setFlag('world', 'enhanceAbility', {\n                        name: \"bear\",\n                    });\n                    ChatMessage.create({ content: target.name + \" gains \" + amount + \" temp Hp\" });\n                    target.update({ \"data.attributes.hp.temp\": amount });\n\n                }\n            },\n            two: {\n                label: \"Bull's Strength\",\n                callback: () => {\n                    ChatMessage.create({ content: target.name + \"s encumberance is doubled\" });\n                    target.actor.setFlag('world', 'enhanceAbility', {\n                        name: \"bull\",\n                    });\n                    target.actor.setFlag('dnd5e', 'powerfulBuild', true);\n                }\n            },\n            three: {\n                label: \"Other\",\n                callback: () => {\n                    target.actor.setFlag('world', 'enhanceAbility', {\n                        name: \"other\",\n                    });\n                    ChatMessage.create({ content: \"A non automated Ability was enhanced for \" + target.name });\n                }\n            }\n        }\n    }).render(true);\n}\n\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag('world', 'enhanceAbility');\n    if (flag.name === \"bull\") target.actor.unsetFlag('dnd5e', 'powerfulBuild', false);\n    target.actor.unsetFlag('world', 'enhanceAbility');\n    ChatMessage.create({ content: \"Enhance Ability has expired\" });\n}","author":"SWj23mpjGzaSl512","img":"systems/dnd5e/icons/spells/haste-royal-2.jpg","actorIds":[]}
{"_id":"KihkgBmWk6cE6CN4","name":"HeroesFeast","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.OFmbN8LvQCsDvrrT"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\n\nlet target = canvas.tokens.get(args[1]);\nlet amount = new Roll(\"2d10\").roll().total;\n/**\n * Update HP and Max HP to roll formula, save result as flag\n */\nif (args[0] === \"on\") {\n        let hpMax = target.actor.data.data.attributes.hp.max;\n        let hp = target.actor.data.data.attributes.hp.value;\n        await target.actor.update({\"data.attributes.hp.max\": (hpMax + amount), \"data.attributes.hp.value\": (hp + amount) });\n        ChatMessage.create({content: `${target.name} gains ${amount} Max HP`});\n        await target.actor.setFlag('world', 'HeroesFeast', amount);\n};\n\n// Remove Max Hp and reduce HP to max if needed\nif (args[0] === \"off\") {\n        let amountOff = await target.actor.getFlag('world', 'HeroesFeast');\n        let hpMax = target.actor.data.data.attributes.hp.max;\n        let newHpMax = hpMax - amountOff;\n        await target.actor.update({\"data.attributes.hp.max\": newHpMax });\n        if ( target.actor.data.data.attributes.hp.value > newHpMax ) {\n            await target.actor.update({\"data.attributes.hp.value\": newHpMax });\n        }\n        ChatMessage.create({content: target.name + \"'s Max HP returns to normal\"});\n        target.actor.unsetFlag('world', 'HeroesFeast');\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/heal-royal-3.jpg","actorIds":[]}
{"_id":"LP7yQusoGK4Wg1BU","name":"DarkvisionDAE","permission":{"default":0,"E4BVikjIkVl2lL2j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.1Wu2I3MVyieNIT7C"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\nlet target = canvas.tokens.get(args[1]);\nlet dimVision = target.dimSight;\nif (args[0] === \"on\") {\n    target.actor.setFlag('world', 'darkvisionSpell', dimVision);\n    target.update({\"dimSight\" : 60 });\n    ChatMessage.create({content: `${target.name}'s vision has been improved`});\n}\nif(args[0] === \"off\") {\n    let sight = target.actor.getFlag('world', 'darkvisionSpell');\n    target.update({\"dimSight\" : sight });\n    target.unsetFlag('world', 'darkvisionSpell');\n    ChatMessage.create({content: `${target.name}'s vision has been returned`});\n}","author":"E4BVikjIkVl2lL2j","img":"systems/dnd5e/icons/spells/evil-eye-red-1.jpg","actorIds":[]}
{"name":"BlindExecute","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.pbwtxuz3PnYmu8sB"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\n\nif (args[2] === 1){\n    game.cub.addCondition(args[0], target)\n    let flag = \"DE \" + args[0]\n    ActorSetFlag.execute(args[1], 'world', flag, 1)\n    ChatMessage.create({content: target.name + \" has been \" + args[0]})\n} if(args[2] === 2){\n        let flag = \"DE \" + args[0]\n        game.cub.removeCondition(args[0], target);\n        ChatMessage.create({content: target.name + \" is no longer \" + args[0]})\n        ActorUnSetFlag.execute(args[1], 'world', flag)\n    }","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"NX3K1iFlG3dHEwsA"}
{"_id":"UDZROf1vwxy56tdD","name":"Levitate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1]);\n\nif (args[0] === \"on\") {\n    ChatMessage.create({ content: `${target.name} is levitated 20ft` });\n    TokenUpdate.execute(args[1], { \"elevation\": 20 });\n}\nif (args[0] === \"off\") {\n    TokenUpdate.execute(args[1], { \"elevation\": 0 });\n    ChatMessage.create({ content: `${target.name} is returned to the ground` });\n}","author":"SWj23mpjGzaSl512","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","actorIds":[]}
{"name":"CUB Condition","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.WdwVdMQmK7EhPkKV"}},"scope":"global","command":"let target = args[2];\nif(args[0] === \"apply\"){\n    game.cub.addCondition(args[1], target)\n}\nif(args[0] === \"remove\") {\n    game.cub.removeCondition(args[1], target )\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UG5CmXsWaZKqFkLK"}
{"_id":"UyqVKTilFLBmHBJI","name":"Magic Weapon","permission":{"default":0,"gSvPH9u5wzkE1oU1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.6avU8avuuue4Q8hE"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1]);\nlet weapons = target.actor.items.filter(i => i.data.type === `weapon`);\nlet weapon_content = ``;\nfunction value_limit(val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n//Filter for weapons\nfor (let weapon of weapons) {\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\n}\n\n/**\n * Select for weapon and apply bonus based on spell level\n */\nif (args[0] === \"on\") {\n    let content = `\n    <div class=\"form-group\">\n    <label>Weapons : </label>\n    <select name=\"weapons\">\n        ${weapon_content}\n        </select>\n    </div>`;\n\n    new Dialog({\n        content,\n        buttons:\n        {\n            Ok:\n            {\n                label: `Ok`,\n                callback: (html) => {\n                    let itemId = html.find('[name=weapons]')[0].value;\n                    let item = target.actor.items.get(itemId);\n                    let copy_item = duplicate(item);\n                    let spellLevel = Math.floor(args[2] / 2);\n                    let bonus = value_limit(spellLevel, 1, 3);\n                    let wpDamage = copy_item.data.damage.parts[0][0];\n                    target.actor.setFlag(`world`, `magicWeapon`, {\n                        damage: item.data.attackBonus,\n                        weapon: itemId,\n                        weaponDmg: wpDamage,\n                    }\n                    );\n                    copy_item.data.attackBonus = (copy_item.data.attackBonus + bonus);\n                    copy_item.data.damage.parts[0][0] = (wpDamage + \" + \" + bonus);\n                    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n                }\n            },\n            Cancel:\n            {\n                label: `Cancel`\n            }\n        }\n    }).render(true);\n}\n\n//Revert weapon and unset flag.\nif (args[0] === \"off\") {\n    let { damage, weapon, weaponDmg } = target.actor.getFlag('world', 'magicWeapon');\n    let item = target.actor.items.get(weapon);\n    let copy_item = duplicate(item);\n    copy_item.data.attackBonus = (copy_item.data.attackBonus - damage);\n    copy_item.data.damage.parts[0][0] = weaponDmg;\n    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n    target.actor.unsetFlag(`world`, `magicWeapon`);\n}","author":"gSvPH9u5wzkE1oU1","img":"systems/dnd5e/icons/spells/enchant-blue-2.jpg","actorIds":[]}
{"_id":"XJ9laAhxSQd6KOUF","name":"DAE toggle item effect on/off","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.CBITwEj3TjVbXLUv"}},"scope":"global","command":"//type the name of the EFFECT present on an actor to toggle it\nlet dae_effect = async function() {\nconst effect_name = \"New Active Effect\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\n     let condition = effect[i].data.label;\n     let status = effect[i].data.disabled;\n     let effect_id = effect[i].data._id;\n     if ((condition === effect_name) && (status === false)) {\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n     }\n     if ((condition === effect_name) && (status === true)){\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n    }\n}\n}\ndae_effect();","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"ActorUpdate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = actor ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\n(async()=>{\r\n  await canvas.tokens.get(args[0]).actor.update(args[1]);\r\n})();","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"gZ22yWmRBsL6hHxi"}
{"_id":"h53SXiPj68gBkXsP","name":"Heroism","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target @abilities.(insert casting score).mod\n\n\nlet mod = args[2];\nlet target = canvas.tokens.get(args[1]);\n\nif (args[0] === \"on\") {\n    ChatMessage.create({ content: \"Heroism is applied to targets\" })\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\n        if (!(\"round\" in update || \"turn\" in update)) return;\n        if (combat.combatant.tokenId === args[1]) {\n            target.actor.update({ \"data.attributes.hp.temp\": mod });\n            ChatMessage.create({ content: \"Heroism continues on \" + target.name })\n        }\n    });\n    target.actor.setFlag(\"world\", \"heroismUpdateCombatHookId\", hookId);\n\n}\nif (args[0] === \"off\") {\n   let hookIdFlag = target.actor.getFlag(\"world\", \"heroismUpdateCombatHookId\");\n    ChatMessage.create({ content: \"Heroism ends\" });\n    Hooks.off(\"updateCombat\", hookIdFlag);\n    target.actor.unsetFlag(\"world\", \"heroismUpdateCombatHookId\");\n}","author":"SWj23mpjGzaSl512","img":"systems/dnd5e/icons/spells/heal-sky-2.jpg","actorIds":[]}
{"_id":"i6DSivgfgnmiQu2N","name":"DarkOnesBlessing","permission":{"default":0,"dv1o3vH3k0ku7ro4":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro                   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"if (args[0] === \"on\") {\nconsole.log(args)\n    let level = parseInt(args[2]);\n    let cha = parseInt(args[3]);\n    let total= level + cha;\n    //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\n    token.actor.update({\"data.attributes.hp.temp\": total}) \n    ChatMessage.create({content: actor.name + ` is replenished as the creature dies`});\n} if (args[0] === \"of\") {}","author":"dv1o3vH3k0ku7ro4","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"ActorGetFlag","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.SUOiDsbuMxlXuldC"}},"scope":"global","command":"return canvas.tokens.get(args[0]).actor.getFlag(args[1], args[2]);","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jQ2qw96yD5YXNpRC"}
{"_id":"lMAmkU13CpJ9KUUG","name":"Ring of Invisibility","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet hidden = target.data.hidden;\r\nlet visible = hidden ? false : true;\r\nTokenUpdate.execute(args[1],{\"hidden\": visible});\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"lefVX9mOaAfispDq","name":"ActorSetFlag","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).actor.setFlag(args[1], args[2], args[3]);\r\n\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"m4bRzxmtjYrb5kXJ","name":"Alter Self","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.KtmNCau8UBMjTv46"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\nlet target = canvas.tokens.get(args[1]); //grab target token\nlet item = target.actor.items.find(i => i.name === `Unarmed Strike`); // find unarmed strike attack\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\nif (args[0] === \"on\") {\n    if (target) {\n        new Dialog({\n            title: \"Are you using Natural Weapons\",\n            content: \"<p>Yes or no</p>\",\n            buttons: {\n                one: {\n                    label: \"Yes\",\n                    callback: () => {\n                        if (!item){\n                            ChatMessage.create({content: \"No unarmed strike found\"}); // exit out if no unarmed strike\n                            return;\n                        }\n                        let copy_item = duplicate(item);\n                        ActorSetFlag.execute(args[1],'world', 'AlterSelfSpell', copy_item.data.damage.parts[0][0]); //set flag of previous value\n                        copy_item.data.damage.parts[0][0] = \"1d6 +@mod\"; //replace with new value\n                        target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item); //update item\n                        ChatMessage.create({content: \"Unarmed strike is altered\"});\n                    }\n                },\n                    two: {\n                        label: \"No\",\n                        callback: () => ChatMessage.create({ content: `Unarmed strike not altered` })\n                },\n            }\n        }).render(true);\n    }\n} \nif(args[0] === \"off\") {\n    let damage = actor.getFlag('world', 'AlterSelfSpell'); // find flag with previous values\n    let copy_item = duplicate(item);\n    copy_item.data.damage.parts[0][0] = damage; //replace with old value\n    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item); //update item\n    ActorUnSetFlag.execute(args[1],'world', 'AlterSelfSpell',); //remove flag\n    ChatMessage.create({ content: `Alter Self expired, unarmed strike returned` });\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/wind-grasp-acid-2.jpg","actorIds":[]}
{"_id":"nRqR9H4HOXahU9RC","name":"EnlargeReduce","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tKKbvoCkf5A37rsc"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\n/**\n * For each target, the GM will have to choose \n */\nlet target = canvas.tokens.get(args[1]);\nlet originalSize = target.data.width;\nlet mwak = target.actor.data.data.bonuses.mwak.damage;\n\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Enlarge or Reduce\",\n        buttons: {\n            one: {\n                label: \"Enlarge\",\n                callback: () => {\n                    let bonus = mwak + \" 1d4\";\n                    let enlarge = (originalSize + 1);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": enlarge, \"height\": enlarge });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is enlarged\" });\n                }\n            },\n            two: {\n                label: \"Reduce\",\n                callback: () => {\n                    let bonus = mwak + \" -1d4\";\n                    let size = originalSize;\n                    let newSize = (size > 1) ? (size - 1) : (size - 0.3);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": newSize, \"height\": newSize });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is reduced\" });\n                }\n            },\n        }\n    }).render(true);\n}\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag('world', 'enlageReduceSpell');\n    target.actor.update({ \"data.bonuses.mwak.damage\": flag.ogMwak });\n    target.update({ \"width\": flag.size, \"height\": flag.size });\n    target.actor.unsetFlag('world', 'enlageReduceSpell');\n    ChatMessage.create({ content: target.name + \" is returned to normal size\" });\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/link-blue-2.jpg","actorIds":[]}
{"_id":"neKC6vCIHJscwDVN","name":"FireShield","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.bvIHiiIZMdgXaAzn"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\n\nif (args[0] === \"on\") {\n    if (token) {   \n        new Dialog({\n            title: \"Warm or Cold Shield\",\n            buttons: {\n                one: {\n                    label: \"Warm\",\n                    callback: () => {\n                        let resistances = target.actor.data.data.traits.dr.value;\n                        resistances.push(\"cold\");\n                        target.actor.update({ \"data.traits.dr.value\": resistances });\n                        target.actor.setFlag('world', 'FireShield', \"cold\");\n                        ChatMessage.create({ content: target.name + \" gains resistnace to cold\" });\n                    }\n                },\n                two: {\n                    label: \"Cold\",\n                    callback: () => {\n                        let resistances = target.actor.data.data.traits.dr.value;\n                        resistances.push(\"fire\");\n                        target.actor.update({ \"data.traits.dr.value\": resistances });\n                        target.actor.setFlag('world', 'FireShield', \"fire\");\n                        ChatMessage.create({ content: target.name + \" gains resistnace to fire\" });\n                    }\n                },\n            }\n        }).render(true);\n\n    }\n}\nif (args[0] === \"off\") {\n    let element = target.actor.getFlag('world', 'FireShield');\n    let resistances = target.actor.data.data.traits.dr.value;\n    const index = resistances.indexOf(element);\n    resistances.splice(index, 1);\n    target.actor.update({ \"data.traits.dr.value\": resistances });\n    ChatMessage.create({ content: \"Fire Shield expires on \" + target.name});\n\n}","author":"XE30TcnpPFgl2g1S","img":"systems/dnd5e/icons/spells/protect-red-3.jpg","actorIds":[]}
{"name":"TokenUpdate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).update(args[1]);","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"o5hi8GyaO6DgcApN"}
{"_id":"pjqhDT4CLbqnswj5","name":"Flame Blade DAE","permission":{"default":0,"gSvPH9u5wzkE1oU1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.SlQPN9cea6VW9R5d"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target @item.level\n\nlet target = canvas.tokens.get(args[1])\nlet data = {}\n/**\n * Create Flame Blade item in inventory\n */\nif (args[0] === \"on\") {\n  let weaponDamge = 2 + Math.floor(args[2] / 2);\n  await target.actor.createOwnedItem(\n    {\n      \"name\": \"Summoned Flame Blade\",\n      \"type\": \"weapon\",\n      \"data\": {\n        \"quantity\": 1,\n        \"activation\": {\n          \"type\": \"action\",\n          \"cost\": 1,\n          \"condition\": \"\"\n        },\n        \"duration\": {\n          \"value\": null,\n          \"units\": \"\"\n        },\n        \"target\": {\n          \"value\": 1,\n          \"width\": null,\n          \"units\": \"\",\n          \"type\": \"creature\"\n        },\n        \"range\": {\n          \"value\": 5,\n          \"long\": null,\n          \"units\": \"\"\n        },\n        \"uses\": {\n          \"value\": 0,\n          \"max\": 0,\n          \"per\": \"\"\n        },\n        \"consume\": {\n          \"type\": \"\",\n          \"target\": \"\",\n          \"amount\": null\n        },\n        \"ability\": \"\",\n        \"actionType\": \"msak\",\n        \"attackBonus\": \"0\",\n        \"chatFlavor\": \"\",\n        \"critical\": null,\n        \"damage\": {\n          \"parts\": [\n            [\n              `${weaponDamge}d6`,\n              \"fire\"\n            ]\n          ],\n          \"versatile\": \"\"\n        },\n        \"weaponType\": \"simpleM\",\n        \"proficient\": true,\n      },\n      \"img\": \"systems/dnd5e/icons/spells/enchant-orange-2.jpg\",\n    }\n  );\n}\n\n// Delete Flame Blade\nif (args[0] === \"off\") {\n  let item = target.actor.data.items.find(i => i.name === \"Summoned Flame Blade\" && i.type === \"weapon\")\n  target.actor.deleteOwnedItem(item._id)\n}","author":"gSvPH9u5wzkE1oU1","img":"systems/dnd5e/icons/spells/enchant-orange-2.jpg","actorIds":[]}
{"_id":"vzDHS2zuvGJZ30sU","name":"Banishment","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1]); //find target\n\nif (args[0] === \"on\") {\n    target.update({hidden : true}); // hide targeted token\n    ChatMessage.create({content: target.name + \"  was banished\"});\n    \n}\nif(args[0]=== \"off\") {\n target.update({hidden : false}); // unhide token\n ChatMessage.create({content: target.name + \"  returned\"});\n}","author":"SWj23mpjGzaSl512","img":"systems/dnd5e/icons/spells/link-eerie-3.jpg","actorIds":[]}
{"_id":"wFDgUxoSEnkdDuad","name":"Contagion DAE","permission":{"default":0,"gSvPH9u5wzkE1oU1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.KYYFo1fgWzC5VNg9"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target @attributes.spelldc\nlet target = canvas.tokens.get(args[1]);\n\nif (args[0] === \"on\") {\n    // Set a hook to read the current combatant, if that combatant has the effect execute the contagion effect.\n    const hookId = Hooks.on(\"preUpdateCombat\", (combat, changed, options, userId) => {\n        if (!(\"turn\" in changed)) return;\n\n        if (combat.combatant.tokenId === args[1]) {\n            Contagion(target, args[2]);\n        }\n    });\n\n    // Save the hook data for later access.\n    target.setFlag(\"world\", \"ContagionSpell\", {\n        hook: hookId,\n        count: 0,\n    });\n}\n\nif (args[0] === \"off\") {\n    // When off, clean up hooks and flags.\n    async function ContagionOff() {\n        let flag = await target.getFlag(\"world\", \"ContagionSpell\");\n        Hooks.off(\"preUpdateCombat\", flag.hook);\n        target.unsetFlag(\"world\", \"ContagionSpell\");\n    }\n    ContagionOff();\n}\n\n/** \n * Execute contagion effects, update flag counts or remove effect\n * \n * @param {Actor5e} combatant Current combatant to test against\n * @param {Number} save Target DC for save\n */\nasync function Contagion(combatant, save) {\n    let flag = target.getFlag(\"world\", \"ContagionSpell\");\n    let saveRoll = await combatant.actor.rollAbilitySave(\"con\");\n    ChatMessage.create({ content: `${target.name} rolls a ${saveRoll.total} vs a ${save}` });\n    if (saveRoll._total < save) {\n        if (flag.count === 2) {\n            ChatMessage.create({ content: `Contagion on ${name} is complete` });\n            ContagionMessage();\n            return;\n        }\n        else {\n            let contagionCount = (flag.count + 1);\n            target.setFlag(\"world\", \"ContagionSpell\", {\n                count: contagionCount\n            });\n            console.log(`Contagion increased to ${contagionCount}`);\n        }\n    }\n    else if (saveRoll._total >= save) {\n        let effect = actor.effects.find(i => i.data.label === \"Contagion\");\n        effect.delete();\n    }\n}\n\n/**\n * Generates the GM client dialog for selecting final Effect, updates target effect with name, icon and new DAE effects.\n */\nasync function ContagionMessage() {\n    let contagion = target.actor.effects.find(i => i.data.label === \"Contagion\");\n    let changes = contagion.data.changes;\n    let icon = contagion.data.icon;\n    let label = contagion.data.label;\n\n    new Dialog({\n        title: \"Contagion options\",\n        content: \"<p>Select the effect</p>\",\n        buttons: {\n            one: {\n                label: \"Blinding Sickness\",\n                callback: async () => {\n                    changes = [\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.check.wis\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.save.wis\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                    ];\n                    icon = \"modules/combat-utility-belt/icons/blinded.svg\";\n                    label = \"Blinding Sickness\";\n                    contagion.update({ changes, icon, label });\n                    await ContagionOff();\n                },\n            },\n            two: {\n                label: \"Filth Fever\",\n                callback: async () => {\n                    changes = [\n                        {\n                            key: \"flags.midi-qol.disadvantage.attack.mwak\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.attack.rwak\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.check.str\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.save.str\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                    ];\n                    label = \"Filth Fever\";\n                    contagion.update({ changes, label });\n                    await ContagionOff();\n                }\n            },\n            three: {\n                label: \"Flesh Rot\",\n                callback: async () => {\n                    changes = [\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.check.cha\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"data.traits.dv.all\",\n                            mode: 0,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                    ];\n                    icon = \"systems/dnd5e/icons/skills/blood_09.jpg\";\n                    label = \"Flesh Rot\";\n                    contagion.update({ changes, icon });\n                    ContagionOff();\n                }\n            },\n            four: {\n                label: \"Mindfire\",\n                callback: async () => {\n                    changes = [\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.check.int\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.save.int\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                    ];\n                    icon = \"icons/svg/daze.svg\";\n                    label = \"Mindfire\";\n                    contagion.update({ changes, icon });\n                    ContagionOff();\n                }\n            },\n            five: {\n                label: \"Seizure\",\n                callback: async () => {\n                    changes = [\n                        {\n                            key: \"flags.midi-qol.disadvantage.attack.mwak\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.attack.rwak\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.check.dex\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.save.dex\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                    ];\n                    icon = \"icons/svg/paralysis.svg\";\n                    label = \"Seizure\";\n                    contagion.update({ changes, icon });\n                    ContagionOff();\n                }\n            },\n            six: {\n                label: \"Slimy Doom\",\n                callback: async () => {\n                    changes = [\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.check.con\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                        {\n                            key: \"flags.midi-qol.disadvantage.ability.save.con\",\n                            mode: 5,\n                            priority: 20,\n                            value: \"1\",\n                        },\n                    ];\n                    icon = \"systems/dnd5e/icons/skills/blood_05.jpg\";\n                    label = \"Slimy Doom\";\n                    contagion.update({ changes, icon });\n                    ContagionOff();\n                }\n            },\n        }\n    }).render(true);\n}","author":"gSvPH9u5wzkE1oU1","img":"systems/dnd5e/icons/spells/rip-magenta-3.jpg","actorIds":[]}
{"_id":"x8eiKNDtJtdOAYtf","name":"ActorUnSetFlag","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).actor.unsetFlag(args[1], args[2]);\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"xvlKdxQUEPejHhWq","name":"Moonbeam DAE","permission":{"default":0,"gSvPH9u5wzkE1oU1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.NBkeQXznAGf5ctbN"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target @item.level\n\nlet target = canvas.tokens.get(args[1])\nlet data = {}\n/**\n * Create Moonbeam item in inventory\n */\nif (args[0] === \"on\") {\n  let damage = args[2];\n  await target.actor.createOwnedItem(\n    {\n      \"name\": \"Moonbeam repeating\",\n      \"type\": \"spell\",\n      \"data\": {\n        \"description\": {\n          \"value\": \"\",\n          \"chat\": \"\",\n          \"unidentified\": \"\"\n        },\n        \"source\": \"\",\n        \"activation\": {\n          \"type\": \"special\",\n          \"cost\": 0,\n          \"condition\": \"\"\n        },\n        \"duration\": {\n          \"value\": null,\n          \"units\": \"\"\n        },\n        \"target\": {\n          \"value\": 5,\n          \"width\": null,\n          \"units\": \"ft\",\n          \"type\": \"cylinder\"\n        },\n        \"range\": {\n          \"value\": 120,\n          \"long\": null,\n          \"units\": \"ft\"\n        },\n        \"ability\": \"\",\n        \"actionType\": \"save\",\n        \"attackBonus\": 0,\n        \"damage\": {\n          \"parts\": [\n            [\n              `${damage}d10`,\n              \"radiant\"\n            ]\n          ],\n          \"versatile\": \"\"\n        },\n        \"formula\": \"\",\n        \"save\": {\n          \"ability\": \"con\",\n          \"dc\": null,\n          \"scaling\": \"spell\"\n        },\n        \"level\": 0,\n        \"school\": \"abj\",\n        \"preparation\": {\n          \"mode\": \"prepared\",\n          \"prepared\": false\n        },\n        \"scaling\": {\n          \"mode\": \"none\",\n          \"formula\": \"\"\n        }\n      },\n      \"img\": \"systems/dnd5e/icons/spells/beam-blue-3.jpg\",\n    }\n  );\n}\n\n// Delete Moonbeam\nif (args[0] === \"off\") {\n  let item = target.actor.data.items.find(i => i.name === \"Moonbeam repeating\" && i.type === \"spell\")\n  target.actor.deleteOwnedItem(item._id)\n}","author":"gSvPH9u5wzkE1oU1","img":"systems/dnd5e/icons/spells/beam-blue-3.jpg","actorIds":[]}
