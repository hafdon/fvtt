(()=>{"use strict";class CoC7Dice{static async roll(modif=0,rollMode=null,hideDice=!1){let alternativeDice="";game.modules.get("dice-so-nice")?.active&&(modif<0?alternativeDice=game.settings.get("CoC7","tenDiePenalty"):modif>0&&(alternativeDice=game.settings.get("CoC7","tenDieBonus")));const roll=await new Roll("1dt"+("+1dt"+(""!==alternativeDice?"["+alternativeDice+"]":"")).repeat(Math.abs(modif))+"+1d10").roll({async:!0}),result={unit:{total:0,results:[]},tens:{total:0,results:[]},total:0,roll};return rollMode&&(result.rollMode=rollMode),hideDice&&(result.hideDice=hideDice),roll.dice.forEach((d=>{d instanceof CONFIG.Dice.terms.t?result.tens.results.push(d.total):(result.unit.total=10===d.total?0:d.total,result.unit.results.push(result.unit.total))})),result.tens.total=modif<0?Math.max(...result.tens.results):Math.min(...result.tens.results),result.total=result.unit.total+result.tens.total,0===result.total&&(result.total=100),result}static async showRollDice3d(roll){if(game.modules.get("dice-so-nice")?.active){const syncDice=game.settings.get("CoC7","syncDice3d");await game.dice3d.showForRoll(roll,game.user,syncDice)}}}function createInlineRoll(roll){const data={cls:["inline-roll"],dataset:{}};try{data.cls.push("inline-result"),data.result=roll.total,data.title=roll.formula,data.dataset.roll=escape(JSON.stringify(roll))}catch(err){return null}const a=document.createElement("a");a.classList.add(...data.cls),a.title=data.title;for(const[k,v]of Object.entries(data.dataset))a.dataset[k]=v;return a.innerHTML=`<i class="fas fa-dice-d20"></i> ${data.result}`,a}function isCtrlKey(event){return event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode}class chatHelper{static hyphenToCamelCase(string){return string.replace(/-([a-z])/g,(function(string){return string[1].toUpperCase()}))}static async createMessage(title,message,options={}){const messageData={};messageData.flavor=title,messageData.speaker=options.speaker||ChatMessage.getSpeaker(),options.whisper&&(messageData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER,messageData.whisper=options.whisper),void 0!==options.roll&&(messageData.roll=options.roll,messageData.type=CONST.CHAT_MESSAGE_TYPES.ROLL,messageData.rollMode=CONST.DICE_ROLL_MODES.SELF),messageData.user=game.user.id,messageData.content=message,ChatMessage.create(messageData).then((msg=>msg))}static camelCaseToHyphen(string){return string.replace(/([A-Z])/g,(function(string){return"-"+string.toLowerCase()}))}static getActorFromKey(key){if(!key)return null;if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];return chatHelper.getTokenFromKey(key)?.actor}return game.actors.get(key)||null}static getSpeakerFromKey(actorKey){const speaker={},actor=chatHelper.getActorFromKey(actorKey);if(actorKey.includes(".")){const[sceneId,tokenId]=actorKey.split(".");speaker.token=tokenId,speaker.scene=sceneId,actor.token?.name&&(speaker.alias=actor.token.name),speaker.actor=actor.id}else speaker.actor=actorKey,speaker.alias=actor.name;return speaker}static attachObjectToElement(object,element,objectName=""){Object.keys(object).forEach((prop=>{prop.startsWith("_")||("object"==typeof object[prop]?chatHelper.attachObjectToElement(object[prop],element,`${objectName}:${prop}:`):element.dataset[`${objectName}${prop}`]=object[prop])}))}static getObjectFromElement(object,element){function deserialize(obj,key,value){if(key.startsWith(":")){const s=key.slice(1),objProp=s.slice(s.indexOf(":")+1),objName=s.substring(0,s.indexOf(":"));void 0===obj[objName]&&(obj[objName]={}),deserialize(obj[objName],objProp,value)}else"true"===value?obj[key]=!0:"false"===value?obj[key]=!1:Number(value).toString()===value?obj[key]=Number(value):obj[key]=value}element&&object&&Object.keys(element.dataset).forEach((prop=>{"template"!==prop&&deserialize(object,prop,element.dataset[prop])}))}static getTokenFromKey(key){if(!key)return null;if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId){const tokenDoc=game.actors.tokens[tokenId]?.token;return tokenDoc.object}{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;const token=new Token(tokenData);return token.scene||(token.scene=duplicate(scene.data)),token}}{const actor=game.actors.get(key);return chatHelper.getActorToken(actor)}}static getActorToken(actor){return actor?actor.token||{data:actor.data.token}:null}static getActorImgFromKey(actorKey){if(!actorKey)return null;if(game.settings.get("CoC7","useToken")){const token=chatHelper.getTokenFromKey(actorKey);if(token)return token.data.img}const actor=chatHelper.getActorFromKey(actorKey);return game.settings.get("CoC7","useToken")&&actor.data.token?actor.data.token.img:actor.data.img}static getDistance(startToken,endToken){let distance={gridUnit:0,value:0,unit:canvas.scene.data.gridUnits};if(void 0!==startToken&&void 0!==startToken.center&&void 0!==endToken&&void 0!==endToken.center){const ray=new Ray(startToken.center,endToken.center),segment=[{ray}];distance={gridUnit:ray.distance/canvas.scene.data.grid,value:canvas.grid.measureDistances(segment,{gridSpaces:game.settings.get("CoC7","gridSpaces")})[0],unit:canvas.scene.data.gridUnits}}return distance}static toYards(distance){switch(distance.unit){case"ft":return distance.value/3;case"yd":case"m":default:return distance.value}}}class CoC7Roll{static getFromCard(card){const rollDiv=card.querySelector("div.dice-roll");if(!rollDiv)return null;const roll=new CoC7Roll;return chatHelper.getObjectFromElement(roll,rollDiv),roll}get resultType(){switch(this.successLevel=parseInt(this.successLevel),this.successLevel){case CoC7Check.successLevel.regular:return game.i18n.format("CoC7.RegularSuccess");case CoC7Check.successLevel.hard:return game.i18n.format("CoC7.HardSuccess");case CoC7Check.successLevel.extreme:return game.i18n.format("CoC7.ExtremeSuccess");case CoC7Check.successLevel.critical:return game.i18n.format("CoC7.CriticalSuccess");case CoC7Check.successLevel.fumble:return game.i18n.format("CoC7.Fumble");case CoC7Check.successLevel.failure:return game.i18n.format("CoC7.Failure");default:return null}}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get item(){return this.itemId&&this.actor?this.actor.items.get(this.itemId):null}get skill(){return this.skillId&&this.actor?this.actor.items.get(this.skillId):null}showDiceRoll(){if(game.modules.get("dice-so-nice")?.active){const diceResults=[];this.dices.tens.forEach((dieResult=>{diceResults.push(100===dieResult.value?0:dieResult.value/10)})),diceResults.push(this.dices.unit.value);const diceData={formula:`${this.dices.tens.length}d100+1d10`,results:diceResults,whisper:null,blind:!1};game.dice3d.show(diceData)}}static getFromElement(element,object=null){if(!element)return;const roll=object||new CoC7Roll;chatHelper.getObjectFromElement(roll,element),roll.dices={tens:[],unit:{}},chatHelper.getObjectFromElement(roll.dices,element.querySelector(".dice-result")),roll.dices.hasBonus=0!==roll.diceModifier,roll.dices.bonus=Math.abs(roll.diceModifier),roll.dices.bonusType=roll.diceModifier<0?game.i18n.format("CoC7.DiceModifierPenalty"):game.i18n.format("CoC7.DiceModifierBonus");const tenDice=element.querySelector(".ten-dice");tenDice&&tenDice.querySelectorAll("li").forEach((d=>{const die={selected:!1,isMax:!1,isMin:!1,value:-1};chatHelper.getObjectFromElement(die,d),roll.dices.tens.push(die)}));const unitDie=element.querySelector(".unit-die")?element.querySelector(".unit-die").querySelector("li"):null;roll.dices.unit.value=unitDie?parseInt(unitDie.dataset.value):null,roll.increaseSuccess=[];const increaseSuccess=element.querySelector(".increase-success");return increaseSuccess&&increaseSuccess.querySelectorAll("button")&&increaseSuccess.querySelectorAll("button").forEach((isl=>{const newSuccesLevel={};chatHelper.getObjectFromElement(newSuccesLevel,isl),roll.increaseSuccess.push(newSuccesLevel)})),roll.luckNeeded&&(roll.luckNeededTxt=game.i18n.format("CoC7.SpendLuck",{luckNeededValue:roll.luckNeeded})),object?void 0:roll}static getFromCheck(check){const roll=new CoC7Roll;return roll.rollType=check.rollType,roll.side=check.side,roll.action=check.action,roll.refMessageId=check.refMessageId,roll.referenceMessageId=check.referenceMessageId,roll.successLevel=check.successLevel,roll.difficulty=check.difficulty,roll.skillId=check.skill?check.skill.id:null,roll.itemId=check.item?check.item.id:null,roll.diceMod=check.diceModifier,roll.value=parseInt(check.rawValue),roll.fumble=check.isFumble,roll.critical=check.isCritical,roll.characteristic=check.characteristic?check.characteristic:null,roll.result=check.dice.total,roll.actorKey=check.actor.tokenKey,check.actor.isToken?(roll.tokenId=check.actor.tokenKey,roll.actorId=null):(roll.tokenKey=null,roll.actorId=check.actor.tokenKey),roll}static attachCheckToElement(htmlElement,check){const roll=CoC7Roll.getFromCheck(check);return roll.attachToElement(htmlElement),roll}attachToElement(htmlElement){chatHelper.attachObjectToElement(this,htmlElement)}}class CoC7Damage{static getMainDie(damageString){return damageString.toLowerCase().includes("d20")?"d20":damageString.toLowerCase().includes("d12")?"d12":damageString.toLowerCase().includes("d10")?"d10":damageString.toLowerCase().includes("d8")?"d8":damageString.toLowerCase().includes("d4")?"d4":"d6"}static getFromElement(element,object=null){if(!element)return;const damage=object||{};chatHelper.getObjectFromElement(damage,element);const rolls=element.querySelector(".dice-rolls").querySelectorAll("li");return damage.rolls=[],rolls.forEach((r=>{const roll={};chatHelper.getObjectFromElement(roll,r),damage.rolls.push(roll)})),object?void 0:damage}}class CoC7Utilities{static isFormula(x){return"string"==typeof x&&(!!isNaN(Number(x))&&Roll.validate(x))}static ParseChatEntry(html,content){const terms=content.match(/(\S+)/g);if(terms[0]?.toLowerCase().match(/^\/r(oll)?$/)&&terms[1]?.toLowerCase().startsWith("1d%"))return setTimeout((function(){CoC7Utilities._ExecCommand(content)}),200),!1}static async _ExecCommand(content){const options=content.toLowerCase().split(" ")?.join("")?.replace(/\/r(oll)?1d%/,""),check=new CoC7Check;if(options.length){let threshold,flatDiceModifier,flatThresholdModifier,escaped=options,difficulty=CoC7Check.difficultyLevel.regular,diceModifier=0,ask=!1;const thresholdStr=escaped.match(/[^(]+(?=\))/);thresholdStr&&thresholdStr.length&&(threshold=Number(thresholdStr[0]),thresholdStr.forEach((match=>{escaped=escaped.replace(`(${match})`,"")})));const difficultyStr=escaped.match(/[^[]+(?=\])/);if(difficultyStr&&difficultyStr.length&&(difficulty=CoC7Utilities.convertDifficulty(difficultyStr[0]),difficultyStr.forEach((match=>{escaped=escaped.replace(`[${match}]`,"")}))),escaped.includes("?")&&(ask=!0,escaped=escaped.replace("?","")),isNaN(Number(escaped))||(diceModifier=Number(escaped)),ask){const dialogOptions={threshold,modifier:diceModifier,difficulty,askValue:!0},usage=await RollDialog.create(dialogOptions);usage&&(diceModifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),threshold=Number(usage.get("threshold"))||threshold,flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,threshold&&(check.rawValue=isNaN(threshold)?void 0:threshold)}const speaker=ChatMessage.getSpeaker();if(speaker.token&&speaker.scene){const actor=chatHelper.getActorFromKey(`${speaker.scene}.${speaker.token}`);actor&&(check.actor=actor)}else if(speaker.actor){const actor=game.actors.get(speaker.actor);actor&&(check.actor=actor)}await check.roll(),check.toMessage()}static async test(){ui.notifications.infos("Do some stuff")}static getCreatureSanData(creature){let creatureData,actor;if("CoCActor"===creature.constructor.name&&(actor=creature),"string"==typeof creature&&(actor=CoC7Utilities.getActorFromString(creature)),actor){if(actor.isToken){const specie=game.actors.get(actor.id);creatureData=specie&&specie.sanLossMax!==actor.sanLossMax?{id:actor.token.id,name:actor.name,sanLossMax:actor.sanLossMax,specie:{id:specie.id,name:specie.name,sanLossMax:specie.sanLossMax}}:{id:specie?specie.id:actor.id,name:specie?specie.name:actor.name,sanLossMax:specie?specie.sanLossMax:actor.sanLossMax}}else creatureData={id:actor.id,name:actor.name,sanLossMax:actor.sanLossMax};return creatureData}return"object"==typeof creature?creature:null}static getActorFromString(actorString){let actor;return game.actors.tokens[actorString]?game.actors.tokens[actorString]:(actor=game.actors.get(actorString),actor||(actor=Object.values(game.actors.tokens).find((t=>t.name.toLowerCase()===actorString.toLowerCase())),actor||(actor=game.actors.find((a=>a.name.toLowerCase()===actorString.toLowerCase()))),actor||null))}static getCharacteristicNames(char){const charKey=char.toLowerCase();switch(charKey){case"str":return{short:game.i18n.localize("CHARAC.STR"),label:game.i18n.localize("CHARAC.Strength")};case"con":return{short:game.i18n.localize("CHARAC.CON"),label:game.i18n.localize("CHARAC.Constitution")};case"siz":return{short:game.i18n.localize("CHARAC.SIZ"),label:game.i18n.localize("CHARAC.Size")};case"dex":return{short:game.i18n.localize("CHARAC.DEX"),label:game.i18n.localize("CHARAC.Dexterity")};case"app":return{short:game.i18n.localize("CHARAC.APP"),label:game.i18n.localize("CHARAC.Appearance")};case"int":return{short:game.i18n.localize("CHARAC.INT"),label:game.i18n.localize("CHARAC.Intelligence")};case"pow":return{short:game.i18n.localize("CHARAC.POW"),label:game.i18n.localize("CHARAC.Power")};case"edu":return{short:game.i18n.localize("CHARAC.EDU"),label:game.i18n.localize("CHARAC.Education")};default:for(const[,value]of Object.entries(game.system.template.Actor.templates.characteristics.characteristics))if(charKey===game.i18n.localize(value.short).toLowerCase())return{short:game.i18n.localize(value.short),label:game.i18n.localize(value.label)};return null}}static convertDifficulty(difficulty){if("0"===String(difficulty))return CoC7Check.difficultyLevel.regular;if("string"!=typeof difficulty)return difficulty;if(!isNaN(Number(difficulty)))return Number(difficulty);switch(difficulty){case"?":return CoC7Check.difficultyLevel.unknown;case"+":return CoC7Check.difficultyLevel.hard;case"++":return CoC7Check.difficultyLevel.extreme;case"+++":return CoC7Check.difficultyLevel.critical;default:return CoC7Check.difficultyLevel.regular}}static skillCheckMacro(skill,event,options={}){event.preventDefault();const speaker=ChatMessage.getSpeaker();let actor;speaker.token&&(actor=game.actors.tokens[speaker.token]),actor||(actor=game.actors.get(speaker.actor)),actor?actor.skillCheck(skill,event.shiftKey,options):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoActorAvailable"))}static weaponCheckMacro(weapon,event){event.preventDefault();const speaker=ChatMessage.getSpeaker();let actor;if(speaker.token&&(actor=game.actors.tokens[speaker.token]),!actor)if(speaker.scene&&speaker.token){const baseActor=game.actors.get(speaker.actor),token=game.scenes.get(speaker.scene).tokens.get(speaker.token);actor=new(getDocumentClass("Actor"))(baseActor.toJSON(),{parent:token})}else actor=game.actors.get(speaker.actor);actor?actor.weaponCheck(weapon,event.shiftKey):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoActorAvailable"))}static async checkMacro(threshold,event=null){await CoC7Utilities.rollDice(event,{threshold})}static async createMacro(bar,data,slot){if("Item"!==data.type)return;let item,origin,command,packName=null;if(data.pack){const pack=game.packs.get(data.pack);if("Item"!==pack.metadata.entity)return;packName=data.pack,item=await pack.getDocument(data.id),origin="pack"}else data.data?(item=data.data,origin="actor"):(item=game.items.get(data.id),origin="game");if(!item)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroNoItemFound"));if("weapon"!==item.type&&"skill"!==item.type)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroIncorrectType"));if("weapon"===item.type&&(command=`game.CoC7.macros.weaponCheck({name:'${item.name}', id:'${item.id}', origin:'${origin}', pack: '${packName}'}, event);`),"skill"===item.type){if(CoC7Item.isAnySpec(item))return ui.notifications.warn(game.i18n.localize("CoC7.WarnNoGlobalSpec"));command=`game.CoC7.macros.skillCheck({name:'${item.name}', id:'${item.id}', origin:'${origin}', pack: '${packName}'}, event);`}let macro=game.macros.contents.find((m=>m.name===item.name&&m.command===command));return macro||(macro=await Macro.create({name:item.name,type:"script",img:item.img,command})),game.user.assignHotbarMacro(macro,slot),!1}static async toggleDevPhase(){const isDevEnabled=game.settings.get("CoC7","developmentEnabled");await game.settings.set("CoC7","developmentEnabled",!isDevEnabled);game.CoC7.menus.controls.find((b=>"main-menu"===b.name)).tools.find((t=>"devphase"===t.name)).title=game.settings.get("CoC7","developmentEnabled")?game.i18n.localize("CoC7.DevPhaseEnabled"):game.i18n.localize("CoC7.DevPhaseDisabled"),ui.notifications.info(game.settings.get("CoC7","developmentEnabled")?game.i18n.localize("CoC7.DevPhaseEnabled"):game.i18n.localize("CoC7.DevPhaseDisabled")),ui.controls.render(),game.socket.emit("system.CoC7",{type:"updateChar"}),CoC7Utilities.updateCharSheets()}static async toggleCharCreation(){const isCharCreation=game.settings.get("CoC7","charCreationEnabled");await game.settings.set("CoC7","charCreationEnabled",!isCharCreation);game.CoC7.menus.controls.find((b=>"main-menu"===b.name)).tools.find((t=>"charcreate"===t.name)).title=game.settings.get("CoC7","charCreationEnabled")?game.i18n.localize("CoC7.CharCreationEnabled"):game.i18n.localize("CoC7.CharCreationDisabled"),ui.notifications.info(game.settings.get("CoC7","charCreationEnabled")?game.i18n.localize("CoC7.CharCreationEnabled"):game.i18n.localize("CoC7.CharCreationDisabled")),ui.controls.render(),game.socket.emit("system.CoC7",{type:"updateChar"}),CoC7Utilities.updateCharSheets()}static async startRest(){const actors=game.actors.filter((actor=>actor.hasPlayerOwner));let chatContent=`<i>${game.i18n.localize("CoC7.dreaming")}...</i><br>`;actors.forEach((actor=>{let quickHealer=!1;actor.data.items.forEach((item=>{"talent"===item.type&&item.name===`${game.i18n.localize("CoC7.quickHealer")}`&&(quickHealer=!0)}));const isCriticalWounds=actor.data.data.status.criticalWounds.value,dailySanityLoss=actor.data.data.attribs.san.dailyLoss,hpValue=actor.data.data.attribs.hp.value,hpMax=actor.data.data.attribs.hp.max,oneFifthSanity=" / "+Math.floor(actor.data.data.attribs.san.value/5),mpValue=actor.data.data.attribs.mp.value,mpMax=actor.data.data.attribs.mp.max;chatContent+=`<br><b>${actor.name}. </b>`,!1===isCriticalWounds&&hpValue<hpMax?game.settings.get("CoC7","pulpRules")&&!0===quickHealer?(chatContent+=`<b style="color:darkolivegreen">${game.i18n.format("CoC7.pulpHealthRecovered",{number:3})}. </b>`,actor.update({"data.attribs.hp.value":actor.data.data.attribs.hp.value+3})):game.settings.get("CoC7","pulpRules")?(chatContent+=`<b style="color:darkolivegreen">${game.i18n.format("CoC7.pulpHealthRecovered",{number:2})}. </b>`,actor.update({"data.attribs.hp.value":actor.data.data.attribs.hp.value+2})):(chatContent+=`<b style="color:darkolivegreen">${game.i18n.localize("CoC7.healthRecovered")}. </b>`,actor.update({"data.attribs.hp.value":actor.data.data.attribs.hp.value+1})):!0===isCriticalWounds&&hpValue<hpMax&&(chatContent+=`<b style="color:darkred">${game.i18n.localize("CoC7.hasCriticalWounds")}. </b>`),dailySanityLoss>0&&(chatContent+=`<b style="color:darkolivegreen">${game.i18n.localize("CoC7.dailySanLossRestarted")}.</b>`,actor.update({"data.attribs.san.dailyLoss":0,"data.attribs.san.oneFifthSanity":oneFifthSanity})),mpValue<mpMax&&(chatContent+=`<b style="color:darkolivegreen">${game.i18n.format("CoC7.magicPointsRecovered")}: 7.</b>`,actor.update({"data.attribs.mp.value":actor.data.data.attribs.mp.value+7}))}));const chatData={user:game.user.id,speaker:ChatMessage.getSpeaker(),content:chatContent,type:CONST.CHAT_MESSAGE_TYPES.OTHER};ChatMessage.create(chatData)}static async toggleXPGain(){const isXPEnabled=game.settings.get("CoC7","xpEnabled");await game.settings.set("CoC7","xpEnabled",!isXPEnabled);game.CoC7.menus.controls.find((b=>"main-menu"===b.name)).tools.find((t=>"xptoggle"===t.name)).title=game.settings.get("CoC7","xpEnabled")?game.i18n.localize("CoC7.XPGainEnabled"):game.i18n.localize("CoC7.XPGainDisabled"),ui.notifications.info(game.settings.get("CoC7","xpEnabled")?game.i18n.localize("CoC7.XPGainEnabled"):game.i18n.localize("CoC7.XPGainDisabled")),ui.controls.render()}static async rollDice(event,options={}){let diceModifier,difficulty,flatDiceModifier,flatThresholdModifier;options.askValue=!options.threshold;let threshold=options.threshold;if(void 0!==options.modifier&&(diceModifier=Number(options.modifier)),void 0!==options.difficulty&&(difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!event?.shiftKey&&!options.fastForward){const usage=await RollDialog.create(options);usage&&(diceModifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),threshold=Number(usage.get("threshold")),flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}const actors=[];if(game.user.isGM&&canvas.tokens.controlled.length?canvas.tokens.controlled.forEach((token=>{actors.push(token.actor.tokenKey)})):game.user.character&&actors.push(game.user.character.tokenKey),await actors.forEach((async tk=>{const check=new CoC7Check;check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,check.actor=tk,await check.roll(),check.toMessage()})),!actors.length){const check=new CoC7Check;check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,await check.roll(),check.toMessage()}}static updateCharSheets(){game.user.isGM?game.actors.contents.forEach((a=>{"character"===a?.data?.type&&a?.sheet&&a?.sheet?.rendered&&(a.update({"data.flags.locked":!0}),a.render(!1))})):game.actors.contents.forEach((a=>{a.isOwner&&(a.update({"data.flags.locked":!0}),a.render(!1))}))}static async getDataFromDropEvent(event,entityType="Item"){if(event.originalEvent)return[];try{const dataList=JSON.parse(event.dataTransfer.getData("text/plain"));if("Folder"===dataList.type&&dataList.documentName===entityType){const folder=game.folders.get(dataList.id);return folder?folder.contents:[]}if(dataList.type===entityType){if(dataList.pack){const pack=game.packs.get(dataList.pack);return pack.metadata.entity!==entityType?[]:[await pack.getDocument(dataList.id)]}return dataList.data?[dataList]:[game.items.get(dataList.id)]}return[]}catch(err){return[]}}static async copyToClipboard(text){try{if(navigator.clipboard&&window.isSecureContext)return navigator.clipboard.writeText(text);{const textArea=document.createElement("textarea");return textArea.value=text,textArea.style.position="fixed",textArea.style.left="-999px",textArea.style.top="-999px",document.body.appendChild(textArea),textArea.focus(),textArea.select(),new Promise(((resolve,reject)=>{document.execCommand("copy")?resolve():reject(new Error("Unable to copy to clipboard, this is likely due to your browser security settings.")),textArea.remove()})).catch((err=>ui.notifications.error(err)))}}catch(err){ui.notifications.error("Unable to copy to clipboard, this is likely due to your browser security settings.")}}}class ChatCardActor{constructor(actorKey=null,fastForward=!1){this.actorKey=actorKey,this.fastForward=fastForward}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get isBlind(){return this.rollMode?(void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind):null}set isBlind(x){this._isBlind=x}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){this._rollMode=x}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}get item(){return this.itemId?this.actor.items.get(this.itemId):null}get weapon(){return this.item}get targetedTokens(){return[...game.user.targets]}get target(){return this.targetToken?this.targetToken:this.targetActor}get targetToken(){return this._targetToken||(this._targetKey?this._targetToken=chatHelper.getTokenFromKey(this._targetKey):(this._targetToken=this.targetedTokens.pop(),this._targetToken?this._targetKey=`${this._targetToken.scene.id}.${this._targetToken.id}`:this._targetToken=null)),this._targetToken}get targetActor(){return this._targetActor||(this.targetToken?this._targetActor=this.targetToken.actor:this._targetActor=chatHelper.getActorFromKey(this._targetKey)),this._targetActor}get targetKey(){return this.targetToken||this.targetActor?this._targetKey:null}get hasTarget(){return!(!this.targetToken&&!this.targetActor)}set targetKey(x){this._targetKey=x}get skills(){return this.actor.getWeaponSkills(this.itemId)}get targetImg(){const img=chatHelper.getActorImgFromKey(this.targetKey);return img||"../icons/svg/mystery-man-black.svg"}get name(){return this.token?this.token.name:this.actor.name}get targetName(){return this.target?this.target.name:"dummy"}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}async say(message,flavor=null){const speakerData={};let speaker;this.actor?(this.token?speakerData.token=this.token:speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,flavor,content:message};["gmroll","blindroll"].includes(game.settings.get("core","rollMode"))&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}}function replacer(key,value){if(key.startsWith("__"))return;if(["_actor","_creature"].includes(key))return;return["sanCheck","intCheck"].includes(key)?value.JSONRollData:value}class SanCheckCard extends ChatCardActor{constructor(actorKey=null,sanData={},options={}){super(actorKey,void 0!==options.fastForward&&Boolean(options.fastForward)),this.sanData=sanData,this.options=options,sanData.modifier&&!isNaN(Number(sanData.modifier))&&(this.options.sanModifier=Number(sanData.modifier)),sanData.difficulty&&!isNaN(Number(sanData.difficulty))&&(this.options.sanDifficulty=Number(sanData.difficulty)),this.state={}}get isBlind(){return void 0!==this.options.isBlind?Boolean(this.options.isBlind):super.isBlind}get difficulty(){return void 0!==this.options.difficulty?this.options.difficulty:CoC7Check.difficultyLevel.regular}get modifier(){return void 0!==this.options.modifier?this.options.modifier:0}get creature(){return!this.sanData.creatureKey||this.__creature&&"Object"!==this.__creature.constructor.name||(this.__creature=chatHelper.getActorFromKey(this.sanData.creatureKey)),this.__creature}get involuntaryAction(){return!(!this.state.sanRolled||!this.sanCheck.isFailure&&!this.sanCheck.isFumble)}get sanLossFormula(){if(this.state.sanRolled){if(this.sanData.sanMax&&this.sanCheck.failed)return isNaN(Number(this.sanData.sanMax))?this.sanData.sanMax:Number(this.sanData.sanMax);if(this.sanData.sanMin&&this.sanCheck.passed)return isNaN(Number(this.sanData.sanMin))?this.sanData.sanMin:Number(this.sanData.sanMin);const formula=this.creature?.sanLoss?this.sanCheck.passed:0;return formula?isNaN(Number(formula))?formula:Number(formula):0}return null}get sanLostToThisCreature(){if(this.creature)return this.actor.sanLostToCreature(this.creature)}get maxSanLossToThisCreature(){if(this.creature)return this.actor.maxPossibleSanLossToCreature(this.creature)}get maxSanLoss(){return this.creature?this.maxSanLossToThisCreature:this.sanData.sanMax?isNaN(Number(this.sanData.sanMax))?new Roll(this.sanData.sanMax).evaluate({maximize:!0}).total:Number(this.sanData.sanMax):null}get creatureEncountered(){if(this.creature)return this.actor.creatureEncountered(this.creature)}get creatureSpecieEncountered(){if(this.creature)return this.actor.creatureSpecieEncountered(this.creature)}get firstEncounter(){return!this.actor.mythosInsanityExperienced}get creatureHasSpecie(){return!!CoC7Utilities.getCreatureSanData(this.creature).specie}get isActorLoosingSan(){if(this.actor.isInABoutOfMadness)return!1;if(0===this.sanLossFormula)return!1;if(this.creature){if(!this.creature.sanLossMax)return!1;if(this.actor.sanLostToCreature(this.creature)>=this.creature.sanLossMax)return this.state.immuneToCreature=!0,!1;if(0===this.actor.maxPossibleSanLossToCreature(this.creature))return this.state.immuneToCreature=!0,!1}return!0}get boutDurationText(){if(this.boutDuration){if(this.boutRealTime)return`${this.boutDuration} rounds`;if(this.boutSummary)return`${this.boutDuration} hours`}return null}get alreadyInsaneText(){return this.actor.sanity.underlying.indefintie?game.i18n.localize("CoC7.AlreadyUnderlyingInsanity"):game.i18n.localize("CoC7.AlreadyUnderlyingInsanity")+` (${this.actor.sanity.underlying.durationText})`}get youGainCthulhuMythosString(){return this.mythosGain?game.i18n.format("CoC7.YouGainedCthulhuMythos",{value:this.mythosGain}):null}async advanceState(state){switch(state){case"keepCreatureSanData":this.state.keepCreatureSanData=!0;break;case"involuntaryActionPerformed":this.state[state]=!0,this.isActorLoosingSan||(this.state.finish=!0);break;case"sanLossApplied":await this.applySanLoss();break;case"enterBoutOfMadnessRealTime":this.boutDuration=(await new Roll("1D10").roll({async:!0})).total,this.boutRealTime=!0,this.boutSummary=!1,this.boutResult=await this.actor.enterBoutOfMadness(!0,this.boutDuration),this.state.boutOfMadnessResolved=!0,this.state.boutOfMadnessOver=!1;break;case"enterBoutOfMadnessSummary":this.boutDuration=(await new Roll("1D10").roll({async:!0})).total,this.boutRealTime=!1,this.boutSummary=!0,this.boutResult=await this.actor.enterBoutOfMadness(!1,this.boutDuration),this.state.boutOfMadnessResolved=!0,await this.triggerInsanity();break;case"boutOfMadnessOver":await this.actor.exitBoutOfMadness(),await this.triggerInsanity();break;case"noMythosGained":this.state.cthulhuMythosAwarded=!0,this.mythosGain=0;break;case"cthulhuMythosAwarded":{let amountGained=1;this.actor.mythosInsanityExperienced||(amountGained=5,await this.actor.experienceFirstMythosInsanity()),this.state.cthulhuMythosAwarded=!0;const cthulhuMythosSkill=this.actor.cthulhuMythosSkill,oldValue=cthulhuMythosSkill.data.data.adjustments.experience||0;cthulhuMythosSkill&&await cthulhuMythosSkill.update({"data.adjustments.experience":oldValue+amountGained}),this.mythosGain=amountGained;break}}}async bypassRollSan(){this.isBypassed=!0,this.sanCheck=new CoC7Check,this.sanCheck.actor=this.actorKey,this.sanCheck.attribute="san",this.sanCheck.difficulty=this.options.sanDifficulty||CoC7Check.difficultyLevel.regular,this.sanCheck.diceModifier=this.options.sanModifier||0,await this.sanCheck._perform(),this.state.sanRolled=!0,this.state.involuntaryActionPerformed=this.sanCheck.passed,this.state.sanLossRolled=!0,this.state.ignoreSanCheck=!0,this.sanLoss=this.sanLossFormula}async rollSan(){if(this.sanCheck=new CoC7Check,this.sanCheck.actor=this.actorKey,this.sanCheck.attribute="san",this.sanCheck.difficulty=this.options.sanDifficulty||CoC7Check.difficultyLevel.regular,this.sanCheck.diceModifier=this.options.sanModifier||0,await this.sanCheck._perform(),this.state.sanRolled=!0,this.state.involuntaryActionPerformed=this.sanCheck.passed,this.isActorLoosingSan){if("number"==typeof this.sanLossFormula)this.state.sanLossRolled=!0,this.creature?(this.sanLoss=Math.min(this.sanLossFormula,this.maxSanLossToThisCreature),this.sanLossFormula>this.maxSanLossToThisCreature&&(this.state.limitedLossToCreature=!0)):this.sanLoss=this.sanLossFormula;else if(this.sanCheck.isFumble)this.state.sanLossRolled=!0,this.sanLoss=this.maxSanLoss;else if(this.creature){new Roll(this.sanLossFormula).evaluate({minimize:!0}).total>=this.maxSanLossToThisCreature&&(this.state.sanLossRolled=!0,this.sanLoss=this.maxSanLossToThisCreature,this.state.limitedLossToCreature=!0)}}else this.state.finish=!0,this.actor.isInABoutOfMadness&&(this.state.immuneAlreadyInBout=!0,this.sanCheck.passed||(this.state.finish=!1)),this.state.sanLossRolled=!0,this.state.sanLossApplied=!0,this.state.intRolled=!0,this.state.insanity=!1,this.sanLoss=0}async rollSanLoss(){this.creature,this.sanLossRoll=new Roll(`${this.sanLossFormula}`),await this.sanLossRoll.roll({async:!0}),await CoC7Dice.showRollDice3d(this.sanLossRoll),this.creature&&this.sanLossRoll.total>this.maxSanLossToThisCreature&&(this.state.limitedLossToCreature=!0),this.sanLoss=this.creature?Math.min(this.sanLossRoll.total,this.maxSanLossToThisCreature):this.sanLossRoll.total,this.state.sanLossRolled=!0}async applySanLoss(){if(this.creature?await this.actor.looseSanToCreature(this.sanLoss,this.creature):await this.actor.looseSan(this.sanLoss),this.sanLoss>0&&(this.state.actorLostSan=!0),this.state.sanLossApplied=!0,this.actor.san<=0)return this.state.intRolled=!0,this.state.boutOfMadnessOver=!0,this.state.insanity=!0,this.state.permanentlyInsane=!0,void(this.state.finish=!0);this.sanLoss<5?(this.state.intRolled=!0,this.actor.isInsane?(this.state.insanity=!0,this.state.shaken=!0,this.state.insanityTableRolled=!1,this.state.finish=!1,this.state.intRolled=!0):(this.state.insanity=!1,this.state.shaken=!0,this.state.insanityTableRolled=!0,this.state.finish=!0)):this.state.intRolled=!1;let oneFifthSanity=this.actor.data.data.attribs.san.oneFifthSanity;oneFifthSanity=parseInt(oneFifthSanity.replace(/\D/g,"")),this.actor.dailySanLoss>=oneFifthSanity&&(this.state.insanity=!0,this.state.intRolled=!0,this.state.temporaryInsane=!1,this.state.indefinitelyInsane=!0,this.state.insanityTableRolled=!1,this.state.memoryRepressed=!1,this.state.finish=!1)}async rollInt(){this.intCheck=new CoC7Check,this.intCheck.actor=this.actorKey,this.intCheck.characteristic="int",this.intCheck.difficulty=this.options.intDifficulty||CoC7Check.difficultyLevel.regular,this.intCheck.diceModifier=this.options.intModifier||0,await this.intCheck._perform(),this.state.intRolled=!0,this.intCheck.passed||this.state.alreadyInsane?(this.state.insanity=!0,this.state.temporaryInsane=!0,this.state.indefinitelyInsane=!1,this.state.memoryRepressed=!1):(this.state.insanity=!1,this.state.temporaryInsane=!1,this.state.indefinitelyInsane=!1,this.state.memoryRepressed=!0,this.state.finish=!0)}async triggerInsanity(){if(this.state.boutOfMadnessOver=!0,this.state.indefinitelyInsane&&await this.actor.enterInsanity(!0),this.state.temporaryInsane){if(this.actor.sanity.underlying.active&&this.actor.sanity.underlying.indefintie)return void(this.state.finish=!0);this.insanityDurationRoll=await new Roll("1D10").roll({async:!0}),this.insanityDuration=this.insanityDurationRoll.total,this.actor.sanity.underlying.duration&&(this.insanityDuration+=this.actor.sanity.underlying.duration),await this.actor.enterInsanity(!1,this.insanityDuration)}this.state.finish=!0}async resetCreatureSanData(){await this.actor.resetCreature(this.creature),this.creatureEncountered||this.creatureSpecieEncountered||(this.state.keepCreatureSanData=!0)}async resetSpecieSanData(){await this.actor.resetSpecie(this.creature),this.creatureEncountered||this.creatureSpecieEncountered||(this.state.keepCreatureSanData=!0)}async updateChatCard(){if(this.state.sanRolled&&(this.__inlineSanCheck=this.sanCheck.inlineCheck.outerHTML),this.sanLossRoll){const a=createInlineRoll(this.sanLossRoll);this.__inlineSanLossRoll=a.outerHTML}this.state.intRolled&&this.intCheck&&(this.__inlineIntCheck=this.intCheck.inlineCheck.outerHTML);const html=await renderTemplate(SanCheckCard.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(JSON.stringify(this,replacer));const chatMessage=game.messages.get(this.messageId),msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}static get template(){return"systems/CoC7/templates/chat/cards/san-check.html"}static checkTargets(creatureKey,fastForward=!1){const targets=[...game.user.targets];targets.length&&targets.forEach((t=>{t.actor.isToken?SanCheckCard.create(t.actor.tokenKey,{creatureKey},{fastForward}):SanCheckCard.create(t.actor.id,{creatureKey},{fastForward})}))}static async create(...args){const chatCard=new SanCheckCard(...args);chatCard.actor.isInsane&&(chatCard.state.alreadyInsane=!0),chatCard.actor.san<=0&&(chatCard.state.intRolled=!0,chatCard.state.boutOfMadnessOver=!0,chatCard.state.insanity=!0,chatCard.state.permanentlyInsane=!0,chatCard.state.finish=!0),chatCard.creatureEncountered||chatCard.creatureSpecieEncountered||(chatCard.state.keepCreatureSanData=!0);const html=await renderTemplate(SanCheckCard.template,chatCard),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(JSON.stringify(chatCard,replacer)),await chatCard.say(htmlCardElement.outerHTML)}static getFromMessageId(messageId){const message=game.messages.get(messageId),htmlCard=$.parseHTML(message.data.content)[0].querySelector(".chat-card");return SanCheckCard.getFromCard(htmlCard)}static getFromCard(card){const sanCheckCardData=JSON.parse(unescape(card.dataset.object)),sanCheckCard=new SanCheckCard;return Object.assign(sanCheckCard,sanCheckCardData),sanCheckCard.messageId||(sanCheckCard.messageId=card.closest(".message").dataset.messageId),"Object"===sanCheckCard.sanCheck?.constructor?.name&&(sanCheckCard.sanCheck=Object.assign(new CoC7Check,sanCheckCard.sanCheck)),"Object"===sanCheckCard.intCheck?.constructor?.name&&(sanCheckCard.intCheck=Object.assign(new CoC7Check,sanCheckCard.intCheck)),"Object"===sanCheckCard.sanLossRoll?.constructor?.name&&(sanCheckCard.sanLossRoll=Roll.fromData(sanCheckCard.sanLossRoll)),sanCheckCard}}const COC7={eras:{nvct:"CoC7.EraNvct",drka:"CoC7.EraDrka",ddts:"CoC7.EraDdts",glit:"CoC7.EraGlit",1920:"CoC7.Era1920",pulp:"CoC7.EraPulp",mdrn:"CoC7.EraMdrn"},characteristics:{str:"CoC7.CharacStr",con:"CoC7.CharacCon",siz:"CoC7.CharacSiz",dex:"CoC7.CharacDex",app:"CoC7.CharacApp",int:"CoC7.CharacInt",pow:"CoC7.CharacPow",edu:"CoC7.CharacEdu"},skillProperties:{noadjustments:"CoC7.SkillNoAdjustments",noxpgain:"CoC7.SkillNoXpGain",special:"CoC7.SkillSpecial",rarity:"CoC7.SkillRarity",push:"CoC7.SkillPush",combat:"CoC7.SkillCombat",fighting:"CoC7.SkillFighting",firearm:"CoC7.SkillFirearm"},weaponProperties:{melee:"CoC7.Weapon.Property.Melee",rngd:"CoC7.WeaponRngd",mnvr:"CoC7.WeaponProperyManeuver",thrown:"CoC7.Weapon.Property.Thrown",shotgun:"CoC7.Weapon.Property.Shotgun",dbrl:"CoC7.WeaponDbrl",impl:"CoC7.WeaponImpl",brst:"CoC7.WeaponBrst",auto:"CoC7.WeaponAuto",ahdb:"CoC7.WeaponAhdb",addb:"CoC7.WeaponAddb",slnt:"CoC7.WeaponSlnt",spcl:"CoC7.WeaponSpcl",mont:"CoC7.WeaponMont",blst:"CoC7.WeaponBlst",stun:"CoC7.WeaponStun",rare:"CoC7.WeaponRare",burn:"CoC7.Weapon.Property.Burn"},spellProperties:{call:"CoC7.CallSpell",dismiss:"CoC7.DismissSpell",contact:"CoC7.ContactSpell",summon:"CoC7.SummonSpell",bind:"CoC7.BindSpell",enchantment:"CoC7.EnchantmentSpell",gate:"CoC7.GateSpell",combat:"CoC7.CombatSpell"},bookType:{mythos:"CoC7.MythosBook",occult:"CoC7.OccultBook",other:"CoC7.Other"},talentType:{physical:"CoC7.PhysicalTalent",mental:"CoC7.MentalTalent",combat:"CoC7.CombatTalent",miscellaneous:"CoC7.MiscellaneousTalent",basic:"CoC7.BasicTalent",insane:"CoC7.InsaneTalent",other:"CoC7.OtherTalent"},statusType:{mania:"CoC7.Mania",phobia:"CoC7.Phobia"},occupationProperties:{classic:"CoC7.Classic",lovecraftian:"CoC7.Lovecraftian",modern:"CoC7.Modern",pulp:"CoC7.Pulp"},formula:{}};COC7.formula.actor={"@STR":"this.data.data.characteristics.str.value","@CON":"this.data.data.characteristics.con.value","@SIZ":"this.data.data.characteristics.siz.value","@DEX":"this.data.data.characteristics.dex.value","@APP":"this.data.data.characteristics.app.value","@INT":"this.data.data.characteristics.int.value","@POW":"this.data.data.characteristics.pow.value","@EDU":"this.data.data.characteristics.edu.value"},COC7.formula.actorsheet={"@STR":"this.actor.data.data.characteristics.str.value","@CON":"this.actor.data.data.characteristics.con.value","@SIZ":"this.actor.data.data.characteristics.siz.value","@DEX":"this.actor.data.data.characteristics.dex.value","@APP":"this.actor.data.data.characteristics.app.value","@INT":"this.actor.data.data.characteristics.int.value","@POW":"this.actor.data.data.characteristics.pow.value","@EDU":"this.actor.data.data.characteristics.edu.value"},COC7.status={tempoInsane:"tempoInsane",indefInsane:"indefInsane",unconscious:"unconscious",criticalWounds:"criticalWounds",dying:"dying",prone:"prone",dead:"dead"},COC7.newSkillName="CoC7.NewSkillName",COC7.newItemName="CoC7.NewItemName",COC7.newWeaponName="CoC7.NewWeaponName",COC7.creatureFightingSkill="CoC7.creatureFightingSkill",COC7.dodgeSkillName="CoC7.DodgeSkillName",COC7.creditRatingSkillName="CoC7.CreditRatingSkillName",COC7.CthulhuMythosName="CoC7.CthulhuMythosName",COC7.fightingSpecializationName="CoC7.FightingSpecializationName",COC7.firearmSpecializationName="CoC7.FirearmSpecializationName",COC7.combatCards={fightBack:"CoC7.FightBack",dodge:"CoC7.Dodge",maneuver:"CoC7.Maneuver"};class CoC7ConCheck{constructor(actorId=null,difficulty=CoC7Check.difficultyLevel.regular){this.check=new CoC7Check(actorId),this.check.characteristic="con",this.check.difficulty=difficulty,this.check.denyPush=!0,this.actorId=actorId}get isBlind(){return void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind}set isBlind(x){this._isBlind=x}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}get actor(){return this.actorId?chatHelper.getActorFromKey(this.actorId):null}set actorId(x){this._actorId=x,this.check.actor=x}get actorId(){return this._actorId?this._actorId:null}get tokenKey(){return this.actor.isToken?this.actor.tokenKey:null}get isSuccess(){return!!this.check&&this.check.isSuccess}get isRolled(){return!!(this.check&&this.check.dices&&this.check.dices.total)}static getFromCard(card){const conCheck=new CoC7ConCheck;chatHelper.getObjectFromElement(conCheck,card);const htmlCheck=card.querySelector(".roll-result");return CoC7Roll.getFromElement(htmlCheck,conCheck.check),conCheck.messageId=card.closest(".message").dataset.messageId,conCheck}async getCheckElement(){const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this.check),htmlElement=$.parseHTML(html)[0];return htmlElement?(htmlElement.classList.remove("chat-card","item-card","roll-card"),htmlElement):null}async toMessage(fastForward=!1){fastForward&&await this.rollCon();const html=await renderTemplate("systems/CoC7/templates/chat/con-check.html",this),htmlElement=$.parseHTML(html)[0];if(fastForward){htmlElement.querySelector(".roll-result").replaceWith(await this.getCheckElement())}const speakerData={};let speaker;this.actor?(this.token?speakerData.token=this.token:speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,flavor:this.flavor,content:htmlElement.outerHTML};["gmroll","blindroll"].includes(game.settings.get("core","rollMode"))&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async rollCon(){this.check.hideDiceResult=!0,await this.check._perform(),this.isSuccess||this.isBlind||(this.stayAlive?await this.actor.fallDead():await this.actor.fallUnconscious()),this.applied=!0}async updateChatCard(){const html=await renderTemplate("systems/CoC7/templates/chat/con-check.html",this),htmlElement=$.parseHTML(html)[0];if(htmlElement.querySelector(".roll-result").replaceWith(await this.getCheckElement()),this.isBlind||!this.isRolled||this.isSuccess||(this.stayAlive?await this.actor.fallDead():await this.actor.fallUnconscious()),!this.messageId)return;const chatMessage=game.messages.get(this.messageId),msg=await chatMessage.update({content:htmlElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}}class SkillSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".select-skill").click((async event=>this._onSelectSkillClicked(event)))}async _onSelectSkillClicked(event){const li=event.currentTarget.closest(".item");this.data.data.skills[Number(li.dataset.index)].selected=!0,event.currentTarget.style.display="none",this.data.data.added||(this.data.data.added=0),this.data.data.added++;event.currentTarget.closest(".skill-selector").querySelector(".count").innerText=this.data.data.added,this.data.data.added>=this.data.data.optionsCount&&this.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/skill-select.html",data);return new Promise((resolve=>{new SkillSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>{if(!data.added>=data.optionsCount)return resolve(!1);const selected=data.skills.filter((skill=>skill.selected));return resolve(selected)}},{classes:["coc7","dialog","skill-select"]}).render(!0)}))}}class PointSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".item-name").click((async event=>this._onSelectCharacteristic(event))),html.find("button").click((event=>this._onButtonClicked(event)))}async _onSelectCharacteristic(event){const li=event.currentTarget.closest(".item");li.closest(".item-list").querySelectorAll(".selectable").forEach((item=>{item.classList.remove("selected"),this.data.data.characteristics[item.dataset.key].selected=!1,this.data.data.characteristics[item.dataset.key].optional=!1})),$(li).toggleClass("selected"),this.data.data.characteristics[li.dataset.key].selected=!0;li.closest("#skill-selection-form").querySelector(".points").innerText=this.data.data.total+this.data.data.characteristics[li.dataset.key].multiplier*this.data.data.characteristics[li.dataset.key].value;li.closest("#skill-selection-form").querySelector("button.validate").classList.remove("inactive"),this.data.data.resolved=!0}async _onButtonClicked(event){event.preventDefault(),event.currentTarget.classList.contains("inactive")||super.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/point-select.html",data);return new Promise((resolve=>{new PointSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>data.resolved?resolve(data):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class CharacSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".item-name").click((async event=>this._onSelectCharacteristic(event)))}async _onSelectCharacteristic(event){const li=event.currentTarget.closest(".item");this.data.data.selected=li.dataset.key,this.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/char-select.html",data);return new Promise((resolve=>{new CharacSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>data.selected?resolve(data.selected):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class CharacRollDialog extends Dialog{constructor(data,options){super(data,options),this.rolled=data.rolled||{}}activateListeners(html){super.activateListeners(html),html.on("change","input",this._onChangeInput.bind(this)),html.on("submit","form",this._onSubmit.bind(this)),html.on("click",".roll-characteristic",this._onRollCharacteristic.bind(this)),html.on("click",".increase-characteristic",this._onIncreaseCharacteristic.bind(this)),html.on("click",".decrease-characteristic",this._onDecreaseCharacteristic.bind(this)),html.on("click",".reset-characteristic",this._onResetCharacteristic.bind(this)),html.on("click","button",this._onButton.bind(this))}async _onRollCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;await this.rollCharacteristic(characKey)}async _onIncreaseCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.increaseCharacteristic(characKey)}async _onDecreaseCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.decreaseCharacteristic(characKey)}async _onResetCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.resetCharacteristic(characKey)}async _onButton(event){const action=event.currentTarget.dataset.action;if("roll"===action)for(const char of["str","con","siz","dex","app","int","pow","edu","luck"])await this.rollCharacteristic(char);"validate"!==action||event.currentTarget.classList.contains("inactive")||(this.checkTotal(),this.close())}async rollCharacteristic(key){const input=this._element[0].querySelector(`li.item[data-key=${key}]`)?.querySelector("input"),formula=this.data.data.characteristics.rolls[key];if(input&&formula){if(isNaN(Number(formula))){const roll=new Roll(formula);await roll.evaluate({async:!0}),roll.toMessage({flavor:`Rolling characterisitic ${this.data.data.characteristics.list[key].label}: ${formula}`}),input.value=roll.total}else input.value=Number(formula);this.data.data.characteristics.values[key]=Number(input.value),this.rolled||(this.rolled={}),this.rolled[key]=!0}this.checkTotal()}async increaseCharacteristic(key){const input=this._element[0].querySelector(`li.item[data-key=${key}]`)?.querySelector("input");input&&(input.value=Number(input.value)+1,this.data.data.characteristics.values[key]=Number(input.value)),this.checkTotal()}async decreaseCharacteristic(key){const input=this._element[0].querySelector(`li.item[data-key=${key}]`)?.querySelector("input");input&&Number(input.value)>0&&(input.value=Number(input.value)-1,this.data.data.characteristics.values[key]=Number(input.value)),this.checkTotal()}async resetCharacteristic(key){const input=this._element[0].querySelector(`li.item[data-key=${key}]`)?.querySelector("input");input&&(input.value=null,this.data.data.characteristics.values[key]=0),this.checkTotal()}async _onChangeInput(event){event.preventDefault();const input=event.currentTarget,value=Number(input.value);isNaN(value)||(this.data.data.characteristics.values[input.name]=value),this.checkTotal()}checkTotal(){this.data.data.characteristics.points.total=0;for(const[key,value]of Object.entries(this.data.data.characteristics.values))"luck"!==key&&(this.data.data.characteristics.points.total+=value);const validation=this._element[0].querySelector(".points");if(this.data.data.characteristics.points.enabled){if(Number(this.data.data.characteristics.points.total)!==Number(this.data.data.characteristics.points.value))validation.classList.add("warning");else{validation.classList.remove("warning");this._element[0].querySelector("button.validate").classList.remove("inactive"),this.data.data.validate=!0}validation.querySelector(".value").innerText=this.data.data.characteristics.points.value}if(validation.querySelector(".total").innerText=this.data.data.characteristics.points.total,this.data.data.characteristics.rolls.enabled&&this.rolled&&(this.data.data.validate=!Object.entries(this.rolled).find((el=>!el))&&9===Object.entries(this.rolled).length,this.data.data.validate)){this._element[0].querySelector("button.validate").classList.remove("inactive")}}async _onSubmit(event){event.preventDefault()}static async create(data){const rolled={};data.characteristics.points.total=0;for(const[key,value]of Object.entries(data.characteristics.values))"luck"!==key&&(data.characteristics.points.total+=value||0),!isNaN(value)&&value>0&&(rolled[key]=!0);data.characteristics.points.enabled&&Number(data.characteristics.points.total)!==Number(data.characteristics.points.value)&&(data.pointsWarning=!0);const html=await renderTemplate("systems/CoC7/templates/apps/char-roll.html",data);return new Promise((resolve=>{new CharacRollDialog({title:data.title,content:html,data,rolled,buttons:{},close:()=>data.validate?resolve(!0):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class SkillSpecSelectDialog{static async create(skills,specializationName,baseValue=null,name=null){const html=await renderTemplate("systems/CoC7/templates/apps/skill-spec-select.html",{hasSkills:skills.length>0,skills,base:baseValue,name});return new Promise((resolve=>{let formData=null;new Dialog({title:name?game.i18n.format("CoC7.SkillSelectBase",{name}):game.i18n.format("CoC7.SkillSpecSelectTitle",{specialization:specializationName}),content:html,buttons:{validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#skill-select-form")),resolve(formData))}},default:"validate",close:()=>resolve(!1)}).render(!0)}))}}class CoC7MeleeResoltion{constructor(initiatorMessage=null,targetMessage=null,messageId=null){this.initiatorMessage=initiatorMessage,this.targetMessage=targetMessage,this.messageId=messageId}async preCreateMessage(){const html=await renderTemplate(this.template,this),chatData={user:game.user.id,content:html},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;const chatMessage=await ChatMessage.create(chatData);return this.messageId=chatMessage.id,chatMessage}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get target(){return this.targetMessage?CoC7MeleeTarget.getFromMessageId(this.targetMessage):null}get targetToken(){return this.target?chatHelper.getTokenFromKey(this.target.actorKey):null}get initiator(){return this.initiatorMessage?CoC7MeleeInitiator.getFromMessageId(this.initiatorMessage):null}get initiatorToken(){return this.initiator?chatHelper.getTokenFromKey(this.initiator.actorKey):null}async resolve(){if(this.target)switch(this.target.action){case"dodge":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.action="roll-melee-damage",this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.DodgeSuccess",{name:this.target.name}),this.winner=this.target,this.looser=this.initiator,this.winnerImg=this.target.skill.data.img,this.winnerTitle=this.target.skill.name,this.action="dodge",this.rollDamage=!1);break;case"fightBack":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>=this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.target.name}),this.winner=this.target,this.winnerImg=this.target.weapon.img,this.winnerTitle=this.target.weapon.name,this.looser=this.initiator,this.rollDamage=!0);break;case"maneuver":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>=this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.ManeuverSuccess",{name:this.target.name}),this.winner=this.target,this.winnerImg=this.target.skill.data.img,this.winnerTitle=this.target.skill.name,this.looser=this.initiator,this.rollDamage=!1)}else this.initiator.roll.successLevel>0?(this.resultString=`${this.initiator.name} won. Roll damage`,this.winner=this.initiator,this.rollDamage=!0):(this.resultString=`${this.initiator.name} missed.`,this.winner=this.initiator,this.rollDamage=!1);this.winner&&(this.winner.roll.successLevel>=CoC7Check.successLevel.extreme?this.winner.roll.criticalDamage=!0:this.winner.roll.criticalDamage=!1),this.resolved=!0;const html=await renderTemplate(this.template,this);if(this.messageId){const message=game.messages.get(this.messageId),speakerData={};this.winner&&(this.winner.token&&(speakerData.token=this.winner.token.documment),this.winner.actor&&(speakerData.actor=this.winner.actor));const speaker=this.winner?ChatMessage.getSpeaker(speakerData):null,user=this.winner&&this.winner.actor.user?this.winner.actor.user:game.user;let msg;return message?(msg=speaker?await message.update({user:user.id,speaker,content:html}):await message.update({user:user.id,content:html}),await ui.chat.updateMessage(msg,!1),msg):void ui.notifications.warn("Resolition card missing, was deleted ?")}}get template(){return"systems/CoC7/templates/chat/combat/melee-resolution.html"}}class CoC7MeleeTarget extends ChatCardActor{constructor(actorKey,parentMessageId=null,fastForward=!1){super(actorKey,fastForward),this.actorKey=actorKey,this.initiatorKey=null,this.parentMessageId=parentMessageId,this.fastForward=fastForward,this.resolved=!1,this.outnumbered=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.skillId=null,this.itemId=null,this.dodging=!1,this.fightingBack=!1,this.maneuvering=!1}get actionSelected(){return this.dodging||this.fightingBack||this.maneuvering}get action(){return this.dodging?"dodge":this.fightingBack?"fightBack":this.maneuvering?"maneuver":null}get weapon(){return this.actor.items.get(this.itemId)}get skill(){return this.actor.items.get(this.skillId)}set initiatorKey(x){this._initiatorKey=x,this.targetKey=x}get initiatorKey(){return this._initiatorKey||(!this._initiator&&this.parentMessageId&&(this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId)),this._initiator&&(this._initiatorKey=this._initiator.actorKey)),this._initiatorKey?this._initiatorKey:(ui.notifications.error(`No initiator found for target : ${this.actor.name}`),null)}get initiator(){if(!this.initiatorKey){if(!this.parentMessageId)return null;this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId),this.initiatorKey=this._initiator.actorKey}return chatHelper.getActorFromKey(this.initiatorKey)}get meleeInitiator(){return this._initiator||(this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId)),this._initiator}get template(){return"systems/CoC7/templates/chat/combat/melee-target.html"}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.data.content)[0],target=CoC7MeleeTarget.getFromCard(card,messageId);return target.messageId=messageId,target}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".melee.target"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const target=CoC7MeleeTarget.getFromCard(card);target.toggleFlag(flag),target.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;this[flag]=!this[flag]}async createChatCard(){const html=await renderTemplate(this.template,this),speakerData={},token=chatHelper.getTokenFromKey(this.actorKey);token?speakerData.token=token.document:speakerData.actor=this.actor;const speaker=ChatMessage.getSpeaker(speakerData);this.actor.isToken&&(speaker.alias=this.actor.token.name);let user=game.user;if(void 0===this.actor.user){let owners=[];const gms=game.users.filter((a=>a.isGM)).map((a=>a.id));for(const[k,v]of Object.entries(this.actor.data.permission))if(v===CONST.ENTITY_PERMISSIONS.OWNER){if("default"===k){owners=game.users.map((a=>a.id));break}gms.includes(k)||owners.push(k)}let content="";switch(owners.length){case 0:break;case 1:void 0!==game.users.get(owners[0])&&(user=game.users.get(owners[0]));break;default:content="<p>"+game.i18n.localize("CoC7.MessageSelectSingleUserForTarget"),content+='<form id="selectform"><select name="user">',owners.forEach((function(k){content=content+'<option value="'+k+'">'+game.users.get(k).name+"</option>"})),content+="</select></form></p>",await Dialog.prompt({title:game.i18n.localize("CoC7.MessageTitleSelectSingleUserForTarget"),content,callback:html=>{new FormData(html[0].querySelector("#selectform")).forEach((function(value,name){"user"===name&&(user=game.users.get(value))}))}})}}else void 0!==this.actor.user&&(user=this.actor.user);const chatData={user:user.id,speaker,content:html};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;const message=await ChatMessage.create(chatData);return this.messageId=message.id,message}async updateChatCard(){const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}async getUpdatedChatCard(){renderTemplate(this.template,this).then((html=>html))}static async updateSelected(card,event){const target=CoC7MeleeTarget.getFromCard(card);switch(event.currentTarget.dataset.action){case"dodge":target.dodging=!0,target.fightingBack=!1,target.maneuvering=!1,target.skillId=event.currentTarget.dataset.skillId,target.itemId=null;break;case"fightBack":target.dodging=!1,target.fightingBack=!0,target.maneuvering=!1,target.skillId=event.currentTarget.dataset.skillId,target.itemId=event.currentTarget.dataset.weaponId;break;case"maneuver":target.dodging=!1,target.fightingBack=!1,target.maneuvering=!0,target.skillId=event.currentTarget.dataset.skillId,target.itemId=null}return target.updateChatCard(),target}async performSkillCheck(skillId=null,publish=!1){const check=new CoC7Check;return check.isBlind=!1,check.isUnkonwn=!1,check.referenceMessageId=this.messageId,check.rollType="opposed",check.side="target",check.action=this.action,check.actor=this.actor,check.item=this.itemId,check.skill=skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.diceModifier=0,this.disadvantage&&(check.diceModifier-=1),this.advantage&&(check.diceModifier+=1),await check.roll(),this.check=check,this.rolled=!0,this.resolved=!0,publish&&check.toMessage(),check}async publishCheckResult(check=null){if(!check&&!this.check)return null;if(check&&(this.check=check),this.roll=CoC7Roll.getFromCheck(this.check),this.rolled=!0,this.roll.rollIcons=[],this.roll.critical){this.roll.rollColor="goldenrod",this.roll.rollTitle=game.i18n.localize("CoC7.CriticalSuccess");for(let index=0;index<4;index++)this.roll.rollIcons.push("medal")}else if(this.roll.fumble){this.roll.rollColor="darkred",this.roll.rollTitle=game.i18n.localize("CoC7.Fumble");for(let index=0;index<4;index++)this.roll.rollIcons.push("spider")}else if(this.roll.success){this.roll.rollColor="goldenrod",CoC7Check.successLevel.regular===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.RegularSuccess")),CoC7Check.successLevel.hard===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.HardSuccess")),CoC7Check.successLevel.extreme===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.ExtremeSuccess"));for(let index=0;index<this.roll.successLevel;index++)this.roll.rollIcons.push("star")}else this.roll.rollColor="black",this.roll.rollTitle=game.i18n.localize("CoC7.Failure"),this.roll.rollIcons.push("skull");const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id,await this.updateChatCard()}static getFromCard(card,messageId=null){const actorKey=card.dataset.actorKey,parentMessageId=card.dataset.parentMessageId,fastForward="true"===card.dataset.fastForward,target=new CoC7MeleeTarget(actorKey,parentMessageId,fastForward);return target.roll=CoC7Roll.getFromCard(card),chatHelper.getObjectFromElement(target,card),card.closest(".message")?target.messageId=card.closest(".message").dataset.messageId:target.messageId=messageId,target}upgradeRoll(luckAmount,newSuccessLevel,oldCard){this.actor.spendLuck(luckAmount)||ui.notifications.error(`${this.actor.name} didn't have enough luck to pass the check`),this.roll.value=null,this.roll.successLevel=newSuccessLevel,this.roll.luckSpent=!0,oldCard.dataset.processed=!1;const diceRolls=oldCard.querySelector(".dice-roll");diceRolls.dataset.value=null,diceRolls.dataset.successLevel=newSuccessLevel,diceRolls.dataset.luckSpent=!0;const resulDetails=oldCard.querySelector(".result-details"),diceTotal=oldCard.querySelector(".dice-total");switch(newSuccessLevel){case CoC7Check.successLevel.regular:diceTotal.innerText=game.i18n.localize("CoC7.RegularSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:diceTotal.innerText=game.i18n.localize("CoC7.HardSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:diceTotal.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:diceTotal.innerText=game.i18n.localize("CoC7.CriticalSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}diceTotal.classList.replace("failure","success"),oldCard.querySelector(".card-buttons").remove(),oldCard.querySelector(".dice-tooltip").style.display="none",CoC7Chat.updateChatCard(oldCard)}}class CoC7RangeInitiator{constructor(actorKey=null,itemId=null,fastForward=!1){if(this.actorKey=actorKey,this.itemId=itemId,this.fastForward=fastForward,this.resolved=!1,this.cover=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.targetCard=null,this.rolled=!1,this.singleShot=!1,this.multipleShots=!1,this.burst=!1,this.fullAuto=!1,this.tokenKey=null,this.aimed=!1,this.totalBulletsFired=0,this._targets=[],[...game.user.targets].forEach((t=>{const target=new CoC7RangeTarget(`${t.scene.id}.${t.id}`);target.token=t,this._targets.push(target)})),this._targets.length)this._targets[0].active=!0;else{const target=new CoC7RangeTarget;target.active=!0,this._targets.push(target)}if(actorKey){const actor=chatHelper.getActorFromKey(actorKey);if(this.token=chatHelper.getTokenFromKey(actorKey),this.token&&(this.tokenKey=actor.tokenKey),itemId){actor.items.get(itemId)&&(this.weapon.singleShot?this.singleShot=!0:this.weapon.data.data.properties.auto&&(this.fullAuto=!0))}}this.tokenKey&&this._targets.forEach((t=>{if(t.token&&this.token){t.distance=chatHelper.getDistance(t.token,this.token),t.roundedDistance=Math.round(100*t.distance.value)/100,t.distanceUnit=t.distance.unit;const distInYd=Math.round(100*chatHelper.toYards(t.distance))/100;if(this.actor){t.pointBlankRange=!1;distInYd<=this.actor.data.data.characteristics.dex.value/15&&(t.pointBlankRange=!0)}this.weapon&&this.weapon.baseRange&&(t.baseRange=!1,t.longRange=!1,t.extremeRange=!1,t.outOfRange=!1,this.weapon.data.data.properties.shotgun?(distInYd<=this.weapon.baseRange&&(t.baseRange=!0),distInYd>this.weapon.baseRange&&distInYd<=this.weapon.longRange&&(t.longRange=!0),distInYd>this.weapon.longRange&&distInYd<=this.weapon.extremeRange&&(t.extremeRange=!0),distInYd>this.weapon.extremeRange&&(t.outOfRange=!0)):(distInYd<=this.weapon.baseRange&&(t.baseRange=!0),distInYd>this.weapon.baseRange&&distInYd<=2*this.weapon.baseRange&&(t.longRange=!0),distInYd>2*this.weapon.baseRange&&distInYd<=4*this.weapon.baseRange&&(t.extremeRange=!0),distInYd>4*this.weapon.baseRange&&(t.outOfRange=!0)),t.baseRange||t.longRange||t.extremeRange||t.outOfRange||(t.baseRange=!0))}else t.baseRange=!0}))}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}get actor(){return chatHelper.getActorFromKey(this.actorKey)}get item(){return this.actor.items.get(this.itemId)}get weapon(){return this.item}get targets(){return this._targets||(this._targets=[]),this._targets}get target(){return this.targets&&this.targets.length?this.targets.pop():null}get skills(){return this.actor.getWeaponSkills(this.itemId)}get mainWeaponSkill(){return this.actor.items.get(this.weapon.data.data.skill.main.id)}get autoWeaponSkill(){return this.weapon.data.data.skill.alternativ.id?this.actor.items.get(this.weapon.data.data.skill.alternativ.id):this.mainWeaponSkill}get autoFire(){return this.burst||this.fullAuto}get multiTarget(){return this.fullAuto||this.multipleShots}get aiming(){return void 0===this._aiming&&(this._aiming=this.actor.getActorFlag("aiming")),this._aiming}get activeTarget(){return this._targets.length?this._targets.find((t=>t.active)):null}get shots(){return void 0===this._shots&&(this._shots=[]),this._shots}get currentShotRank(){return this.shots.length+1}get activeTargetShotDifficulty(){return this.shotDifficulty()}set aiming(b){this._aiming=b}get didAnyShotHit(){let anyHit=!1;return this.rolls.forEach((r=>{anyHit=anyHit||r.isSuccess})),anyHit}get successfulHits(){const hits=[];for(let index=0;index<this.rolls.length;index++)if(this.rolls[index].isSuccess){const hit={roll:this.rolls[index],shot:this.shots[index]};hits.push(hit)}return 0!==hits.length?hits:null}get shotFired(){return this.shots?this.shots.length:0}get totalAmmo(){return this.weapon.getBulletLeft()}get maxShots(){return this.fullAuto?"∞":this.weapon.data.data.usesPerRound.max?parseInt(this.weapon.data.data.usesPerRound.max):1}get ignoreAmmo(){return game.settings.get("CoC7","disregardAmmo")}get ignoreUsesPerRound(){return game.settings.get("CoC7","disregardUsePerRound")}get outOfAmmo(){return!this.ignoreAmmo&&this.totalBulletsFired>=this.weapon.getBulletLeft()}get outOfShots(){return!this.ignoreUsesPerRound&&(!!this.shots&&this.shots.length>=this.maxShots)}get volleySize(){if(!this.weapon.data.data.properties.auto)return 1;if(this._volleySize)return this._volleySize;const size=Math.floor(this.autoWeaponSkill.value/10);return size<3?3:size}set volleySize(x){x>=Math.floor(this.autoWeaponSkill.value/10)?this._volleySize=Math.floor(this.autoWeaponSkill.value/10):x<=3&&(this._volleySize=3),this._volleySize=parseInt(x)}get isVolleyMinSize(){return 3===this.volleySize}get isVolleyMaxSize(){return(Math.floor(this.autoWeaponSkill.value/10)<3?3:Math.floor(this.autoWeaponSkill.value/10))===this.volleySize}getTargetFromKey(key){return this._targets.find((t=>key===t.actorKey))}calcTargetsDifficulty(){this.targets.forEach((t=>{t.shotDifficulty=this.shotDifficulty(t)}))}shotDifficulty(t=null){const target=t||this.activeTarget;let damage=this.weapon.data.data.range.normal.damage;this.weapon.data.data.properties.shotgun&&(t.longRange&&(damage=this.weapon.data.data.range.long.damage),t.extremeRange&&(damage=this.weapon.data.data.range.extreme.damage));let difficulty,modifier=target.modifier;difficulty=this.weapon.data.data.properties.shotgun?1:target.difficulty;let difficultyName="";if(this.aiming&&1===this.currentShotRank&&modifier++,this.advantage&&modifier++,this.disadvantage&&modifier--,this.reload&&modifier--,this.multipleShots&&!this.fullAuto&&modifier--,this.fullAuto&&(modifier-=this.currentShotRank-1),modifier<-2){difficulty+=Math.abs(modifier+2),difficulty>CoC7Check.difficultyLevel.critical&&(difficulty=CoC7Check.difficultyLevel.impossible),modifier=-2}return CoC7Check.difficultyLevel.regular===difficulty&&(difficultyName="Regular"),CoC7Check.difficultyLevel.hard===difficulty&&(difficultyName="Hard"),CoC7Check.difficultyLevel.extreme===difficulty&&(difficultyName="Extreme"),CoC7Check.difficultyLevel.critical===difficulty&&(difficultyName="Critical"),CoC7Check.difficultyLevel.impossible===difficulty&&(difficultyName="Impossible"),{level:difficulty,name:difficultyName,modifier,damage,impossible:difficulty===CoC7Check.difficultyLevel.impossible}}addShotAtCurrentTarget(){this.calcTargetsDifficulty();const shot={target:this.activeTarget,extremeRange:this.activeTarget.extremeRange,actorKey:this.activeTarget.actorKey,actorName:this.activeTarget.name,difficulty:this.activeTarget.shotDifficulty.level,modifier:this.activeTarget.shotDifficulty.modifier,damage:this.activeTarget.shotDifficulty.damage,bulletsShot:1,transitBullets:0,bulletsShotTransit:1,transit:!1};let bulletLeft=this.totalAmmo-this.totalBulletsFired;if(this.fullAuto){if(this.currentShotRank>1){const previousShot=this.shots[this.currentShotRank-2];if(previousShot.actorKey!==this.activeTarget.actorKey){const distance=chatHelper.getDistance(chatHelper.getTokenFromKey(previousShot.actorKey),chatHelper.getTokenFromKey(this.activeTarget.actorKey));shot.transitBullets=Math.floor(chatHelper.toYards(distance)),shot.transitBullets>=bulletLeft&&!this.ignoreAmmo&&(shot.transitBullets=bulletLeft,bulletLeft=0),this.totalBulletsFired=parseInt(this.totalBulletsFired)+shot.transitBullets,shot.transit=!0}}shot.bulletsShot=this.volleySize,shot.bulletsShot<=3&&(shot.bulletsShot=3),shot.bulletsShot>=bulletLeft&&!this.ignoreAmmo&&(shot.bulletsShot=bulletLeft,bulletLeft=0),shot.bulletsShotTransit=shot.bulletsShot+shot.transitBullets}this.burst&&(shot.bulletsShot=parseInt(this.weapon.data.data.usesPerRound.burst)?parseInt(this.weapon.data.data.usesPerRound.burst):1,shot.bulletsShot>=bulletLeft&&!this.ignoreAmmo&&(shot.bulletsShot=bulletLeft,bulletLeft=0)),this.totalBulletsFired=parseInt(this.totalBulletsFired)+shot.bulletsShot,this.aiming&&(this.aiming=!1,this.aimed=!0),this.shots.push(shot)}get template(){return"systems/CoC7/templates/chat/combat/range-initiator.html"}async createChatCard(){this.calcTargetsDifficulty();const html=await renderTemplate(this.template,this),speakerData={},token=chatHelper.getTokenFromKey(this.actorKey);token?speakerData.token=token.document:speakerData.actor=this.actor;const speaker=ChatMessage.getSpeaker(speakerData),chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,content:html},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;return await ChatMessage.create(chatData)}async updateChatCard(){this.calcTargetsDifficulty();const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;"singleShot"===flag||"multipleShots"===flag||"fullAuto"===flag?(this.singleShot=!1,this.multipleShots=!1,this.fullAuto=!1,"fullAuto"===flag&&(this.burst=!1),this[flag]=!0):"burst"===flag?(this.fullAuto=!1,this.singleShot||this.multipleShots||(this.singleShot=!0),this.burst=!this.burst):this[flag]=!this[flag]}async resolveCard(){if(this.rolls=[],this.multiTarget){let weaponMalfunction=!1,index=0;for(;!weaponMalfunction&&this.shots.length>index;){const roll=await this.shootAtTarget(this.shots[index]);roll.dice?.roll&&await CoC7Dice.showRollDice3d(roll.dice.roll),await this.weapon.shootBullets(parseInt(this.shots[index].bulletsShot)+parseInt(this.shots[index].transitBullets)),roll.hasMalfunction&&(roll.isSuccess=!1,weaponMalfunction=!0),index++,this.rolls.push(roll)}}else{const roll=await this.shootAtTarget();roll.dice?.roll&&await CoC7Dice.showRollDice3d(roll.dice.roll);let bulletFired=this.burst?parseInt(this.weapon.data.data.usesPerRound.burst):1;bulletFired>=this.totalAmmo&&(bulletFired=this.totalAmmo);const shot={target:this.activeTarget,extremeRange:this.activeTarget.extremeRange,actorKey:this.activeTarget.actorKey,actorName:this.activeTarget.name,difficulty:this.activeTarget.shotDifficulty.level,modifier:this.activeTarget.shotDifficulty.modifier,damage:this.activeTarget.shotDifficulty.damage,bulletsShot:bulletFired,transitBullets:0,transit:!1};await this.weapon.shootBullets(bulletFired),roll.hasMalfunction&&(roll.isSuccess=!1),this.shots.push(shot),this.rolls.push(roll)}this.resolved=!0,this.rolled=!0,await this.updateChatCard()}async shootAtTarget(shot=null){const target=shot?this.getTargetFromKey(shot.actorKey):this.activeTarget,check=new CoC7Check;return check.actorKey=this.actorKey,check.actor=this.actorKey,check.item=this.itemId,check.isBlind=!1,check.isUnkonwn=!1,this.autoFire?check.skill=this.autoWeaponSkill:check.skill=this.mainWeaponSkill,this.multiTarget?(check.difficulty=shot.difficulty,check.diceModifier=shot.modifier):(this.calcTargetsDifficulty(),this.totalBulletsFired=parseInt(this.totalBulletsFired)+1,this.aiming&&(this.aiming=!1,this.aimed=!0),check.difficulty=this.activeTarget.shotDifficulty.level,check.diceModifier=this.activeTarget.shotDifficulty.modifier),check.details=`${game.i18n.localize("CoC7.Target")}: ${target.name}`,check.targetKey=target.actorKey,await check.roll(),check}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.data.content)[0],initiator=CoC7RangeInitiator.getFromCard(card,messageId);return initiator.messageId=messageId,initiator}changeVolleySize(x){this.volleySize=this.volleySize+x,this.updateChatCard()}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".range.initiator"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const initiator=CoC7RangeInitiator.getFromCard(card);if(event.currentTarget.classList.contains("target-flag")){const target=event.currentTarget.closest(".target"),key=parseInt(target.dataset.targetKey);initiator.targets[key].toggleFlag(camelFlag)}else initiator.toggleFlag(camelFlag);initiator.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}passRoll(rollIndex){const roll=this.rolls[rollIndex],luckAmount=parseInt(roll.luckNeeded);this.actor.spendLuck(luckAmount)?(roll.successLevel=roll.difficulty,roll.isSuccess=!0,roll.luckSpent=!0,this.updateChatCard()):ui.notifications.error(`${this.actor.name} does not have enough luck to pass the check`)}upgradeRoll(rollIndex,upgradeindex){const roll=this.rolls[rollIndex],increasedSuccess=roll.increaseSuccess[upgradeindex],luckAmount=parseInt(increasedSuccess.luckAmount);if(!this.actor.spendLuck(luckAmount))return void ui.notifications.error(`${this.actor.name} does not have enough luck to pass the check`);const newSuccessLevel=parseInt(increasedSuccess.newSuccessLevel);roll.successLevel=newSuccessLevel,roll.difficulty<=newSuccessLevel&&(roll.isSuccess=!0),roll.luckSpent=!0,this.updateChatCard()}static getFromCard(card,messageId=null){const rangeInitiator=new CoC7RangeInitiator;rangeInitiator._targets=[],messageId?rangeInitiator.messageId=messageId:card.closest(".message")&&(rangeInitiator.messageId=card.closest(".message").dataset.messageId),chatHelper.getObjectFromElement(rangeInitiator,card);card.querySelectorAll(".target").forEach((t=>{const target=CoC7RangeTarget.getFromElement(t);rangeInitiator.targets.push(target)}));const cardShots=card.querySelectorAll(".shot");cardShots&&cardShots.forEach((s=>{const shot={};chatHelper.getObjectFromElement(shot,s),rangeInitiator.shots.push(shot)})),rangeInitiator.rolls=[];card.querySelectorAll(".roll-result").forEach((r=>{const roll=CoC7Roll.getFromElement(r);rangeInitiator.rolls.push(roll)})),rangeInitiator.damage=[];return card.querySelectorAll(".damage-results").forEach((dr=>{const damageRoll=CoC7Damage.getFromElement(dr);rangeInitiator.damage.push(damageRoll)})),rangeInitiator}async rollDamage(){this.damage=[];const hits=this.successfulHits;for(let i=0;i<hits.length;i++){const h=hits[i],volleySize=parseInt(h.shot.bulletsShot),damageRolls=[],damageFormula=h.shot.damage,damageDie=CoC7Damage.getMainDie(damageFormula),maxDamage=new Roll(damageFormula).evaluate({maximize:!0}).total,criticalDamageFormula=this.weapon.impale?`${damageFormula} + ${maxDamage}`:`${maxDamage}`,criticalDamageDie=CoC7Damage.getMainDie(criticalDamageFormula);let impalingShots=0,successfulShots=0,critical=!1;(this.fullAuto||this.burst)&&(successfulShots=Math.floor(volleySize/2)),0===successfulShots&&(successfulShots=1),h.roll.successLevel>=CoC7Check.difficultyLevel.extreme&&(impalingShots=successfulShots,successfulShots=volleySize-impalingShots,critical=!0,CoC7Check.difficultyLevel.critical!==h.roll.successLevel&&(CoC7Check.difficultyLevel.extreme<=h.roll.difficulty||h.shot.extremeRange)&&(successfulShots=volleySize,impalingShots=0,critical=!1));let total=0;for(let index=0;index<successfulShots;index++){const roll=new Roll(damageFormula);await roll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(roll),damageRolls.push({formula:damageFormula,total:roll.total,die:damageDie,critical:!1}),total+=roll.total}for(let index=0;index<impalingShots;index++){const roll=new Roll(criticalDamageFormula);await roll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(roll),damageRolls.push({formula:criticalDamageFormula,total:roll.total,die:criticalDamageDie,critical:!0}),total+=roll.total}let targetName="dummy",target=chatHelper.getTokenFromKey(h.roll.targetKey);target||(target=chatHelper.getActorFromKey(h.roll.targetKey)),target&&(targetName=target.name),this.damage.push({targetKey:h.roll.targetKey,targetName,rolls:damageRolls,total,critical,dealt:!1,resultString:game.i18n.format("CoC7.rangeCombatDamage",{name:targetName,total})})}this.damageRolled=0!==this.damage.length,this.updateChatCard()}async dealDamage(){for(let dIndex=0;dIndex<this.damage.length;dIndex++){const actor=chatHelper.getActorFromKey(this.damage[dIndex].targetKey);if(null===actor)ui.notifications.error(game.i18n.localize("CoC7.NoTargetToDamage"));else{this.damage[dIndex].totalTaken=0,this.damage[dIndex].totalAbsorbed=0;for(let rIndex=0;rIndex<this.damage[dIndex].rolls.length;rIndex++){const dealtAmount=await actor.dealDamage(this.damage[dIndex].rolls[rIndex].total);this.damage[dIndex].totalTaken+=dealtAmount,this.damage[dIndex].rolls[rIndex].taken=dealtAmount,this.damage[dIndex].rolls[rIndex].absorbed=this.damage[dIndex].rolls[rIndex].total-dealtAmount,this.damage[dIndex].totalAbsorbed+=this.damage[dIndex].rolls[rIndex].total-dealtAmount}this.damage[dIndex].dealt=!0,this.damage[dIndex].resultString=game.i18n.format("CoC7.rangeCombatDamageArmor",{name:this.damage[dIndex].targetName,total:this.damage[dIndex].totalTaken,armor:this.damage[dIndex].totalAbsorbed})}}this.damageDealt=!0,this.updateChatCard()}}class CoC7RangeTarget{constructor(actorKey=null){this.actorKey=actorKey,this.cover=!1,this.pointBlankRange=!1,this.baseRange=!0,this.longRange=!1,this.extremeRange=!1,this.inMelee=!1}get big(){return void 0===this._big&&(this.actor&&this.actor.build?this._big=this.actor.build>=4:this._big=!1),this._big}set big(b){this._big=b}get small(){return void 0===this._small&&(this.actor&&this.actor.build?this._small=this.actor.build<=-2:this._small=!1),this._small}set small(b){this._small=b}get normal(){return!this.big&&!this.small}set normal(b){this._big=!1,this._small=!1}get isFast(){return!(!this.actor||!this.actor.mov)&&this.actor.mov>=8}get fast(){return void 0===this._fast&&(this._fast=!1),this._fast}set fast(b){this._fast=b}get actor(){return this.actorKey&&!this._actor&&(this._actor=chatHelper.getActorFromKey(this.actorKey)),this._actor}get name(){return this.token?this.token.name:this.actor?this.actor.name:"Dummy"}get img(){return this.token?this.token.data.img:this.actor?this.actor.data.img:"../icons/svg/mystery-man-black.svg"}get token(){return!this._token&&this.actorKey&&(this._token=chatHelper.getTokenFromKey(this.actorKey)),this._token}get sizeText(){return this.big?game.i18n.localize("CoC7.rangeCombatCard.BigTargetTitle"):this.small?game.i18n.localize("CoC7.rangeCombatCard.SmallTargetTitle"):game.i18n.localize("CoC7.rangeCombatCard.NormalTargetTitle")}get sizeLabel(){return this.big?game.i18n.localize("CoC7.rangeCombatCard.BigTarget"):this.small?game.i18n.localize("CoC7.combatCard.SmallTarget"):game.i18n.localize("CoC7.rangeCombatCard.NormalTarget")}get difficulty(){return this.baseRange||this.pointBlankRange?CoC7Check.difficultyLevel.regular:this.longRange?CoC7Check.difficultyLevel.hard:this.extremeRange?CoC7Check.difficultyLevel.extreme:CoC7Check.difficultyLevel.impossible}get modifier(){let modifier=0;return this.cover&&modifier--,this.pointBlankRange&&modifier++,this.fast&&modifier--,this.small&&modifier--,this.big&&modifier++,this.inMelee&&modifier--,this.surprised&&modifier++,modifier}set token(t){this._token=t}static getFromElement(element){const target=new CoC7RangeTarget;return chatHelper.getObjectFromElement(target,element),target}static changeDisplayedTarget(event){if(!event.currentTarget.classList.contains("target-selector"))return null;return event.currentTarget.closest(".targets").querySelectorAll(".target")}attachToElement(element){chatHelper.attachObjectToElement(this,element)}toggleFlag(flag){"baseRange"===flag||"longRange"===flag||"extremeRange"===flag||"pointBlankRange"===flag?(this.pointBlankRange=!1,this.baseRange=!1,this.longRange=!1,this.extremeRange=!1,this.outOfRange=!1,this[flag]=!0):"size"===flag?this.small?(this.small=!1,this.big=!0):this.big?(this.small=!1,this.big=!1):this.small=!0:this[flag]=!this[flag],"fast"===flag&&this.fast&&!this.isFast&&ui.notifications.warn(game.i18n.format("CoC7.WarnFastTargetWithWrongMOV",{mov:this.actor.mov}))}}class InteractiveChatCard{constructor(options={}){this._options=options}get options(){return mergeObject(this.constructor.defaultOptions,this._options)}get template(){return this.options.template}get cssClasses(){return this.options.classes}async toMessage(optionnalChatData={}){const html=await renderTemplate(this.template,this),htmlCardElement=$(html)[0];htmlCardElement.dataset.object=escape(this.dataString),htmlCardElement.dataset.cardClass=this.constructor.name,htmlCardElement.classList.add(...this.cssClasses);const chatData=mergeObject({user:game.user.id,flavor:game.i18n.localize(this.options.title),content:htmlCardElement.outerHTML},optionnalChatData);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard(options={}){if(options.compute&&this.compute(),this.messageId){const html=await renderTemplate(this.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(this.dataString),htmlCardElement.dataset.cardClass=this.constructor.name,htmlCardElement.classList.add(...this.cssClasses);const chatMessage=game.messages.get(this.messageId);this.closed&&await chatMessage.setFlag("CoC7","state","resolved");const msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}this.toMessage()}activateListeners(html){html.on("click",".interactive-card .ic-radio-switch",this._onToggle.bind(this)),html.on("click",".interactive-card .ic-switch",this._onToggle.bind(this)),html.on("click",".interactive-card .submit",this._onSubmit.bind(this)),html.on("focusout","input",this._onSubmit.bind(this)),html.on("click",".interactive-card button",this._onButton.bind(this)),html.on("keydown","form",this._onKey.bind(this))}static async bindListeners(html){const htmlCardElement=html[0].querySelector(".chat-card");if(!htmlCardElement)return;if(!Object.getOwnPropertyNames(game.CoC7.cards).includes(htmlCardElement.dataset.cardClass))return;const card=await InteractiveChatCard.fromHTMLCardElement(htmlCardElement),typedCard=Object.assign(new game.CoC7.cards[htmlCardElement.dataset.cardClass],card);typedCard.assignObject(),typedCard.activateListeners(html)}assignObject(){}_onButton(event){const action=event.currentTarget.dataset.action;this[action]&&this[action]({event,update:!0})}_onKey(event){return"Enter"===event.key&&this._onSubmit(event),"Enter"!==event.key}_onSubmit(event){event.preventDefault();const card=event.currentTarget.closest(".interactive-card");if(!card)return;this._update(card)&&this.updateChatCard()}_update(card){const forms=card.querySelectorAll("form");let updates=!1;for(let i=0;i<forms.length;i++){const form=forms[i];let data=new FormDataExtended(form).toObject();data=diffObject(this,expandObject(data));for(const[key,value]of Object.entries(data))this[key]=value,updates=!0}return updates}get message(){return this._message?this._message:this._messageId?game.message.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultOptions(){return{classes:["interactive-card"],exclude:["_actor","_skill","_item","_message","_htmlRoll"],excludeStartWith:"__"}}get data(){return JSON.parse(this.dataString)}get dataString(){return JSON.stringify(this,((key,value)=>{if(null!==value&&!this.options.exclude?.includes(key)&&!key.startsWith(this.options.excludeStartWith))return value}))}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.data.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(card){const cardData=JSON.parse(unescape(card.dataset.object));if(!cardData.messageId){const message=card.closest(".message");cardData.messageId=message?.dataset?.messageId}return await this.fromData(cardData)}static async fromData(data){const card=Object.assign(new this,data);return await card.assignObject(),card}setFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!0)}unsetFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!1)}toggleFlag(flagName){this[flagName]=!this[flagName]}async _onToggle(event){event.preventDefault();const target=event.currentTarget;if("action"in target.dataset)return this._onButton(event);if(target&&target.classList.contains("gm-select-only")&&!game.user.isGM)return;const flag=target.dataset.flag;if(!flag)return;const toggle=target.closest(".ic-radio");if(toggle){toggle.querySelectorAll(".ic-radio-switch").forEach((b=>this.unsetFlag(b.dataset.flag))),this.setFlag(flag)}else this.toggleFlag(flag);const card=target.closest(".interactive-card");card&&this._update(card),this.updateChatCard()}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get isBlind(){return this.rollMode?(void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind):null}set isBlind(x){this._isBlind=x}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}get item(){return this.itemId?this.actor.items.get(this.itemId):null}get weapon(){return this.item}get targetedTokens(){return[...game.user.targets]}get target(){return this.targetToken?this.targetToken:this.targetActor}get isTargetOwner(){return this.target.isOwner}get isGM(){return game.user.isGM}get targetToken(){return this._targetToken||(this._targetKey?this._targetToken=chatHelper.getTokenFromKey(this._targetKey):(this._targetToken=this.targetedTokens.pop(),this._targetToken?this._targetKey=`${this._targetToken.scene.id}.${this._targetToken.id}`:this._targetToken=null)),this._targetToken}get targetActor(){return this._targetActor||(this.targetToken?this._targetActor=this.targetToken.actor||this.targetToken.data.actor||this.targetToken.data.document:this._targetActor=chatHelper.getActorFromKey(this._targetKey)),this._targetActor}get targetKey(){return this.targetToken||this.targetActor?this._targetKey:null}get hasTarget(){return!(!this.targetToken&&!this.targetActor)}set targetKey(x){this._targetKey=x}get skills(){return this.actor.getWeaponSkills(this.itemId)}get targetImg(){const img=chatHelper.getActorImgFromKey(this.targetKey);return img||"../icons/svg/mystery-man-black.svg"}get name(){return this.token?this.token.name:this.actor.name}get targetName(){return this.target?this.target.name:"dummy"}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}}class DamageCard extends InteractiveChatCard{static get defaultOptions(){return mergeObject(super.defaultOptions,{exclude:["_targetToken","_targetActor","_htmlRoll","_htmlInlineRoll"].concat(super.defaultOptions.exclude),template:"systems/CoC7/templates/chat/cards/damage.html"})}activateListeners(html){super.activateListeners(html)}async assignObject(){this.damageRoll&&"Object"===this.damageRoll.constructor.name&&(this.damageRoll=Roll.fromData(this.damageRoll))}_onButton(event){super._onButton(event)}get critical(){return this.options.critical}set critical(x){this._options.critical=x}get impale(){return"undefined"===this._impale?this.weapon.impale:this._impale}set impale(x){this._impale=x}get isDamageFormula(){return"string"==typeof this.damageFormula&&(!!isNaN(Number(this.damageFormula))&&Roll.validate(this.damageFormula))}get isDamageNumber(){return!isNaN(Number(this.damageFormula))}get isArmorForula(){return"string"==typeof this.armor&&(!!isNaN(Number(this.armor))&&Roll.validate(this.armor))}get totalDamageString(){let damage=Number(this.isDamageNumber?this.damageFormula:this.roll.total);return!this.ignoreArmor&&((isNaN(Number(this.armor))||Number(this.armor)>0)&&(damage-=Number(this.armor)),!isNaN(Number(this.armor))&&damage<=0)?game.i18n.localize("CoC7.ArmorAbsorbsDamage"):damage}get noDamage(){if(this.rolled){const damage=this.isDamageNumber?this.damageFormula:this.roll.total;return this.ignoreArmor?!!(damage<=0):!isNaN(Number(this.armor))&&!!(damage-Number(this.armor)<=0)}return!1}async updateChatCard(){if(!this.options.fastForward||this.roll||this.isDamageNumber||await this.rollDamage({update:!1}),this.isDamageNumber||this.roll&&null!=this.roll.total||this.hardrolled?this.rolled=!0:this.rolled=!1,!this.options.fastForward||this.damageInflicted||this.noDamage||await this.dealDamage({update:!1}),this.rolled&&this.roll){"Object"===this.roll.constructor.name&&(this.roll=Roll.fromData(this.roll));const a=createInlineRoll(this.roll);this._htmlInlineRoll=a.outerHTML,this._htmlRoll=await this.roll.render()}await super.updateChatCard()}async rollDamage(options={update:!0}){this.roll=await new Roll(this.damageFormula||"0").evaluate({async:!0}),await CoC7Dice.showRollDice3d(this.roll),this.hardrolled=!0,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}async rollArmor(options={update:!0}){const roll=await new Roll(this.armor).evaluate({async:!0});this.armor=roll.total,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}async dealDamageToSelectedTarget(options={update:!0}){if(this.isArmorForula&&await this.rollArmor(),isNaN(Number(this.totalDamageString)))return void ui.notifications.error("Error evaluating damage");const targets=[],targetName=[],selectedPlayers=canvas.tokens.controlled.map((token=>token.actor));for(let index=0;index<selectedPlayers.length;index++)this.actor.id!==selectedPlayers[index].id&&(targetName.push(selectedPlayers[index].name),targets.push(selectedPlayers[index]));const data={title:" ",content:game.i18n.format("CoC7.DealDamage",{damage:this.totalDamageString,target:targetName}),buttons:{one:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>{this.confirmDamage(targets)}},two:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>{}}},default:"two"};targetName.length>0&&new Dialog(data).render(!0)}async confirmDamage(targets){for(let index=0;index<targets.length;index++)await targets[index].dealDamage(Number(this.totalDamageString),{ignoreArmor:!1}),ChatMessage.create({content:`Damage ${targets[index].name} ${this.totalDamageString}HP`})}async dealDamage(options={update:!0}){this.isArmorForula&&await this.rollArmor();let damage=this.totalDamageString;if(isNaN(Number(damage))){if(game.i18n.localize("CoC7.ArmorAbsorbsDamage")!==damage)return void ui.notifications.error("Error evaluating damage");damage=0}this.targetActor&&await this.targetActor.dealDamage(Number(damage),{ignoreArmor:!0}),this.damageInflicted=!0,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}get range(){return this.options.range||"normal"}set range(x){["normal","long","extreme"].inclues(x.toLowerCase())&&(this._options.range=x)}get damageFormula(){const range=this.range;let formula=this.weapon?.data?.data?.range[range]?.damage,db=this.actor.db;if(db=null===db?"":`${db}`,db&&!db.startsWith("-")&&(db="+"+db),this.weapon.data.data.properties.addb&&(formula+=db),this.weapon.data.data.properties.ahdb&&(formula=formula+db+"/2"),formula){const maxDamage=new Roll(formula).evaluate({maximize:!0}).total;let rollString;return this.critical?this.impale?(rollString=formula+"+"+maxDamage,rollString):maxDamage:formula}}get armor(){return void 0!==this._armor&&""!==this._armor?this._armor:this.target?this.targetActor.data.data.attribs.armor.value:0}set armor(x){this._armor=x}}class RollCard{constructor(){this.rolls=[]}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.data.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(card){const cardData=JSON.parse(unescape(card.dataset.object));return await this.fromData(cardData)}static async fromData(data){const card=Object.assign(new this,data);for(let index=0;index<card.rolls.length;index++)"Object"===card.rolls[index]?.constructor?.name&&(card.rolls[index]=Object.assign(new CoC7Check,card.rolls[index]),card.rolls[index].rolled&&(card.rolls[index]._htmlRoll=await card.rolls[index].getHtmlRoll()));return card}static async _onToggle(event){event.preventDefault();const span=event.currentTarget;if(span&&span.classList.contains("gm-select-only")&&!game.user.isGM)return;const message=span.closest(".chat-message"),card=await this.fromMessageId(message.dataset.messageId);if(!card)return;const flag=span.dataset.flag;if(!flag)return;const toggle=span.closest(".toggle");if(toggle){toggle.querySelectorAll(".toggle-switch").forEach((b=>card.unsetFlag(b.dataset.flag))),card.setFlag(flag)}else card.toggleFlag(flag);card.updateChatCard()}static async dispatch(data){if(game.user.isGM){let card,messages=ui.chat.collection.filter((message=>this.defaultConfig.type===message.getFlag("CoC7","type")&&"resolved"!==message.getFlag("CoC7","state")));if(messages.length){const timestamp=new Date(messages[0].data.timestamp);86400<(new Date-timestamp)/1e3&&(await messages[0].setFlag("CoC7","state","resolved"),messages=[])}card=messages.length?await this.fromMessage(messages[0]):new this,await card.process(data)}else game.socket.emit("system.CoC7",data)}async toMessage(){const html=await renderTemplate(this.config.template,this),htmlCardElement=$(html);htmlCardElement[0].dataset.object=escape(this.dataString);const chatData={user:game.user.id,flavor:game.i18n.localize(this.config.title),content:htmlCardElement[0].outerHTML,flags:{CoC7:{type:this.config.type,state:"initiated"}}};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0);return await ChatMessage.create(chatData)}async updateChatCard(){if(await this.compute(),this.messageId){const html=await renderTemplate(this.config.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(this.dataString);const chatMessage=game.messages.get(this.messageId);this.closed&&await chatMessage.setFlag("CoC7","state","resolved");const msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}await this.toMessage()}updateRoll(data){data.fromGM||Object.assign(this.rolls[data.rank],data.roll)}addRollData(data){const check=Object.assign(new CoC7Check,data.roll);this.rolls.push(check)}addRoll(data){this.rolls.push(data)}removeRoll(rank){this.rolls.splice(rank,1)}setFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!0)}unsetFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!1)}toggleFlag(flagName){this[flagName]=!this[flagName]}get message(){return this._message?this._message:this._messageId?game.message.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultConfig(){return{exclude:["_actor","_skill","_item","_message","_htmlRoll"],excludeStartWith:"__"}}get winners(){return this.rolls.filter((r=>r.winner))}get winner(){if(this.winners.length)return this.winners[0]}get loosers(){return this.rolls.filter((r=>!r.winner))}get looser(){if(this.loosers.length)return this.loosers[0]}get hasWinner(){return this.winners.length>0}get isGM(){return game.user.isGM}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}get data(){return JSON.parse(this.dataString)}get dataString(){return JSON.stringify(this,((key,value)=>{if(null!==value&&!this.config.exclude?.includes(key)&&!key.startsWith(this.config.excludeStartWith))return value}))}}class OpposedCheckCard extends RollCard{static async bindListerners(html){html.on("click",".roll-card.opposed .toggle-switch",this._onToggle.bind(this)),html.on("click",".roll-card.opposed a",OpposedCheckCard._onClick.bind(this)),html.on("click",".roll-card.opposed button",OpposedCheckCard._onClick.bind(this))}static get defaultConfig(){return mergeObject(super.defaultConfig,{template:"systems/CoC7/templates/chat/cards/opposed-roll.html",type:"opposedCard"})}get config(){return OpposedCheckCard.defaultConfig}get attackerRoll(){if(this.combat){if(this.rolls?.length){const attacker=this.rolls.filter((r=>0===r.index||r.attacker));if(attacker.length)return attacker[0]}}else;}get defenderRoll(){if(this.combat){if(this.rolls?.length){const defender=this.rolls.filter((r=>0!==r.index||!r.attacker));if(defender.length)return defender[0]}}else;}get defenderIsDodging(){return!(!this.defenderRoll?.actor?.dodgeSkill?.name||!this.defenderRoll?.skill?.name)&&this.defenderRoll.actor.dodgeSkill.name.toLowerCase()===this.defenderRoll.skill.name.toLowerCase()}get advantageAttacker(){return void 0===this._aa?!!this.defenderRoll&&!this.defenderIsDodging:this._aa}get winnerRollsDamage(){return!!(this.combat&&this.rolls.length>=2&&this.hasWinner&&"weapon"===this.winner?.item?.type)}set advantageAttacker(x){this._aa=!0,this._ad=!1}get advantageDefender(){return void 0===this._ad?this.defenderIsDodging:this._ad}set advantageDefender(x){this._ad=!0,this._aa=!1}get isTie(){return this.winnerCount>1}get needsTieBreaker(){return!!this.combat&&!(!this.attackerRoll||!this.defenderRoll||this.attackerRoll.successLevel!==this.defenderRoll.successLevel)}get winnerCount(){let count=0;return this.rolls.forEach((r=>{r.winner&&(count+=1)})),count}get isAttackManeuver(){return!(!this.combat||!this.attackerRoll||this.attackerRoll?.item&&!this.attackerRoll?.item.data.data.properties?.mnvr)}get resultText(){if(this.combat&&this.attackerRoll&&this.defenderRoll){if(!this.attackerRoll.winner&&!this.defenderRoll.winner)return game.i18n.localize("CoC7.NoWinner");if(this.attackerRoll.winner)return this.attackerRoll.maneuver?game.i18n.format("CoC7.ManeuverSuccess",{name:this.attackerRoll.actor.name}):game.i18n.format("CoC7.AttackSuccess",{name:this.attackerRoll.actor.name});if(this.defenderRoll.winner)return this.defenderRoll.maneuver?game.i18n.format("CoC7.ManeuverSuccess",{name:this.defenderRoll.actor.name}):this.defenderIsDodging?game.i18n.format("CoC7.DodgeSuccess",{name:this.defenderRoll.actor.name}):game.i18n.format("CoC7.AttackSuccess",{name:this.defenderRoll.actor.name})}}async process(data){switch(data.action){case"new":this.rolls?.length||(this.combat=data.combat||void 0,this.combat&&(data.roll.attacker=!0)),data.roll.index=this.rolls.length,this.addRollData(data);break;case"roll":this.addRollData(data);break;case"updateRoll":this.updateRoll(data)}game.user.isGM?await this.updateChatCard():game.socket.emit("system.CoC7",data)}async roll(rank){await this.rolls[rank]._perform();const data={type:this.config.type,action:"updateRoll",rank,fromGM:game.user.isGM};return game.user.isGM||(data.roll=this.rolls[rank].JSONRollData),data}static async _onClick(event){event.preventDefault();const a=event.currentTarget,action=a.dataset.action,li=a.closest("li.actor-roll"),message=a.closest(".chat-message"),cardElement=a.closest("div.roll-card"),card=await OpposedCheckCard.fromHTMLCardElement(cardElement);card.messageId=message.dataset.messageId;const rank=Number(li?.dataset?.rank);switch(action){case"toggle-combat":card.combat=!card.combat,await card.updateChatCard();break;case"remove-roll":card.removeRoll(rank),await card.updateChatCard();break;case"close-card":card.closeCard(),await card.updateChatCard();break;case"roll-check":{const speaker=ChatMessage.getSpeaker();card.rolls[rank].actorKey||(card.rolls[rank].actorKey=`${speaker.scene}.${speaker.token}`);const data=await card.roll(rank);await card.process(data);break}case"roll-damage":{card.closeCard(),await card.updateChatCard();const damageChatCard=new DamageCard({critical:card.winner.isExtremeSuccess,fastForward:event.shiftKey});damageChatCard.actorKey=card.winner.actor.actorKey,damageChatCard.targetKey=card.looser.actor.actorKey,damageChatCard.itemId=card.winner.itemId,damageChatCard.updateChatCard();break}default:{const options={update:!1,data:a.dataset,classes:a.classList,target:a};await CoC7Check.alter(card.rolls[rank],action,options);const data={type:this.defaultConfig.type,action:"updateRoll",rank,fromGM:game.user.isGM};game.user.isGM||(data.roll=card.rolls[rank].JSONRollData),card.process(data);break}}}async compute(rank){if(rank)this.rolls[rank].rolled&&(this.rolls[rank]._htmlRoll=await this.rolls[rank].getHtmlRoll({hideDiceResult:!0}));else for(let i=0;i<this.rolls.length;i++)delete this.rolls[i].maneuver,this.combat&&(!this.rolls[i].item||this.rolls[i].item.data.data.properties?.mnvr)&&(this.rolls[i]?.actor?.dodgeSkill?.name&&this.rolls[i]?.skill?.name&&this.rolls[i].actor.dodgeSkill.name.toLowerCase()!==this.rolls[i].skill.name.toLowerCase()||!this.rolls[i]?.actor?.dodgeSkill?.name)&&(this.rolls[i].maneuver=!0),this.rolls[i].rolled&&(this.rolls[i]._htmlRoll=await this.rolls[i].getHtmlRoll({hideDiceResult:!0}));if(this.rolls=this.rolls.filter((roll=>void 0!==roll.actor.data)),this.combat)this.rolls.sort(((a,b)=>a.index>b.index?1:a.index<b.index?-1:0)),this.rolls.length>1&&(this.rolls=[this.rolls[0],this.rolls[1]],this.rolls.forEach((r=>{delete r.winner,delete r.tie}))),this.rolls[0]&&(this.rolls[0].attacker=!0),this.rolls[0]?.rolled&&this.rolls[1]?.rolled&&(this.rolls[0].passed||this.rolls[1].passed)&&(this.rolls[0].successLevel>this.rolls[1].successLevel?this.rolls[0].winner=!0:this.rolls[1].successLevel>this.rolls[0].successLevel?this.rolls[1].winner=!0:this.advantageAttacker?this.rolls[0].winner=!0:this.rolls[1].winner=!0);else{if(this.rolls.sort(((a,b)=>{if(a.rolled&&!b.rolled)return-1;if(!a.rolled&&b.rolled)return 1;if(!a.rolled&&!b.rolled)return 0;if(a.successLevel>b.successLevel)return this.resolved=!0,-1;if(a.successLevel<b.successLevel)return this.resolved=!0,1;if(game.settings.get("CoC7","opposedRollTieBreaker")){if(a.modifiedResult>b.modifiedResult)return this.resolved=!0,-1;if(a.modifiedResult<b.modifiedResult)return this.resolved=!0,1}else{if(a.rawValue>b.rawValue)return this.resolved=!0,-1;if(a.rawValue<b.rawValue)return this.resolved=!0,1}return 0})),this.winCount=0,this.rolls[0]&&this.rolls[0].rolled&&!this.rolls[0].failed){this.winCount=1;for(let i=1;i<this.rolls.length;i++)this.rolls[i]&&this.rolls[i].rolled&&this.rolls[0].successLevel===this.rolls[i].successLevel&&(game.settings.get("CoC7","opposedRollTieBreaker")?this.rolls[0].modifiedResult===this.rolls[i].modifiedResult:this.rolls[0].rawValue===this.rolls[i].rawValue)&&(this.winCount=this.winCount+1)}for(let i=0;i<this.rolls.length;i++)this.rolls[i].winner=i<this.winCount,this.rolls[i].tie=this.rolls[i].winner&&this.winCount>1}}closeCard(){this.closed=!0}}class CombinedCheckCard extends RollCard{static async bindListerners(html){html.on("click",".roll-card.combined .toggle-switch",this._onToggle.bind(this)),html.on("click",".roll-card.combined a",CombinedCheckCard._onClick.bind(this)),html.on("click",".roll-card.combined button",CombinedCheckCard._onClick.bind(this))}static get defaultConfig(){return mergeObject(super.defaultConfig,{template:"systems/CoC7/templates/chat/cards/combined-roll.html",type:"combinedCard",title:"CoC7.CombinedRollCard"})}get config(){return CombinedCheckCard.defaultConfig}get successCount(){if(this.rolled){let count=0;return this.rolls.forEach((r=>{r.passed&&(count+=1)})),count}}get mainActorKey(){return this.rolls[0]?.actor?.actorKey||void 0}get success(){if(void 0!==this.successCount)return this.any?this.successCount>0:this.all?this.successCount===this.rolls.length:void 0}get failure(){if(void 0!==this.success)return!this.success}async getHtmlRoll(){if(!this.rolled)return;const check=new CoC7Check;return await check._perform({roll:this._roll,silent:!0}),await check.getHtmlRoll({hideSuccess:!0})}process(data){switch(data.action){case"new":case"roll":this.addRollData(data);break;case"updateRoll":this.updateRoll(data);break;case"assignRoll":this.assignRoll(data)}game.user.isGM?this.updateChatCard():game.socket.emit("system.CoC7",data)}async assignRoll(data){game.user.isGM&&(this.rolled||(this.rolled=!0,this._roll=data.roll,this.options=data.options))}static async _onClick(event){event.preventDefault();const a=event.currentTarget,action=a.dataset.action,li=a.closest("li.actor-roll"),message=a.closest(".chat-message"),cardElement=a.closest("div.roll-card"),card=await CombinedCheckCard.fromHTMLCardElement(cardElement);card.messageId=message.dataset.messageId;const rank=Number(li?.dataset?.rank);switch(action){case"remove-roll":card.removeRoll(rank),await card.updateChatCard();break;case"close-card":card.closeCard(),await card.updateChatCard();break;case"roll-card":{const roll={};if(!event.shiftKey){const usage=await RollDialog.create({disableFlatThresholdModifier:event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode,disableFlatDiceModifier:event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode});usage&&(roll.diceModifier=Number(usage.get("bonusDice")),roll.difficulty=Number(usage.get("difficulty")),roll.flatDiceModifier=Number(usage.get("flatDiceModifier")),roll.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}const data={type:this.defaultConfig.type,action:"assignRoll",fromGM:game.user.isGM,options:roll};data.roll=await CoC7Dice.roll(roll.modifier||0),AudioHelper.play({src:CONFIG.sounds.dice}),card.process(data);break}default:{const options={update:!1,data:a.dataset,classes:a.classList,target:a};await CoC7Check.alter(card.rolls[rank],action,options);const data={type:this.defaultConfig.type,action:"updateRoll",rank,fromGM:game.user.isGM};game.user.isGM||(data.roll=card.rolls[rank].JSONRollData),card.process(data);break}}}async compute(){if(this._roll){this.rolls.forEach((async r=>{r.rolled||(r.modifier=this.options.modifier||0,r.difficulty=this.options.difficulty||CoC7Check.difficultyLevel.regular,r.flatDiceModifier=this.options.flatDiceModifier||0,r.flatThresholdModifier=this.options.flatThresholdModifier||0,await r._perform({roll:this._roll,silent:!0}))}));for(let i=0;i<this.rolls.length;i++)this.rolls[i].rolled&&(this.rolls[i]._htmlRoll=await this.rolls[i].getHtmlRoll({hideDiceResult:!0}));this.rolls=this.rolls.filter((roll=>void 0!==roll.actor.data)),this._htmlRoll=await this.getHtmlRoll()}}closeCard(){this.closed=!0}}const CHAT_COC7_MESSAGE_FAKEROLL='<div class="dice-roll"><div class="dice-result"><div class="dice-formula">???</div><h4 class="dice-total">?</h4></div></div>';class CoC7Chat{static renderChatMessageHook(chatMessage,html){chatMessage.getFlag("CoC7","GMSelfRoll")&&!game.user.isGM&&(html.find(".whisper-to").remove(),html.find(".flavor-text").replaceWith(`<span class="flavor-text">${game.i18n.localize("CoC7.RollSecretDice")}</span>`),html.find(".message-content").replaceWith(`<div class="message-content">${CHAT_COC7_MESSAGE_FAKEROLL}</div>`)),chatMessage.getFlag("CoC7","removeWisperTargets")&&!game.user.isGM&&html.find(".whisper-to").remove(),chatMessage.getFlag("CoC7","fakeRoll")&&game.user.isGM&&(html.find(".flavor-text").replaceWith(game.i18n.localize("CoC7.KeeperSentDecoy")),html.find(".message-content").remove())}static fakeRollMessage(){const chatData={user:game.user.id,flavor:game.i18n.localize("CoC7.RollSecretDice"),whisper:game.users.players,type:CONST.CHAT_MESSAGE_TYPES.WHISPER,flags:{CoC7:{GMSelfRoll:!1,removeWisperTargets:!0,fakeRoll:!0}},content:CHAT_COC7_MESSAGE_FAKEROLL};ChatMessage.create(chatData)}static ready(){game.CoC7="init"}static async chatListeners(app,html){html.on("click",".card-buttons button",CoC7Chat._onChatCardAction.bind(this)),html.on("click",".card-title",CoC7Chat._onChatCardToggleContent.bind(this)),html.on("click",".radio-switch",CoC7Chat._onChatCardRadioSwitch.bind(this)),html.on("click",".panel-switch",CoC7Chat._onChatCardToggleSwitch.bind(this)),html.on("click",".simple-flag",CoC7Chat._onChatCardToggleSwitch.bind(this)),html.on("click",".volley-size",CoC7Chat._onChatCardVolleySize.bind(this)),html.on("click",".dropdown-element",CoC7Chat._onDropDownElementSelected.bind(this)),html.on("click",".simple-toggle",CoC7Chat._onToggleSelected.bind(this)),html.on("click",".target-selector",CoC7Chat._onTargetSelect.bind(this)),html.on("dblclick",".open-actor",CoC7Chat._onOpenActor.bind(this)),html.on("click",".coc7-link",await CoC7Parser._onCheck.bind(this)),html.on("dragstart","a.coc7-link",CoC7Parser._onDragCoC7Link.bind(this)),html.on("click","coc7-inline-result",CoC7Chat._onInline.bind(this)),OpposedCheckCard.bindListerners(html),CombinedCheckCard.bindListerners(html)}static _onOpenActor(event){event.preventDefault();const actorKey=event.currentTarget.dataset.actorKey;if(actorKey){const actor=chatHelper.getActorFromKey(actorKey);actor.isOwner&&actor.sheet.render(!0)}}static async onUpdateChatMessage(chatMessage){if(ui.chat.scrollBottom(),game.user.isGM&&0===chatMessage.data.type){const card=$(chatMessage.data.content)[0];if(card.classList.contains("melee")&&"true"===card.dataset.resolved){if(card.classList.contains("initiator"))if(card.dataset.targetCard){const initiator=CoC7MeleeInitiator.getFromMessageId(chatMessage.id),target=CoC7MeleeTarget.getFromMessageId(initiator.targetCard);if(target.resolved){const resolutionCard=new CoC7MeleeResoltion(chatMessage.id,target.messageId,target.resolutionCard);await resolutionCard.resolve(),initiator.checkRevealed||await initiator.revealCheck()}}else{const initiator=CoC7MeleeInitiator.getFromMessageId(chatMessage.id);if(initiator.resolutionCard){const resolutionCard=new CoC7MeleeResoltion(chatMessage.id,null,initiator.resolutionCard);await resolutionCard.resolve(),initiator.checkRevealed||await initiator.revealCheck()}}if(card.classList.contains("target")){const target=CoC7MeleeTarget.getFromMessageId(chatMessage.id),resolutionCard=new CoC7MeleeResoltion(target.parentMessageId,chatMessage.id,target.resolutionCard);await resolutionCard.resolve(),target.meleeInitiator.checkRevealed||await target.meleeInitiator.revealCheck()}}}}static async renderMessageHook(message,html){if(ui.chat.scrollBottom(),InteractiveChatCard.bindListeners(html),message.getFlag("CoC7","checkRevealed")&&(html.find(".dice-roll").removeClass("gm-visible-only"),html[0].dataset.checkRevealed=!0),html.find(".dropbtn").click((event=>event.currentTarget.closest(".dropdown").querySelector(".dropdown-content").classList.toggle("show"))),html.find(".dropdown").mouseleave((event=>event.currentTarget.querySelector(".dropdown-content").classList.remove("show"))),game.user.isGM){const card=html[0].querySelector(".coc7.chat-card");if(card&&card.classList.contains("roll-card")&&"true"!==card.dataset.processed&&card.dataset.refMessageId){const roll=CoC7Roll.getFromElement(card);"target"===card.dataset.side&&(roll.defendantId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId),"initiator"===card.dataset.side&&(roll.initiatorId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId),card.dataset.processed="true",CoC7Chat.updateCombatCardTarget(roll)}}const userOnly=html.find(".target-only");for(const element of userOnly)if(!game.user.isGM){element.style.display="none";const actorId=element.getAttribute("data-actor-id");actorId&&game.actors.get(actorId).isOwner&&(element.style.display="block")}const gmOnly=html.find(".gm-only");for(const zone of gmOnly)game.user.isGM||(zone.style.display="none");const userVisibleOnly=html.find(".user-visible-only");for(const elem of userVisibleOnly)game.user.isGM&&(elem.style.display="none");const gmVisibleOnly=html.find(".gm-visible-only");for(const elem of gmVisibleOnly)game.user.isGM||(elem.style.display="none");const ownerVisibleOnly=html.find(".owner-visible-only");for(const zone of ownerVisibleOnly){let actor=CoC7Chat._getActorFromKey(zone.dataset?.actorKey);actor||(actor=CoC7Chat._getChatCardActor(zone.closest(".chat-card"))),actor||(actor=CoC7Chat._getActorFromKey(zone.parentElement.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-actor-key]")?.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-token-key]")?.dataset.actorKey)),(actor&&!actor.isOwner||game.user.isGM)&&(zone.style.display="none")}if(!game.user.isGM){const ownerOnly=html.find(".owner-only");for(const zone of ownerOnly){let actor=CoC7Chat._getActorFromKey(zone.dataset?.actorKey);actor||(actor=CoC7Chat._getChatCardActor(zone.closest(".chat-card"))),actor||(actor=CoC7Chat._getActorFromKey(zone.parentElement.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-actor-key]")?.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-token-key]")?.dataset.actorKey)),(actor&&!actor.isOwner||!actor&&!game.user.isGM)&&(zone.style.display="none")}const gmSelectOnly=html.find(".gm-select-only");for(const select of gmSelectOnly)select.classList.add("inactive"),select.classList.remove("simple-flag")}}static get actionTypeString(){return{fightBack:"CoC7.fightBack",maneuver:"CoC7.maneuver",dodging:"CoC7.dodge"}}static _onTargetSelect(event){const index=parseInt(event.currentTarget.dataset.key),targetsSelector=event.currentTarget.closest(".targets-selector");targetsSelector.querySelectorAll("img").forEach((i=>{i.style.border="none"})),targetsSelector.querySelector(`[data-key="${index}"]`).querySelector("img").style.border="1px solid #000";const targets=event.currentTarget.closest(".targets");targets.querySelectorAll(".target").forEach((t=>{t.style.display="none",t.dataset.active="false"}));const targetToDisplay=targets.querySelector(`[data-target-key="${index}"]`);targetToDisplay.style.display="block",targetToDisplay.dataset.active="true"}static _onDropDownElementSelected(event){event.preventDefault();const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("target"))return void CoC7MeleeTarget.updateSelected(card,event);const dropDownBoxes=event.currentTarget.closest(".response-selection").querySelectorAll(".toggle-switch");[].forEach.call(dropDownBoxes,(dpdnBox=>dpdnBox.classList.remove("switched-on"))),event.currentTarget.closest(".toggle-switch").classList.add("switched-on"),event.currentTarget.closest(".dropdown-content").classList.toggle("show");const selectedBox=event.currentTarget.closest(".defender-action-select").querySelector(".selected-action");selectedBox.style.display="block";const button=selectedBox.querySelector("button");switch(button.dataset.action="defending",button.dataset.actionType=event.currentTarget.dataset.action,button.dataset.defenderChoice=event.currentTarget.dataset.action,button.dataset.skillId=event.currentTarget.dataset.skillId,button.dataset.skillValue=event.currentTarget.dataset.skillValue,button.dataset.skillName=event.currentTarget.dataset.skillName,button.dataset.itemId=event.currentTarget.dataset.weaponId,button.dataset.itemName=event.currentTarget.dataset.weaponName,event.currentTarget.dataset.action){case"maneuver":button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.skillName} (${event.currentTarget.dataset.skillValue}%)`;break;case"fightBack":button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.weaponName} (${event.currentTarget.dataset.skillValue}%)`}}static async _onInline(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("inline-result"))return a.classList.contains("expanded")?CoC7Check._collapseInlineResult(a):CoC7Check._expandInlineResult(a)}static _onToggleSelected(event){const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("target"))return void CoC7MeleeTarget.updateSelected(card,event);if(""===event.currentTarget.dataset.skillId)return void ui.notifications.error(game.i18n.localize("CoC7.ErrorNoDodgeSkill"));const dropDownBoxes=event.currentTarget.closest(".response-selection").querySelectorAll(".toggle-switch");[].forEach.call(dropDownBoxes,(dpdnBox=>dpdnBox.classList.remove("switched-on"))),event.currentTarget.classList.add("switched-on");const selectedBox=event.currentTarget.closest(".defender-action-select").querySelector(".selected-action");selectedBox.style.display="block";const button=selectedBox.querySelector("button");button.dataset.action="defending",button.dataset.actionType="dodging",button.dataset.defenderChoice=event.currentTarget.dataset.action,button.dataset.skillId=event.currentTarget.dataset.skillId,button.dataset.skillValue=event.currentTarget.dataset.skillValue,button.dataset.skillName=event.currentTarget.dataset.skillName,button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.skillName} (${event.currentTarget.dataset.skillValue}%)`}static _onChatCardRadioSwitch(event){event.preventDefault();const optionList=event.currentTarget.parentElement.getElementsByClassName("radio-switch");let index;for(index=0;index<optionList.length;index++){const element=optionList[index];element.dataset.property===event.currentTarget.dataset.property?element.classList.add("switched-on"):element.classList.remove("switched-on")}event.currentTarget.parentElement.dataset.selected=event.currentTarget.dataset.property}static async _onChatCardVolleySize(event){const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("range")&&card.classList.contains("initiator")){const rangeCard=CoC7RangeInitiator.getFromCard(card);event.currentTarget.classList.contains("increase")?rangeCard.changeVolleySize(1):event.currentTarget.classList.contains("decrease")&&rangeCard.changeVolleySize(-1)}}static async _onChatCardToggleSwitch(event){event.preventDefault();const card=event.currentTarget.closest(".chat-card");card.classList.contains("melee")&&(card.classList.contains("initiator")&&CoC7MeleeInitiator.updateCardSwitch(event),card.classList.contains("target")&&CoC7MeleeTarget.updateCardSwitch(event)),card.classList.contains("range")&&card.classList.contains("initiator")&&CoC7RangeInitiator.updateCardSwitch(event),card.classList.contains("damage"),card.classList.contains("roll-card")&&CoC7Check.updateCardSwitch(event)}static _getChatCardActor(card){const cardData=card.dataset.object?JSON.parse(unescape(card.dataset.object)):card.dataset;if(cardData.actorKey)return CoC7Chat._getActorFromKey(cardData.actorKey);const tokenKey=cardData.tokenId;if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token.actor||new Token(tokenData).actor:null}}const actorId=cardData.actorId;if(actorId)return game.actors.get(actorId);const message=card.closest(".message"),messageId=message?message.dataset.messageId:null;if(messageId){const chatMessage=game.messages.get(messageId);if(chatMessage.user)return chatMessage.user.character}return null}static isCardOwner(card){const message=card.closest(".message"),messageId=message?message.dataset.messageId:null;if(messageId){return game.messages.get(messageId).ownner||!1}return!1}static _getActorFromKey(key){if(key){if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token.actor||new Token(tokenData).actor:null}}return game.actors.get(key)||null}}static getActorFromToken(tokenKey){const token=CoC7Chat.getToken(tokenKey);return token?token.actor:null}static getToken(tokenKey){if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId){const tokenDoc=game.actors.tokens[tokenId]?.token;return tokenDoc.object}{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token||new Token(tokenData):null}}return null}static async updateChatCard(card,messId=null){const messageId=null==messId?card.closest(".message").dataset.messageId:messId,message=game.messages.get(messageId),msg=await message.update({content:card.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}static async _onChatCardAction(event){event.preventDefault();const button=event.currentTarget,card=button.closest(".chat-card"),originMessage=button.closest(".message"),action=button.dataset.action;if(CoC7Chat._getChatCardActor(card))switch(action){case"useLuck":{const luckAmount=parseInt(button.dataset.luckAmount),newSuccessLevel=parseInt(event.currentTarget.dataset.newSuccessLevel);if(card.classList.contains("melee")){let meleeCard;card.classList.contains("target")&&(meleeCard=CoC7MeleeTarget.getFromCard(card)),card.classList.contains("initiator")&&(meleeCard=CoC7MeleeInitiator.getFromCard(card)),meleeCard.upgradeRoll(luckAmount,newSuccessLevel,card)}else if(card.classList.contains("range")){const rangeCard=CoC7RangeInitiator.getFromCard(card),rollResult=button.closest(".roll-result"),rollIndex=rollResult?parseInt(rollResult.dataset.index):null;if(button.classList.contains("pass-check"))rangeCard.passRoll(rollIndex);else{const upgradeIndex=parseInt(button.dataset.index);rangeCard.upgradeRoll(rollIndex,upgradeIndex)}}else if(card.classList.contains("roll-card")||null!=card.querySelector(".roll-result")){const check=await CoC7Check.getFromCard(card);if(button.classList.contains("pass-check")){const luckAmount=parseInt(button.dataset.luckAmount);check.forcePass(luckAmount)}else{const upgradeIndex=parseInt(button.dataset.index);await check.upgradeCheck(upgradeIndex)}}else{const actor=CoC7Chat._getChatCardActor(card),detailedResultPlaceHolder=card.querySelector(".result-details");if(actor.spendLuck(luckAmount)){const result=card.querySelector(".dice-total");switch(card.dataset.successLevel=newSuccessLevel,card.dataset.processed="false",newSuccessLevel){case CoC7Check.successLevel.regular:result.innerText=game.i18n.localize("CoC7.RegularSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:result.innerText=game.i18n.localize("CoC7.HardSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:result.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:result.innerText=game.i18n.localize("CoC7.CriticalSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}result.classList.replace("failure","success"),result.classList.remove("fumble"),card.querySelector(".card-buttons").remove(),card.querySelector(".dice-tooltip").style.display="none",await CoC7Chat.updateChatCard(card)}else ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:actor.name}))}break}case"push":{const newCard=card.cloneNode(!0),result=newCard.querySelector(".dice-total");result.innerText=result.innerText+game.i18n.localize("CoC7.PushingSkill"),result.classList.remove("failure"),newCard.querySelector(".card-buttons").remove(),newCard.dataset.pushedRoll=!0,await CoC7Chat.updateChatCard(newCard,originMessage.dataset.messageId),await CoC7Check.push(card);break}case"defending":{let defender,defenderKey=event.currentTarget.closest(".defender-action-select").dataset.tokenId;defenderKey?defender=this.getActorFromToken(defenderKey):(defenderKey=event.currentTarget.closest(".defender-action-select").dataset.actorId,defender=game.actors.get(defenderKey));const responseType=event.currentTarget.dataset.actionType,outnumbered="true"===event.currentTarget.dataset.outnumbered,check=new CoC7Check;switch(check.referenceMessageId=originMessage.dataset.messageId,check.rollType="opposed",check.side="target",check.action=responseType,responseType){case"dodging":check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,outnumbered&&(check.diceModifier=-1),await check.roll(),check.toMessage();break;case"fightBack":check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.item=event.currentTarget.dataset.itemId,outnumbered&&(check.diceModifier=-1),await check.roll(),check.toMessage();break;case"maneuver":{const actor=CoC7Chat._getChatCardActor(card);if(defender.build<=actor.build-3)return void ui.notifications.error(game.i18n.localize("CoC7.ErrorManeuverNotPossible"));check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,outnumbered&&(check.diceModifier=-1),defender.build<actor.build&&(check.diceModifier=check.diceModifier-(actor.build-defender.build)),check.diceModifier<-2&&(check.difficulty=check.difficulty+Math.abs(check.diceModifier)-2,check.diceModifier=-2),await check.roll(),check.toMessage();break}}break}case"melee-initiator-roll":{const initiator=CoC7MeleeInitiator.getFromCard(card);await initiator.performSkillCheck(event.currentTarget.dataset.skill),await initiator.publishCheckResult();break}case"melee-target-roll":{const target=CoC7MeleeTarget.getFromCard(card);await target.performSkillCheck(event.currentTarget.dataset.skill),await target.publishCheckResult();break}case"roll-melee-damage":{const damageChatCard=new DamageCard({critical:"true"===button.dataset.critical,fastForward:event.shiftKey});damageChatCard.actorKey=button.dataset.dealer,damageChatCard.targetKey=button.dataset.target,damageChatCard.itemId=button.dataset.weapon,originMessage.dataset.messageId&&(damageChatCard.messageId=originMessage.dataset.messageId),damageChatCard.updateChatCard();break}case"range-initiator-shoot":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);rangeInitiator.addShotAtCurrentTarget(),await rangeInitiator.updateChatCard();break}case"range-initiator-roll":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.resolveCard();break}case"roll-range-damage":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.rollDamage();break}case"deal-melee-damage":{const targetKey=card.dataset.targetKey,amount=card.dataset.result,targetActor=chatHelper.getActorFromKey(targetKey);await targetActor.dealDamage(amount);const buttons=card.querySelector(".card-buttons"),diceTotal=card.querySelector(".dice-total");$(diceTotal).append('<i class="fas fa-check"></i>'),buttons&&buttons.remove(),await CoC7Chat.updateChatCard(card);break}case"deal-range-damage":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.dealDamage();break}case"testcheck":(await CoC7Check.getFromCard(card)).forcePass();break;case"force-pass":(await CoC7Check.getFromCard(card)).forcePass();break;case"force-fail":(await CoC7Check.getFromCard(card)).forceFail();break;case"increase-success-level":(await CoC7Check.getFromCard(card)).increaseSuccessLevel();break;case"decrease-success-level":(await CoC7Check.getFromCard(card)).decreaseSuccessLevel();break;case"reveal-check":{const check=await CoC7Check.getFromCard(card);check.isBlind=!1,check.computeCheck(),event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode?check.updateChatCard({makePublic:!0}):check.updateChatCard();break}case"roll-check-card":{const check=await CoC7Check.getFromCard(card);check.standby=!1,await check._perform(),check.updateChatCard({forceRoll:!0});break}case"flag-for-development":{const check=await CoC7Check.getFromCard(card);await check.flagForDevelopement(),check.computeCheck(),check.updateChatCard();break}case"reset-creature-san-data":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.resetCreatureSanData(),await sanCheck.updateChatCard();break}case"reset-specie-san-data":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.resetSpecieSanData(),await sanCheck.updateChatCard();break}case"roll-san-check":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollSan(),await sanCheck.updateChatCard();break}case"advance-state":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.advanceState(button.dataset.state),await sanCheck.updateChatCard();break}case"roll-san-loss":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollSanLoss(),sanCheck.updateChatCard();break}case"roll-int-check":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollInt(),sanCheck.updateChatCard();break}case"roll-con-check":{const conCheck=CoC7ConCheck.getFromCard(card);await conCheck.rollCon(),conCheck.updateChatCard();break}case"reveal-con-check":{const conCheck=CoC7ConCheck.getFromCard(card);conCheck.isBlind=!1,conCheck.updateChatCard();break}}}static _onChatCardToggleContent(event){event.preventDefault();const content=event.currentTarget.closest(".chat-card").querySelector(".card-content");content&&(content.style.display?content.style.display="none"===content.style.display?"block":"none":content.style.display="block")}}class CoC7MeleeInitiator extends ChatCardActor{constructor(actorKey=null,itemId=null,fastForward=!1){super(actorKey,fastForward),this.itemId=itemId,this.resolved=!1,this.outnumbered=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.targetCard=null,this.rolled=!1}get template(){return"systems/CoC7/templates/chat/combat/melee-initiator.html"}async revealCheck(){const chatMessage=game.messages.get(this.messageId);await chatMessage.setFlag("CoC7","checkRevealed",!0),await ui.chat.updateMessage(chatMessage,!1)}async createChatCard(){chatHelper.getActorImgFromKey(this.actorKey);const html=await renderTemplate(this.template,this),speakerData={};this.token?speakerData.token=this:speakerData.actor=this;const speaker=ChatMessage.getSpeaker(speakerData),chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,content:html};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;return await ChatMessage.create(chatData)}async updateChatCard(){const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;this[flag]=!this[flag]}async performSkillCheck(skillId=null,publish=!1){const check=new CoC7Check;if(check.isBlind=!1,check.isUnkonwn=!1,check.referenceMessageId=this.messageId,check.rollType="opposed",check.side="initiator",check.action="attack",check.actor=this.actorKey,check.item=this.itemId,check.skill=skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.diceModifier=0,game.user.isGM?this.checkRevealed=!1:this.checkRevealed=!0,this.outnumbered&&(check.diceModifier+=1),this.surprised&&(check.diceModifier+=1),this.disadvantage&&(check.diceModifier-=1),this.advantage&&(check.diceModifier+=1),await check.roll(),this.check=check,this.rolled=!0,this.resolved=!0,publish&&check.toMessage(),this.criticalDamage=check.successLevel===CoC7Check.successLevel.extreme||check.successLevel===CoC7Check.successLevel.critical,this.hasTarget&&!this.autoSuccess){const meleeTarget=new CoC7MeleeTarget(this.targetKey,this.messageId,this.fastForward);meleeTarget.initiatorKey=this.actorKey;const message=await meleeTarget.createChatCard();this.targetCard=message.id}return this.autoSuccess&&!this.check.isFumble&&this.check.forcePass(),check}async publishCheckResult(check=null){if(!check&&!this.check)return null;if(check&&(this.check=check),this.roll=CoC7Roll.getFromCheck(this.check),this.rolled=!0,this.roll.rollIcons=[],this.roll.critical){this.roll.rollColor="goldenrod",this.roll.rollTitle=game.i18n.localize("CoC7.CriticalSuccess");for(let index=0;index<4;index++)this.roll.rollIcons.push("medal")}else if(this.roll.fumble){this.roll.rollColor="darkred",this.roll.rollTitle=game.i18n.localize("CoC7.Fumble");for(let index=0;index<4;index++)this.roll.rollIcons.push("spider")}else if(this.roll.success){this.roll.rollColor="goldenrod",CoC7Check.successLevel.regular===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.RegularSuccess")),CoC7Check.successLevel.hard===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.HardSuccess")),CoC7Check.successLevel.extreme===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.ExtremeSuccess"));for(let index=0;index<this.roll.successLevel;index++)this.roll.rollIcons.push("star")}else this.roll.rollColor="black",this.roll.rollTitle=game.i18n.localize("CoC7.Failure"),this.roll.rollIcons.push("skull");if(!this.targetCard&&!this.autoSuccess&&this.hasTarget){const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id}await this.updateChatCard()}static getFromCard(card,messageId=null){const initiator=new CoC7MeleeInitiator;return chatHelper.getObjectFromElement(initiator,card),initiator.roll=CoC7Roll.getFromCard(card),card.closest(".message")?initiator.messageId=card.closest(".message").dataset.messageId:initiator.messageId=messageId,initiator}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.data.content)[0],initiator=CoC7MeleeInitiator.getFromCard(card,messageId);return initiator.messageId=messageId,initiator}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".melee.initiator"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const initiator=CoC7MeleeInitiator.getFromCard(card);initiator.toggleFlag(flag),initiator.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}upgradeRoll(luckAmount,newSuccessLevel,oldCard){this.actor.spendLuck(luckAmount)||ui.notifications.error(`${this.actor.name} didn't have enough luck to pass the check`),this.roll.value=null,this.roll.successLevel=newSuccessLevel,this.roll.luckSpent=!0,oldCard.dataset.processed=!1;const diceRolls=oldCard.querySelector(".dice-roll");diceRolls.dataset.value=null,diceRolls.dataset.successLevel=newSuccessLevel,diceRolls.dataset.luckSpent=!0;const resulDetails=oldCard.querySelector(".result-details"),diceTotal=oldCard.querySelector(".dice-total"),rollDamageButton=oldCard.querySelector('button[data-action="roll-melee-damage"]');switch(rollDamageButton&&rollDamageButton.classList.remove("invisible"),newSuccessLevel){case CoC7Check.successLevel.regular:diceTotal.innerText=game.i18n.localize("CoC7.RegularSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:diceTotal.innerText=game.i18n.localize("CoC7.HardSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:rollDamageButton&&(rollDamageButton.dataset.critical=!0),diceTotal.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:rollDamageButton&&(rollDamageButton.dataset.critical=!0),diceTotal.innerText=game.i18n.localize("CoC7.CriticalSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}diceTotal.classList.replace("failure","success"),oldCard.querySelector(".card-buttons").remove(),oldCard.querySelector(".dice-tooltip").style.display="none",CoC7Chat.updateChatCard(oldCard)}}class CoCActor extends Actor{async initialize(){super.initialize(),await this.creatureInit()}static async create(data,options={}){return data.token=data.token||{},"character"===data.type?mergeObject(data.token,{vision:!0,dimSight:30,brightSight:0,actorLink:!0,disposition:1},{overwrite:!1}):"vehicle"===data.type&&(data.img="systems/CoC7/assets/icons/jeep.svg"),super.create(data,options)}checkUndefinedAuto(){const returnData={attribs:{hp:{},mp:{},san:{},mov:{},db:{},build:{}}};return void 0===this.data.data.attribs?.hp?.auto&&(returnData.attribs.hp.auto=!0),void 0===this.data.data.attribs?.mp?.auto&&(returnData.attribs.mp.auto=!0),void 0===this.data.data.attribs?.san?.auto&&(returnData.attribs.san.auto=!0),void 0===this.data.data.attribs?.mov?.auto&&(returnData.attribs.mov.auto=!0),void 0===this.data.data.attribs?.db?.auto&&(returnData.attribs.db.auto=!0),void 0===this.data.data.attribs?.build?.auto&&(returnData.attribs.build.auto=!0),returnData}get characteristics(){const characteristics={str:{value:null,shortName:"CHARAC.STR",label:"CHARAC.Strength",formula:null},con:{value:null,shortName:"CHARAC.CON",label:"CHARAC.Constitution",formula:null},siz:{value:null,shortName:"CHARAC.SIZ",label:"CHARAC.Size",formula:null},dex:{value:null,shortName:"CHARAC.DEX",label:"CHARAC.Dexterity",formula:null},app:{value:null,shortName:"CHARAC.APP",label:"CHARAC.Appearance",formula:null},int:{value:null,shortName:"CHARAC.INT",label:"CHARAC.Intelligence",formula:null},pow:{value:null,shortName:"CHARAC.POW",label:"CHARAC.Power",formula:null},edu:{value:null,shortName:"CHARAC.EDU",label:"CHARAC.Education",formula:null}};if(this.data.data.characteristics)for(const[key,value]of Object.entries(this.data.data.characteristics))characteristics[key]={key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label),value:value.value,hard:Math.floor(value.value/2)||null,extreme:Math.floor(value.value/5)||null,formula:value.formula};return characteristics}static async initToken(createData){}get boutOfMadness(){return this.effects.find((e=>e.data.label===game.i18n.localize("CoC7.BoutOfMadnessName")))}get insanity(){return this.effects.find((e=>e.data.label===game.i18n.localize("CoC7.InsanityName")))}get isInABoutOfMadness(){return!!this.boutOfMadness&&!this.boutOfMadness.data.disabled}get isInsane(){return!!this.insanity&&!this.insanity.data.disabled}get sanity(){const boutRealTime=!!this.boutOfMadness?.data.flags?.CoC7?.realTime;let duration=boutRealTime?this.boutOfMadness?.data?.duration?.rounds:this.boutOfMadness?.data?.duration.seconds;!boutRealTime&&duration&&(duration=Math.round(duration/3600));let indefiniteInstanity=!!this.insanity?.data.flags?.CoC7?.indefinite,insaneDuration=indefiniteInstanity?null:this.insanity?.data?.duration.seconds;!indefiniteInstanity&&insaneDuration&&(insaneDuration/=3600);let boutDurationText=this.isInABoutOfMadness?boutRealTime?`${duration} ${game.i18n.localize("CoC7.rounds")}`:`${duration} ${game.i18n.localize("CoC7.hours")}`:null;const insanityDurationText=insaneDuration&&this.isInsane?indefiniteInstanity?null:`${insaneDuration} ${game.i18n.localize("CoC7.hours")}`:null;return!this.isInsane||insanityDurationText||indefiniteInstanity||(indefiniteInstanity=!0),duration||(boutDurationText=""),{boutOfMadness:{active:this.isInABoutOfMadness,realTime:this.isInABoutOfMadness?boutRealTime:void 0,summary:this.isInABoutOfMadness?!boutRealTime:void 0,duration:this.isInABoutOfMadness?duration:void 0,durationText:boutDurationText||"",hint:this.isInABoutOfMadness?`${game.i18n.localize("CoC7.BoutOfMadness")}${boutDurationText?": "+boutDurationText:""}`:game.i18n.localize("CoC7.BoutOfMadness")},underlying:{active:this.isInsane,indefintie:this.isInsane?indefiniteInstanity:void 0,duration:insaneDuration,durationText:insanityDurationText||"",hint:this.isInsane?indefiniteInstanity?game.i18n.localize("CoC7.IndefiniteInsanity"):`${game.i18n.localize("CoC7.TemporaryInsanity")} ${insanityDurationText||""}`:game.i18n.localize("CoC7.NotInsane")}}}get portrait(){return game.settings.get("CoC7","useToken")?this.isToken?this.token?.data?.img||this.img:this.data.token?.img||this.img:this.img}async enterBoutOfMadness(realTime=!0,duration=1){let result=null;const boutOfMadnessTableId=realTime?game.settings.get("CoC7","boutOfMadnessRealTimeTable"):game.settings.get("CoC7","boutOfMadnessSummaryTable");if("none"!==boutOfMadnessTableId){result={phobia:!1,mania:!1,description:null};const boutOfMadnessTable=game.tables.get(boutOfMadnessTableId);if(result.tableRoll=await boutOfMadnessTable.roll(),void 0!==result.tableRoll.results[0]){if(CONST.TABLE_RESULT_TYPES.ENTITY===result.tableRoll.results[0].data.type){const item=game.items.get(result.tableRoll.results[0].data.resultId);void 0!==item?(item.data?.data?.type?.phobia&&(result.phobia=!0),item.data?.data?.type?.mania&&(result.mania=!0),result.description=`${item.name}:${TextEditor.enrichHTML(item.data.data.description.value)}`,result.name=item.name,delete item.data._id,await this.createEmbeddedDocuments("Item",[item.data])):ui.notifications.error(game.i18n.localize("CoC7.MessageBoutOfMadnessItemNotFound"))}CONST.TABLE_RESULT_TYPES.TEXT===result.tableRoll.results[0].data.type&&(result.description=TextEditor.enrichHTML(result.tableRoll.results[0].data.text))}else ui.notifications.error(game.i18n.localize("CoC7.MessageBoutOfMadnessTableNotFound"))}return realTime?(this.boutOfMadness?await this.boutOfMadness.update({disabled:!1,duration:{rounds:realTime&&duration?duration:void 0,seconds:realTime?void 0:3600*duration,turns:1},flags:{CoC7:{realTime}}}):await super.createEmbeddedDocuments("ActiveEffect",[{label:game.i18n.localize("CoC7.BoutOfMadnessName"),icon:"systems/CoC7/assets/icons/hanging-spider.svg",origin:this.uuid,duration:{rounds:realTime&&duration?duration:void 0,seconds:realTime?void 0:3600*duration,turns:1},flags:{CoC7:{madness:!0,realTime}},disabled:!1}]),result):result}async enterInsanity(indefinite=!0,duration){this.insanity?await this.insanity.update({disabled:!1,duration:{seconds:!indefinite&&duration?3600*duration:void 0,turns:1},flags:{CoC7:{indefinite}}}):await super.createEmbeddedDocuments("ActiveEffect",[{label:game.i18n.localize("CoC7.InsanityName"),icon:"systems/CoC7/assets/icons/tentacles-skull.svg",origin:this.uuid,duration:{seconds:!indefinite&&duration?3600*duration:void 0,turns:1},flags:{CoC7:{madness:!0,indefinite}},disabled:!1}])}async exitBoutOfMadness(){return await(this.boutOfMadness?.delete())}async exitInsanity(){return await(this.insanity?.delete())}async createSkill(skillName,value,showSheet=!1){const data={name:skillName,type:"skill",data:{value,properties:{special:!1,rarity:!1,push:!0,combat:!1}}};return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createWeaponSkill(name,firearms=!1,base=null){const skillData=await SkillSpecSelectDialog.create([],game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName"),0,name),value=Number(skillData.get("base-value")),data={name,type:"skill",data:{specialization:game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName"),base:isNaN(value)?0:value,adjustments:{personal:null,occupation:null,archetype:null,experience:null},properties:{special:!0,fighting:!firearms,firearm:firearms,combat:!0}}};await this.createEmbeddedDocuments("Item",[data],{renderSheet:!base});return this.getSkillsByName(name)[0]}async creatureInit(){if("creature"!==this.data.type)return;if(this.getActorFlag("initialized"))return;if(0===this.getSkillsByName(game.i18n.localize(COC7.creatureFightingSkill)).length){try{const skill=await this.createEmbeddedDocuments("Item",[{name:game.i18n.localize(COC7.creatureFightingSkill),type:"skill",data:{base:0,value:null,specialization:game.i18n.localize(COC7.fightingSpecializationName),properties:{combat:!0,fighting:!0,special:!0},flags:{}}}],{renderSheet:!1}),attack=await this.createEmbeddedDocuments("Item",[{name:"Innate attack",type:"weapon",data:{description:{value:"Creature's natural attack",chat:"Creature's natural attack"},wpnType:"innate",properties:{addb:!0,slnt:!0}}}],{renderSheet:!1}),createdAttack=this.items.get(attack._id);await createdAttack.update({"data.skill.main.id":skill._id,"data.skill.main.name":skill.name})}catch(err){console.error("Creature init: "+err.message)}await this.setActorFlag("initialized")}}async createItem(itemName,quantity=1,showSheet=!1){const data={name:itemName,type:"item",data:{quantity}};return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptySkill(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newSkillName)))return this.createSkill(game.i18n.localize(COC7.newSkillName),null,showSheet);let index=0,skillName=game.i18n.localize(COC7.newSkillName)+" "+index;for(;this.getItemIdByName(skillName);)index++,skillName=game.i18n.localize(COC7.newSkillName)+" "+index;return this.createSkill(skillName,null,showSheet)}async createEmptyItem(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newItemName)))return this.createItem(game.i18n.localize(COC7.newItemName),1,showSheet);let index=0,itemName=game.i18n.localize(COC7.newItemName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newItemName)+" "+index;return this.createItem(itemName,1,showSheet)}async createEmptyWeapon(event=null){const showSheet=!event||!event.shiftKey;let weaponName=game.i18n.localize(COC7.newWeaponName);if(this.getItemIdByName(game.i18n.localize(COC7.newWeaponName))){let index=0;for(weaponName=game.i18n.localize(COC7.newWeaponName)+" "+index;this.getItemIdByName(weaponName);)index++,weaponName=game.i18n.localize(COC7.newWeaponName)+" "+index}const data={name:weaponName,type:"weapon",data:{properties:{}}};for(const[key]of Object.entries(COC7.weaponProperties))data.data.properties[key]=!1;await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createBioSection(title=null){const bio=this.data.data.biography?duplicate(this.data.data.biography):[];bio.push({title,value:null}),await this.update({"data.biography":bio})}async updateBioValue(index,content){const bio=duplicate(this.data.data.biography);bio[index].value=content,await this.update({"data.biography":bio},{render:!1})}async updateBioTitle(index,title){const bio=duplicate(this.data.data.biography);bio[index].title=title,await this.update({"data.biography":bio})}async deleteBioSection(index){const bio=duplicate(this.data.data.biography);bio.splice(index,1),await this.update({"data.biography":bio})}async moveBioSectionUp(index){if(0===index)return;const bio=duplicate(this.data.data.biography);if(index>=bio.length)return;const elem=bio.splice(index,1)[0];bio.splice(index-1,0,elem),await this.update({"data.biography":bio})}async moveBioSectionDown(index){const bio=duplicate(this.data.data.biography);if(index>=bio.length-1)return;const elem=bio.splice(index,1)[0];bio.splice(index+1,0,elem),await this.update({"data.biography":bio})}async updateTextArea(textArea){const name="data."+textArea.dataset.areaName;await this.update({[name]:textArea.value})}async createEmbeddedDocuments(embeddedName,dataArray,options){const output=[];for(const data of dataArray)switch(data.type){case"skill":if("character"!==this.data.type){if(this.getItemIdByName(data.name))return;if(data.data.base&&String(data.data.base)!==String(data.data.value)&&(data.data.value=data.data.base),isNaN(Number(data.data.value))){let value;try{value=(await new Roll(data.data.value,this.parseCharacteristics()).evaluate({async:!0})).total}catch(err){value=null}value&&(data.data.value=Math.floor(value))}}else data.data.value=null;if(CoC7Item.isAnySpec(data)){const specialization=data.data.specialization?.toLowerCase();if(specialization){let skillList=[];(data.data?.flags?.occupation||data.data?.flags?.archetype)&&(skillList=this.skills.filter((el=>!!el.data.data.specialization&&((!data.data?.flags?.occupation||!el.data.data.flags?.occupation)&&((!data.data?.flags?.archetype||!el.data.data.flags?.archetype)&&specialization.toLowerCase()===el.data.data.specialization?.toLowerCase())))));const skillData=await SkillSpecSelectDialog.create(skillList,data.data.specialization,data.data.base);if(skillData){if(skillData.get("existing-skill")){const existingItem=this.items.get(skillData.get("existing-skill"));for(const[key,value]of Object.entries(data.data.flags))value&&await existingItem.setItemFlag(key);return void(data.name=CoC7Item.getNameWithoutSpec(existingItem))}if(skillData.get("new-skill-name")?data.name=skillData.get("new-skill-name"):data.name=CoC7Item.getNameWithoutSpec(data),skillData.get("base-value")){const value=Number(skillData.get("base-value"));isNaN(value)||(data.data.base=value)}}}}else{data.data.specialization&&(data.name=CoC7Item.getNameWithoutSpec(data))}output.push(await super.createEmbeddedDocuments(embeddedName,[data],options));break;case"weapon":{const mainSkill=data.data?.skill?.main?.name;if(mainSkill){let skill=this.getSkillsByName(mainSkill)[0];if(!skill){const name=mainSkill.match(/\(([^)]+)\)/)?mainSkill.match(/\(([^)]+)\)/)[1]:mainSkill;skill=await this.createWeaponSkill(name,!!data.data.properties?.rngd)}skill&&(data.data.skill.main.id=skill.id)}const secondSkill=data.data?.skill?.alternativ?.name;if(secondSkill){let skill=this.getSkillsByName(secondSkill)[0];if(!skill){const name=mainSkill.match(/\(([^)]+)\)/)?mainSkill.match(/\(([^)]+)\)/)[1]:mainSkill;skill=await this.createWeaponSkill(name,!!data.data.properties?.rngd)}skill&&(data.data.skill.alternativ.id=skill.id)}output.push(await super.createEmbeddedDocuments(embeddedName,[duplicate(data)],options));break}case"setup":{if(data.data.enableCharacterisitics){data.data.characteristics.list={},data.data.characteristics.list.str=this.getCharacteristic("str"),data.data.characteristics.list.con=this.getCharacteristic("con"),data.data.characteristics.list.siz=this.getCharacteristic("siz"),data.data.characteristics.list.dex=this.getCharacteristic("dex"),data.data.characteristics.list.app=this.getCharacteristic("app"),data.data.characteristics.list.int=this.getCharacteristic("int"),data.data.characteristics.list.pow=this.getCharacteristic("pow"),data.data.characteristics.list.edu=this.getCharacteristic("edu"),data.data.characteristics.list.luck={},data.data.characteristics.list.luck.value=isNaN(this.luck)?null:this.luck,data.data.characteristics.list.luck.label=game.i18n.localize("CoC7.Luck"),data.data.characteristics.list.luck.shortName=game.i18n.localize("CoC7.Luck"),data.data.characteristics.values||(data.data.characteristics.values={}),data.data.characteristics.values.str=data.data.characteristics.list.str.value,data.data.characteristics.values.con=data.data.characteristics.list.con.value,data.data.characteristics.values.siz=data.data.characteristics.list.siz.value,data.data.characteristics.values.dex=data.data.characteristics.list.dex.value,data.data.characteristics.values.app=data.data.characteristics.list.app.value,data.data.characteristics.values.int=data.data.characteristics.list.int.value,data.data.characteristics.values.pow=data.data.characteristics.list.pow.value,data.data.characteristics.values.edu=data.data.characteristics.list.edu.value,data.data.characteristics.values.luck=data.data.characteristics.list.luck.value,data.data.characteristics.points.enabled?data.data.title=game.i18n.localize("CoC7.SpendPoints"):data.data.title=game.i18n.localize("CoC7.RollCharac"),data.data.pointsWarning=!(null!==data.data.characteristics.values.str&&null!==data.data.characteristics.values.con&&null!==data.data.characteristics.values.siz&&null!==data.data.characteristics.values.dex&&null!==data.data.characteristics.values.app&&null!==data.data.characteristics.values.int&&null!==data.data.characteristics.values.pow&&null!==data.data.characteristics.values.edu);if(!await CharacRollDialog.create(data.data))return;{const updateData={};["str","con","siz","dex","app","int","pow","edu"].forEach((key=>{data.data.characteristics.values[key]&&(updateData[`data.characteristics.${key}.value`]=data.data.characteristics.values[key],updateData[`data.characteristics.${key}.formula`]=data.data.characteristics.rolls[key])})),data.data.characteristics.values.luck&&(updateData["data.attribs.lck.value"]=data.data.characteristics.values.luck),data.data.characteristics.values.pow&&(updateData["data.attribs.san.value"]=data.data.characteristics.values.pow,updateData["data.attribs.san.oneFifthSanity"]=" / "+Math.floor(data.data.characteristics.values.pow/5),updateData["data.indefiniteInsanityLevel.max"]=updateData["data.attribs.mp.value"]=updateData["data.attribs.mp.max"]=Math.floor(data.data.characteristics.values.pow/5)),await this.update(updateData),await this.update({"data.attribs.hp.value":this.hpMax,"data.attribs.hp.max":this.hpMax})}}const skills=data.data.items.filter((it=>"skill"===it.type)),othersItems=data.data.items.filter((it=>"skill"!==it.type));if(await this.addUniqueItems(skills),await this.addItems(othersItems),game.settings.get("CoC7","oneBlockBackstory"))await this.update({"data.backstory":data.data.backstory});else for(const sectionName of data.data.bioSections)!this.data.data.biography.find((el=>sectionName===el.title))&&sectionName&&await this.createBioSection(sectionName);break}case"archetype":if("character"===this.data.type){if(this.archetype){let resetArchetype=!1;if(await Dialog.confirm({title:game.i18n.localize("CoC7.ResetArchetype"),content:`<p>${game.i18n.format("CoC7.ResetArchetypeHint",{name:this.name})}</p>`,yes:()=>{resetArchetype=!0},defaultYes:!1}),!resetArchetype)return;await this.resetArchetype()}const coreCharac=[];let charac;if(Object.entries(data.data.coreCharacteristics).forEach((entry=>{const[key,value]=entry;if(data.data.coreCharacteristics[key]=!1,value){const char=this.getCharacteristic(key);char.key=key,coreCharac.push(char)}})),coreCharac.length>1){const charDialogData={};charDialogData.characteristics=coreCharac,charDialogData.title=game.i18n.localize("CoC7.SelectCoreCharac"),charac=await CharacSelectDialog.create(charDialogData)}else 1===coreCharac.length&&(charac=coreCharac[0].key);if(!charac)return;if(data.data.coreCharacteristics[charac]=!0,data.data.coreCharacteristicsFormula.enabled){let value=Number(data.data.coreCharacteristicsFormula.value);if(isNaN(value)){const char=this.getCharacteristic(charac),roll=new Roll(data.data.coreCharacteristicsFormula.value);await roll.roll({async:!0}),roll.toMessage({flavor:`Rolling characterisitic ${char.label}: ${data.data.coreCharacteristicsFormula.value}`}),value=char.value<roll.total?roll.total:char.value}await this.update({[`data.characteristics.${charac}.value`]:value})}await this.addUniqueItems(data.data.skills,"archetype");const newArchetype=await super.createEmbeddedDocuments(embeddedName,[data],options);await this.update({"data.development.archetype":this.archetypePoints}),output.push(newArchetype)}break;case"occupation":if("character"===this.data.type){if(this.occupation){let resetOccupation=!1;if(await Dialog.confirm({title:game.i18n.localize("CoC7.ResetOccupation"),content:`<p>${game.i18n.format("CoC7.ResetOccupationHint",{name:this.name})}</p>`,yes:()=>{resetOccupation=!0},defaultYes:!1}),!resetOccupation)return;await this.resetOccupation()}const pointsDialogData={};pointsDialogData.characteristics=data.data.occupationSkillPoints;let total=0,optionalChar=!1;if(Object.entries(data.data.occupationSkillPoints).forEach((entry=>{const[key,value]=entry,char=this.getCharacteristic(key);pointsDialogData.characteristics[key].name=char.label,pointsDialogData.characteristics[key].value=char.value,value.selected&&(pointsDialogData.characteristics[key].total=char.value*Number(pointsDialogData.characteristics[key].multiplier),value.optional?optionalChar=!0:total+=pointsDialogData.characteristics[key].total)})),pointsDialogData.total=total,optionalChar){if(!await PointSelectDialog.create(pointsDialogData))return}for(let index=0;index<data.data.groups.length;index++){const dialogData={skills:[],type:"occupation"};if(dialogData.actorId=this.id,dialogData.optionsCount=Number(data.data.groups[index].options),dialogData.title=game.i18n.localize("CoC7.SkillSelectionWindow"),data.data.groups[index].skills.forEach((value=>{if(CoC7Item.isAnySpec(value))dialogData.skills.push(value);else{const skill=this.items.find((item=>item.name===value.name&&"skill"===item.type));if(!skill||!skill.data.data.flags?.occupation){data.data.skills.find((item=>item.name===value.name))||dialogData.skills.push(value)}}})),0!==dialogData.skills.length)if(dialogData.skills.forEach((skill=>{skill.data.specialization&&!skill.name.includes(skill.data.specialization)?skill.displayName=`${skill.data.specialization} (${skill.name})`:skill.displayName=skill.name})),dialogData.skills.length<=dialogData.optionsCount){ui.notifications.info(game.i18n.format("CoC7.InfoLessSkillThanOptions",{skillCount:dialogData.skills.length,optionsCount:dialogData.optionsCount}));const merged=CoC7Item.mergeOptionalSkills(data.data.skills,dialogData.skills);data.data.skills=merged}else{const selected=await SkillSelectDialog.create(dialogData);if(!selected)return;const merged=CoC7Item.mergeOptionalSkills(data.data.skills,selected);data.data.skills=merged}else ui.notifications.info(game.i18n.localize("CoC7.InfoAllSkillsAlreadySelected"))}if(Number(data.data.personal)){const dialogData={skills:[],type:"occupation"};if(dialogData.actorId=this.id,dialogData.optionsCount=Number(data.data.personal),dialogData.title=game.i18n.format("CoC7.SelectPersonalSkills",{number:Number(data.data.personal)}),this.skills.forEach((s=>{if(!s.data.data.flags.occupation&&!s.data.data.properties.noadjustments&&!s.data.data.properties.noxpgain){data.data.skills.find((item=>item.name===s.name))||dialogData.skills.push(s.data)}})),0!==dialogData.skills.length)if(dialogData.skills.forEach((skill=>{skill.data.specialization&&!skill.name.includes(skill.data.specialization)?skill.displayName=`${skill.data.specialization} (${skill.name})`:skill.displayName=skill.name})),dialogData.skills.length<=dialogData.optionsCount){ui.notifications.info(game.i18n.format("CoC7.InfoLessSkillThanOptions",{skillCount:dialogData.skills.length,optionsCount:dialogData.optionsCount}));const merged=CoC7Item.mergeOptionalSkills(data.data.skills,dialogData.skills);data.data.skills=merged}else{const selected=await SkillSelectDialog.create(dialogData);if(!selected)return;const merged=CoC7Item.mergeOptionalSkills(data.data.skills,selected);data.data.skills=merged}else ui.notifications.info(game.i18n.localize("CoC7.InfoAllSkillsAlreadySelected"))}await this.addUniqueItems(data.data.skills,"occupation"),await(this.creditRatingSkill?.setItemFlag("occupation")),await(this.creditRatingSkill?.update({"data.adjustments.occupation":Number(data.data.creditRating.min)}));const newOccupation=await super.createEmbeddedDocuments(embeddedName,[data],options);await this.update({"data.development.occupation":this.occupationPoints,"data.development.personal":this.personalPoints}),output.push(newOccupation)}break;default:output.push(await super.createEmbeddedDocuments(embeddedName,[data],options))}return output}getItemIdByName(itemName){let id=null;const name=itemName.match(/\(([^)]+)\)/)?itemName.match(/\(([^)]+)\)/)[1]:itemName;return this.items.forEach((value=>{CoC7Item.getNameWithoutSpec(value).toLowerCase()===name.toLowerCase()&&(id=value.id)})),id}getItemsByName(itemName){const itemList=[];return this.items.forEach((value=>{value.name===itemName&&itemList.push(value)})),itemList}getSkillsByName(skillName){const skillList=[],name=skillName.match(/\(([^)]+)\)/)?skillName.match(/\(([^)]+)\)/)[1]:skillName;return this.items.forEach((value=>{CoC7Item.getNameWithoutSpec(value).toLowerCase()===name.toLowerCase()&&"skill"===value.type&&skillList.push(value)})),skillList}parseFormula(formula){let parsedFormula=formula;for(const[key,value]of Object.entries(COC7.formula.actor))parsedFormula=parsedFormula.replace(key,value);return parsedFormula}parseCharacteristics(){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actor))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=getProperty(this,value.substring(5)));return parsed}static getCharacteristicDefinition(){const characteristics=[];for(const[key,value]of Object.entries(game.system.template.Actor.templates.characteristics.characteristics))characteristics.push({key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label)});return characteristics}getCharacteristic(charName){if(this.data.data.characteristics)for(const[key,value]of Object.entries(this.data.data.characteristics))if(game.i18n.localize(value.short).toLowerCase()===charName.toLowerCase()||game.i18n.localize(value.label).toLowerCase()===charName.toLowerCase()||key===charName.toLowerCase())return{key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label),value:value.value};return null}getAttribute(attribName){return["lck","luck",game.i18n.localize("CoC7.Luck").toLowerCase()].includes(attribName.toLowerCase())?{key:"lck",shortName:"luck",label:game.i18n.localize("CoC7.Luck"),value:this.data.data.attribs.lck.value}:["san",game.i18n.localize("CoC7.SAN").toLowerCase(),game.i18n.localize("CoC7.Sanity").toLowerCase()].includes(attribName.toLowerCase())?{key:"san",shortName:game.i18n.localize("CoC7.SAN"),label:game.i18n.localize("CoC7.Sanity"),value:this.data.data.attribs.san.value}:null}get occupation(){return this.items.filter((item=>"occupation"===item.type))[0]}get archetype(){return this.items.filter((item=>"archetype"===item.type))[0]}async resetOccupation(eraseOld=!0){if(eraseOld){const occupationSkill=this.items.filter((item=>item.getItemFlag("occupation")));for(let index=0;index<occupationSkill.length;index++)await occupationSkill[index].unsetItemFlag("occupation")}this.occupation&&await this.occupation.delete(),await this.update({"data.development.occupation":null})}async resetArchetype(eraseOld=!0){if(eraseOld){const archetypeSkill=this.items.filter((item=>item.getItemFlag("archetype")));for(let index=0;index<archetypeSkill.length;index++)await archetypeSkill[index].unsetItemFlag("archetype")}this.archetype&&await this.archetype.delete(),await this.update({"data.development.archetype":null})}get luck(){return parseInt(this.data.data.attribs.lck.value)}async setLuck(value){return await this.update({"data.attribs.lck.value":value})}async spendLuck(amount){return amount=parseInt(amount),this.luck>=amount&&this.setLuck(this.luck-amount)}get hp(){if(["vehicle"].includes(this.data.type)){if(null===this.data.data.attribs.build.current||void 0===this.data.data.attribs.build.current||""===this.data.data.attribs.build.current)return this.build;if(this.data.data.attribs.build.current>this.data.data.attribs.build.value)return this.build;const hp=parseInt(this.data.data.attribs.build.current);return isNaN(hp)?null:hp}return parseInt(this.data.data.attribs.hp.value)}get hpMax(){if(["vehicle"].includes(this.data.type))return this.build;if(this.data.data.attribs.hp.auto){if(null!=this.data.data.characteristics.siz.value&&null!=this.data.data.characteristics.con.value){const maxHP=Math.floor((this.data.data.characteristics.siz.value+this.data.data.characteristics.con.value)/10);return game.settings.get("CoC7","pulpRules")&&"character"===this.data.type?2*maxHP:maxHP}return this.data.data.attribs.hp.max?parseInt(this.data.data.attribs.hp.max):null}return parseInt(this.data.data.attribs.hp.max)}async setHp(value){return value<0&&(value=0),["vehicle"].includes(this.data.type)?(value>this.build&&(value=parseInt(this.build)),await this.update({"data.attribs.build.current":value})):(value>this.hpMax&&(value=parseInt(this.hpMax)),await this.update({"data.attribs.hp.value":value}))}async addUniqueItems(skillList,flag=null){for(const skill of skillList)if(CoC7Item.isAnySpec(skill))skill.data.flags||(skill.data.flags={}),flag&&(skill.data.flags[flag]=!0),await this.createEmbeddedDocuments("Item",[skill],{renderSheet:!1});else{const itemId=this.getItemIdByName(skill.name);if(itemId){if(flag){const item=this.items.get(itemId);await item.setItemFlag(flag)}}else flag&&(skill.data.flags||(skill.data.flags={}),skill.data.flags[flag]=!0),await this.createEmbeddedDocuments("Item",[skill],{renderSheet:!1})}}async addItems(itemList,flag=null){for(const item of itemList)flag&&(item.data.flags||(item.data.flags={}),item.data.flags[flag]=!0),await this.createEmbeddedDocuments("Item",[item],{renderSheet:!1})}async addUniqueItem(skill,flag=null){const itemId=this.getItemIdByName(skill.name);if(itemId){if(flag){const item=this.items.get(itemId);await item.setItemFlag(flag)}}else flag&&(skill.data.flags||(skill.data.flags={}),skill.data.flags[flag]=!0),await this.createEmbeddedDocuments("Item",[skill],{renderSheet:!1})}get mpMax(){return this.data.data.attribs.mp.auto?null!=this.data.data.characteristics.pow.value?Math.floor(this.data.data.characteristics.pow.value/5):null:parseInt(this.data.data.attribs.mp.max)}encounteredCreaturesSanData(creature){const i=this.encounteredCreaturesSanDataIndex(creature);return-1!==i?this.data.data.encounteredCreatures[i]:null}encounteredCreaturesSanDataIndex(creature){const sanData=CoC7Utilities.getCreatureSanData(creature);return this.data.data.encounteredCreatures.findIndex((cd=>cd.id===sanData?.id||cd.name.toLowerCase()===sanData.name?.toLocaleLowerCase()))}sanLostToCreature(creature){const sanData=this.encounteredCreaturesSanData(creature);if(sanData)return sanData.specie?Math.max(sanData.specie.totalLoss||0,sanData.totalLoss):sanData.totalLoss||0;{const creatureSanData=CoC7Utilities.getCreatureSanData(creature);if(creatureSanData.specie){const specieEncountered=this.encounteredCreaturesSanData(creatureSanData.specie);if(specieEncountered)return specieEncountered.totalLoss}return 0}}maxPossibleSanLossToCreature(creature){const sanData=this.encounteredCreaturesSanData(creature),creatureSanData=CoC7Utilities.getCreatureSanData(creature);if(sanData){let changes=!1;if(creatureSanData.sanLossMax!==sanData.sanLossMax&&(sanData.sanLossMax=creatureSanData.sanLossMax,changes=!0),creatureSanData.specie&&!sanData.specie&&(sanData.specie=creatureSanData.specie,changes=!0),creatureSanData.specie&&creatureSanData.specie.sanLossMax!==sanData.specie.sanLossMax&&(sanData.specie.sanLossMax=creatureSanData.specie.sanLossMax,changes=!0),sanData.totalLoss>sanData.sanLossMax&&(sanData.totalLoss=sanData.sanLossMax,changes=!0),sanData.specie&&sanData.specie.totalLoss>sanData.specie.sanLossMax&&(sanData.specie.totalLoss=sanData.specie.sanLossMax,changes=!0),changes){const encounteredCreaturesList=this.data.data.encounteredCreatures?duplicate(this.data.data.encounteredCreatures):[];encounteredCreaturesList[this.encounteredCreaturesSanDataIndex(creature)]=sanData,sanData.specie&&this._updateAllOfSameSpecie(encounteredCreaturesList,sanData.specie),this.update({"data.encounteredCreatures":encounteredCreaturesList})}return sanData.sanLossMax-sanData.totalLoss}if(creatureSanData){const sanLostToCreature=this.sanLostToCreature(creature);return Math.max(0,creatureSanData.sanLossMax-sanLostToCreature)}return 99}creatureEncountered(creature){return!!~this.encounteredCreaturesSanDataIndex(creature)}creatureSpecieEncountered(creature){const creatureSanData=CoC7Utilities.getCreatureSanData(creature);return creatureSanData.specie?!!~this.encounteredCreaturesSanDataIndex(creatureSanData.specie):this.creatureEncountered(creature)}_updateAllOfSameSpecie(encounteredCreaturesList,specieSanData){for(let index=0;index<encounteredCreaturesList.length;index++)if((encounteredCreaturesList[index].specie?.id===specieSanData.id||encounteredCreaturesList[index].specie?.name.toLowerCase()===specieSanData.name?.toLowerCase())&&encounteredCreaturesList[index].specie.totalLoss!==specieSanData.totalLoss){const delta=specieSanData.totalLoss-encounteredCreaturesList[index].specie.totalLoss;delta>0&&(encounteredCreaturesList[index].specie=specieSanData,encounteredCreaturesList[index].totalLoss+=delta,encounteredCreaturesList[index].totalLoss=Math.min(encounteredCreaturesList[index].totalLoss,encounteredCreaturesList[index].sanLossMax))}}_removeSpecie(encounteredCreaturesList,specieSanData){for(let index=0;index<encounteredCreaturesList.length;index++)if(encounteredCreaturesList[index].specie?.id===specieSanData.id||encounteredCreaturesList[index].specie?.name.toLowerCase()===specieSanData.name?.toLowerCase()){const previousSpecieLost=encounteredCreaturesList[index].specie.totalLoss;delete encounteredCreaturesList[index].specie,encounteredCreaturesList[index].totalLoss=encounteredCreaturesList[index].totalLoss-previousSpecieLost,encounteredCreaturesList[index].totalLoss<0&&(encounteredCreaturesList[index].totalLoss=0)}}async resetCreature(creature){const indexSanData=this.encounteredCreaturesSanDataIndex(creature);if(~indexSanData){const creatureSanData=CoC7Utilities.getCreatureSanData(creature),encounteredCreaturesList=this.data.data.encounteredCreatures?duplicate(this.data.data.encounteredCreatures):[];encounteredCreaturesList.splice(indexSanData,1),creatureSanData.totalLoss=0,creatureSanData.specie&&delete creatureSanData.specie,this._updateAllOfSameSpecie(encounteredCreaturesList,creatureSanData),await this.update({"data.encounteredCreatures":encounteredCreaturesList})}}async resetSpecie(creature){const encounteredCreaturesList=this.data.data.encounteredCreatures?duplicate(this.data.data.encounteredCreatures):[],creatureSanData=CoC7Utilities.getCreatureSanData(creature);if(!creatureSanData.specie)return;const indexSanData=this.encounteredCreaturesSanDataIndex(creatureSanData.specie);return~indexSanData&&encounteredCreaturesList.splice(indexSanData,1),this._removeSpecie(encounteredCreaturesList,creatureSanData.specie),await this.update({"data.encounteredCreatures":encounteredCreaturesList}),!1}async looseSanToCreature(sanLoss,creature){let exactSanLoss=sanLoss;const creatureSanData=CoC7Utilities.getCreatureSanData(creature),indexSanData=this.encounteredCreaturesSanDataIndex(creature);let indexSpeciesSanData=-1;creatureSanData.specie?.id&&(indexSpeciesSanData=this.encounteredCreaturesSanDataIndex(creatureSanData.specie.id)),-1===indexSpeciesSanData&&creatureSanData.specie?.name&&(indexSpeciesSanData=this.encounteredCreaturesSanDataIndex(creatureSanData.specie.name));const encounteredCreaturesList=this.data.data.encounteredCreatures?duplicate(this.data.data.encounteredCreatures):[];if(~indexSanData){const oldSanData=encounteredCreaturesList[indexSanData];let newSanData;creatureSanData&&(newSanData=creatureSanData,newSanData.totalLoss=oldSanData.totalLoss||0,newSanData.specie?newSanData.specie.totalLoss=oldSanData.specie?.totalLoss?oldSanData.specie.totalLoss:0:oldSanData.specie&&(newSanData.specie=oldSanData.specie)),newSanData.totalLoss=newSanData.totalLoss?newSanData.totalLoss+sanLoss:sanLoss,newSanData.totalLoss>newSanData.sanLossMax&&(exactSanLoss-=newSanData.totalLoss-newSanData.sanLossMax,newSanData.totalLoss=newSanData.sanLossMax),newSanData.specie&&(newSanData.specie.totalLoss=newSanData.specie.totalLoss?newSanData.specie.totalLoss+exactSanLoss:exactSanLoss,newSanData.specie.totalLoss>newSanData.specie.sanLossMax&&(newSanData.specie.totalLoss=newSanData.specie.sanLossMax),this._updateAllOfSameSpecie(encounteredCreaturesList,newSanData.specie)),encounteredCreaturesList[indexSanData]=newSanData,~indexSpeciesSanData&&newSanData.specie?encounteredCreaturesList[indexSpeciesSanData]=newSanData.specie:newSanData.specie&&encounteredCreaturesList.push(newSanData.specie)}else{const newSanData=creatureSanData;newSanData.totalLoss=0,newSanData.specie&&(~indexSpeciesSanData?(newSanData.specie.totalLoss=encounteredCreaturesList[indexSpeciesSanData].totalLoss,newSanData.totalLoss=newSanData.specie.totalLoss,newSanData.totalLoss>newSanData.sanLossMax&&(newSanData.totalLoss=newSanData.sanLossMax)):(newSanData.specie.totalLoss=0,newSanData.totalLoss=0)),newSanData.totalLoss=newSanData.totalLoss+sanLoss,newSanData.totalLoss>newSanData.sanLossMax&&(exactSanLoss-=newSanData.totalLoss-newSanData.sanLossMax,newSanData.totalLoss=newSanData.sanLossMax),newSanData.specie&&(newSanData.specie.totalLoss=newSanData.specie.totalLoss+exactSanLoss,newSanData.specie.totalLoss>newSanData.specie.sanLossMax&&(newSanData.specie.totalLoss=newSanData.specie.sanLossMax),~indexSpeciesSanData?encounteredCreaturesList[indexSpeciesSanData]=newSanData.specie:encounteredCreaturesList.push(newSanData.specie),this._updateAllOfSameSpecie(encounteredCreaturesList,newSanData.specie)),encounteredCreaturesList.push(newSanData)}return await this.setSan(this.san-exactSanLoss),await this.update({"data.encounteredCreatures":encounteredCreaturesList}),exactSanLoss}async looseSan(sanLoss,creature=null){creature?await this.looseSanToCreature(sanLoss,creature):await this.setSan(this.san-sanLoss)}get sanData(){return CoC7Utilities.getCreatureSanData(this)}sanLoss(checkPassed){return checkPassed?this.sanLossCheckPassed:this.sanLossCheckFailled}get sanLossCheckPassed(){return this.data.data.special?.sanLoss?.checkPassed}get sanLossCheckFailled(){return this.data.data.special?.sanLoss?.checkFailled}get sanLossMax(){return this.sanLossCheckFailled?isNaN(Number(this.sanLossCheckFailled))?new Roll(this.sanLossCheckFailled).evaluate({maximize:!0}).total:Number(this.sanLossCheckFailled):0}get sanLossMin(){return this.sanLossCheckPassed?isNaN(Number(this.sanLossCheckPassed))?new Roll(this.sanLossCheckPassed).evaluate({maximize:!0}).total:Number(this.sanLossCheckPassed):0}get dailySanLoss(){return this.data.data.attribs.san?.dailyLoss||0}get sanMax(){if(this.data.data.attribs)return this.data.data.attribs?.san?.auto?this.cthulhuMythos?Math.max(99-this.cthulhuMythos,0):99:parseInt(this.data.data.attribs.san.max)}get mp(){return parseInt(this.data.data.attribs.mp.value)}async setMp(value){return value<0&&(value=0),value>parseInt(this.mpMax)&&(value=parseInt(this.mpMax)),await this.update({"data.attribs.mp.value":value})}get san(){return parseInt(this.data.data.attribs.san.value)}get int(){return this.getCharacteristic("int")}get occupationPointsSpent(){let occupationPoints=0;for(const skill of this.skills)skill.data.data.adjustments?.occupation&&(occupationPoints+=skill.data.data.adjustments.occupation);return occupationPoints}get occupationPoints(){if(!this.occupation)return 0;let points=0;return Object.entries(this.occupation.data.data.occupationSkillPoints).forEach((entry=>{const[key,value]=entry,char=this.getCharacteristic(key);value.selected&&(points+=char.value*Number(value.multiplier))})),points}async resetOccupationPoints(){await this.update({"data.development.occupation":this.occupationPoints})}async resetArchetypePoints(){await this.update({"data.development.archetype":this.occupationPoints})}async resetPersonalPoints(){await this.update({"data.development.personal":this.personalPoints})}get archetypePointsSpent(){let archetypePoints=0;for(const skill of this.skills)skill.data.data.adjustments?.archetype&&(archetypePoints+=skill.data.data.adjustments.archetype);return archetypePoints}get archetypePoints(){return this.archetype?this.archetype.data.data.bonusPoints:0}get experiencePoints(){let experiencePoints=0;for(const skill of this.skills)skill.data.data.adjustments?.experience&&(experiencePoints+=skill.data.data.adjustments.experience);return experiencePoints}get personalPointsSpent(){let personalPoints=0;for(const skill of this.skills)skill.data.data.adjustments?.personal&&(personalPoints+=skill.data.data.adjustments.personal);return personalPoints}get personalPoints(){return 2*Number(this.data.data.characteristics.int.value)}get hasSkillFlaggedForExp(){for(const skill of this.skills)if(skill.data.data.flags?.developement)return!0;return!1}async setSan(value){value<0&&(value=0),value>this.sanMax&&(value=this.sanMax);const loss=parseInt(this.data.data.attribs.san.value)-value;if(loss>0){let totalLoss=parseInt(this.data.data.attribs.san.dailyLoss)?parseInt(this.data.data.attribs.san.dailyLoss):0;return totalLoss+=loss,loss>=5&&this.setStatus(COC7.status.tempoInsane),totalLoss>=Math.floor(this.san/5)&&this.setStatus(COC7.status.indefInsane),await this.update({"data.attribs.san.value":value,"data.attribs.san.dailyLoss":totalLoss})}return await this.update({"data.attribs.san.value":value})}async setAttribAuto(value,attrib){const updatedKey=`data.attribs.${attrib}.auto`;return await this.update({[updatedKey]:value})}async toggleAttribAuto(attrib){this.setAttribAuto(!this.data.data.attribs[attrib].auto,attrib)}get build(){if(["vehicle"].includes(this.data.type)){const build=parseInt(this.data.data.attribs.build.value);return isNaN(build)?null:build}if(!this.data.data.attribs)return null;if(!this.data.data.attribs.build)return null;if("auto"===this.data.data.attribs.build.value&&(this.data.data.attribs.build.auto=!0),this.data.data.attribs.build.auto){const sum=this.data.data.characteristics.str.value+this.data.data.characteristics.siz.value;if(sum>164)return Math.floor((sum-45)/80)+1;if(sum<65)return-2;if(sum<85)return-1;if(sum<125)return 0;if(sum<165)return 1}return this.data.data.attribs.build.value}get db(){if(["vehicle"].includes(this.data.type))return 0;if(!this.data.data.attribs)return null;if(!this.data.data.attribs.db)return null;if("auto"===this.data.data.attribs.db.value&&(this.data.data.attribs.db.auto=!0),this.data.data.attribs.db.auto){const sum=this.data.data.characteristics.str.value+this.data.data.characteristics.siz.value;if(sum>164)return`${Math.floor((sum-45)/80)}D6`;if(sum<65)return-2;if(sum<85)return-1;if(sum<125)return 0;if(sum<165)return"1D4"}return this.data.data.attribs.db.value}get mov(){if(["vehicle"].includes(this.data.type))return this.data.data.attribs.mov.value;if(!this.data.data.attribs)return null;if(!this.data.data.attribs.mov)return null;if("auto"===this.data.data.attribs.mov.value&&(this.data.data.attribs.mov.auto=!0),this.data.data.attribs.mov.auto){let MOV;if(this.data.data.characteristics.dex.value<this.data.data.characteristics.siz.value&&this.data.data.characteristics.str.value<this.data.data.characteristics.siz.value?MOV=7:this.data.data.characteristics.dex.value>=this.data.data.characteristics.siz.value||this.data.data.characteristics.str.value>=this.data.data.characteristics.siz.value?MOV=8:this.data.data.characteristics.dex.value>this.data.data.characteristics.siz.value&&this.data.data.characteristics.str.value>this.data.data.characteristics.siz.value&&(MOV=9),"creature"!==this.data.data.type&&(isNaN(parseInt(this.data.data.infos.age))||(MOV=parseInt(this.data.data.infos.age)>=40?MOV-Math.floor(parseInt(this.data.data.infos.age)/10)+3:MOV)),MOV>0)return MOV}return this.data.data.attribs.mov.value}get tokenId(){return this.token?`${this.token.scene._id}.${this.token.id}`:null}get locked(){return this.data.data.flags||(this.data.data.flags={},this.data.data.flags.locked=!0,this.update({"data.flags":{}}),this.update({"data.flags.locked":!1})),this.data.data.flags.locked}getItemsFromName(name){return this.items.filter((i=>i.name===name))}set locked(value){this.update({"data.flags.locked":value})}async toggleActorFlag(flagName){const flagValue=!this.data.data.flags[flagName],name=`data.flags.${flagName}`;await this.update({[name]:flagValue})}async attributeCheck(attributeName,fastForward=!1,options={}){const attrib=this.getAttribute(attributeName.toLowerCase());if(!attrib)return ui.notifications.error(game.i18n.format("CoC7.ErrorNotFound",{missing:attributeName})),null;const check=new CoC7Check;if(options.modifier&&(check.diceModifier=Number(options.modifier)),options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.rollAttribute(attrib.key),check.toMessage()}async characteristicCheck(characteristicName,fastForward=!1,options={}){const char=this.getCharacteristic(characteristicName);if(!char)return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotFoundForActor",{missing:characteristicName,actor:this.name}));const check=new CoC7Check;if(options.modifier&&(check.diceModifier=Number(options.modifier)),options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){options.displayName=char.label;const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.rollCharacteristic(char.key),check.toMessage()}async skillCheck(skillData,fastForward,options={}){let skill=this.getSkillsByName(skillData.name?skillData.name:skillData);if(!skill.length){let item=null;if(skillData.pack){const pack=game.packs.get(skillData.pack);if("Item"!==pack.metadata.entity)return;item=await pack.getEntity(skillData.id)}else skillData.id&&(item=game.items.get(skillData.id));if(!item){const check=new CoC7Check;check._rawValue="?",await check.roll(),check.toMessage()}if(!item)return ui.notifications.warn(game.i18n.format("CoC7.NoSkill")+game.i18n.format("CoC7.ErrorNotFoundForActor",{missing:skillData.name?skillData.name:skillData,actor:this.name}));let create=!1;if(await Dialog.confirm({title:`${game.i18n.localize("CoC7.AddWeapon")}`,content:`<p>${game.i18n.format("CoC7.AddWeapontHint",{weapon:skillData.name,actor:this.name})}</p>`,yes:()=>{create=!0}}),!0!==create)return;if(await this.createEmbeddedDocuments("Item",[duplicate(item.data)]),skill=this.getSkillsByName(item.name),!skill.length)return;if(game.user.isGM){const skillValue=await class{static async create(name=null,baseValue=null){const html=await renderTemplate("systems/CoC7/templates/apps/skill-value.html",{base:baseValue,name});return new Promise((resolve=>{let formData=null;new Dialog({title:game.i18n.format("CoC7.SkillValue",{name}),content:html,buttons:{validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#skill-select-form")),resolve(formData))}},default:"validate",close:()=>resolve(!1)}).render(!0)}))}}.create(skill[0].name,skill[0].base),value=Number(skillValue.get("base-value"));await skill[0].updateValue(value)}}const check=new CoC7Check;if(void 0!==options.modifier&&(check.diceModifier=Number(options.modifier)),void 0!==options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,check.skill=skill[0].id,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.roll(),check.toMessage()}async weaponCheck(weaponData,fastForward=!1){const itemId=weaponData.id;let weapon;if(weapon=this.items.get(itemId),!weapon){let weapons=this.getItemsFromName(weaponData.name);if(0===weapons.length){if(!game.user.isGM)return void ui.notifications.warn(`Actor ${this.name} has no weapon named ${weaponData.name}`);{let item=null;const pack=weaponData.pack?game.packs.get(weaponData.pack):null;if(pack){if("Item"!==pack.metadata.entity)return;item=await pack.getEntity(weaponData.id)}else weaponData.id&&(item=game.items.get(weaponData.id));if(!item)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroNoItemFound"));let create=!1;if(await Dialog.confirm({title:`${game.i18n.localize("CoC7.AddWeapon")}`,content:`<p>${game.i18n.format("CoC7.AddWeapontHint",{weapon:weaponData.name,actor:this.name})}</p>`,yes:()=>{create=!0}}),!0!==create)return;{const mainSkill=item.data?.data?.skill?.main?.name;if(mainSkill){let skill=this.getSkillsByName(mainSkill)[0];if(!skill){const name=mainSkill.match(/\(([^)]+)\)/)?mainSkill.match(/\(([^)]+)\)/)[1]:mainSkill;skill=await this.createWeaponSkill(name,!!item.data.data.properties?.rngd)}skill&&(item.data.data.skill.main.id=skill._id)}const secondSkill=item.data?.data?.skill?.alternativ?.name;if(secondSkill){let skill=this.getSkillsByName(secondSkill)[0];if(!skill){const name=mainSkill.match(/\(([^)]+)\)/)?mainSkill.match(/\(([^)]+)\)/)[1]:mainSkill;skill=await this.createWeaponSkill(name,!!item.data.data.properties?.rngd)}skill&&(item.data.data.skill.alternativ.id=skill._id)}await this.createEmbeddedDocuments("Item",[duplicate(item.data)])}if(weapons=this.getItemsFromName(item.name),!weapons)return;await weapons[0].reload()}}else weapons.length>1&&ui.notifications.warn(`Actor ${this.name} has more than one weapon named ${weaponData.name}. The first found will be used`);weapon=weapons[0]}if(!weapon.data.data.properties.rngd){game.user.targets.size>1&&ui.notifications.warn(game.i18n.localize("CoC7.WarnTooManyTarget"));new CoC7MeleeInitiator(this.tokenKey,weapon.id,fastForward).createChatCard()}if(weapon.data.data.properties.rngd){new CoC7RangeInitiator(this.tokenKey,weapon.id,fastForward).createChatCard()}}async rollInitiative(hasGun=!1){switch(game.settings.get("CoC7","initiativeRule")){case"optional":{const roll=new CoC7Check(this.actorKey);return roll.denyPush=!0,roll.denyLuck=!0,roll.denyBlindTampering=!0,roll.hideDice=!1===game.settings.get("CoC7","displayInitDices"),roll.flavor="Initiative roll",await roll.rollCharacteristic("dex",hasGun?1:0),roll.toMessage(),roll.successLevel+this.data.data.characteristics.dex.value/100}default:return hasGun?this.data.data.characteristics.dex.value+50:this.data.data.characteristics.dex.value}}getActorFlag(flagName){return this.data.data.flags?!!this.data.data.flags[flagName]&&this.data.data.flags[flagName]:(this.data.data.flags={},this.data.data.flags.locked=!0,this.update({"data.flags":{}}),!1)}async setActorFlag(flagName){await this.update({[`data.flags.${flagName}`]:!0})}async unsetActorFlag(flagName){await this.update({[`data.flags.${flagName}`]:!1})}getWeaponSkills(itemId){const weapon=this.items.get(itemId);if("weapon"!==weapon.data.type)return null;const skills=[];return weapon.data.data.skill.main.id&&skills.push(this.items.get(weapon.data.data.skill.main.id)),weapon.usesAlternativeSkill&&weapon.data.data.skill.alternativ.id&&skills.push(this.items.get(weapon.data.data.skill.alternativ.id)),skills}find(name){const item=this.items.get(name);if(item)return{type:"item",value:item};const matches=/\(([^)]+)\)/.exec(name);let shortName=null;matches&&matches.length&&(shortName=matches[1]);const skill=this.skills.filter((s=>!!s.name&&(s.name.toLocaleLowerCase().replace(/\s/g,"")===name.toLocaleLowerCase().replace(/\s/g,"")||s.sName.toLocaleLowerCase().replace(/\s/g,"")===name.toLocaleLowerCase().replace(/\s/g,"")||s.sName.toLocaleLowerCase().replace(/\s/g,"")===shortName?.toLocaleLowerCase().replace(/\s/g,""))));if(skill.length)return{type:"item",value:skill[0]};const charKey=["str","con","siz","dex","app","int","pow","edu"];for(let i=0;i<charKey.length;i++){const char=this.getCharacteristic(charKey[i]);if(char){if(char.key?.toLocaleLowerCase()===name.toLowerCase())return{type:"characteristic",value:char};if(char.shortName?.toLocaleLowerCase()===name.toLowerCase())return{type:"characteristic",value:char};if(char.label?.toLocaleLowerCase()===name.toLowerCase())return{type:"characteristic",value:char}}}const attribKey=["lck","san"];for(let i=0;i<attribKey.length;i++){const attr=this.getAttribute(attribKey[i]);if(attr){if(attr.key?.toLocaleLowerCase()===name.toLowerCase())return{type:"attribute",value:attr};if(attr.shortName?.toLocaleLowerCase()===name.toLowerCase())return{type:"attribute",value:attr};if(attr.label?.toLocaleLowerCase()===name.toLowerCase())return{type:"attribute",value:attr}}}}get pilotSkills(){return this.skills.filter((s=>!!s.data.data.specialization&&s.data.data.specialization.length&&s.data.data.specialization?.toLocaleLowerCase()===game.i18n.localize("CoC7.PilotSpecializationName")?.toLocaleLowerCase()))}get driveSkills(){return this.skills.filter((s=>!!s.data.data.specialization&&s.data.data.specialization.length&&s.data.data.specialization?.toLocaleLowerCase()===game.i18n.localize("CoC7.DriveSpecializationName")?.toLocaleLowerCase()))}get tokenKey(){return this.sheet.token?`${this.sheet.token.parent.id}.${this.sheet.token.id}`:this.id}get actorKey(){return this.data.token.actorLink?this.id:this.tokenKey}static getActorFromKey(key){if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;return new Token(tokenData).actor}}return game.actors.get(key)||null}async rollCharacteristicsValue(){const characteristics={};for(const[key,value]of Object.entries(this.data.data.characteristics))if(value.formula&&!value.formula.startsWith("@")){const r=new Roll(value.formula);await r.roll({async:!0}),r.total&&(characteristics[`data.characteristics.${key}.value`]=Math.floor(r.total))}await this.update(characteristics),await this.reportCharactedriticsValue()}async averageCharacteristicsValue(){const characteristics={};for(const[key,value]of Object.entries(this.data.data.characteristics))if(value.formula&&!value.formula.startsWith("@")){const max=new Roll(value.formula).evaluate({maximize:!0}).total,min=new Roll(value.formula).evaluate({minimize:!0}).total,average=Math.floor((max+min)/2),charValue=average%5==0?average:10*Math.round(average/10);charValue&&(characteristics[`data.characteristics.${key}.value`]=charValue)}await this.update(characteristics),await this.reportCharactedriticsValue()}async reportCharactedriticsValue(){const characteristics={};for(const[key,value]of Object.entries(this.data.data.characteristics))if(value.formula&&value.formula.startsWith("@")){let charValue;try{charValue=new Roll(value.formula,this.parseCharacteristics()).evaluate({maximize:!0}).total}catch(err){charValue=null}charValue&&(characteristics[`data.characteristics.${key}.value`]=charValue)}await this.update(characteristics)}async setCharacteristic(name,value){const characteristic={},charValue=isNaN(parseInt(value))?null:parseInt(value);if(characteristic[name]=charValue,!charValue&&value.startsWith("@")){characteristic[name.replace(".value",".formula")]=value}await this.update(characteristic),await this.reportCharactedriticsValue()}async developementPhase(fastForward=!1){const failure=[],success=[],title=game.i18n.localize("CoC7.RollAll4Dev");let message='<p class="chat-card">';for(const item of this.items)if("skill"===item.type&&item.developementFlag){const die=await new Die({faces:100}).evaluate({async:!0}),skillValue=item.value;let augment=null,skillMasteringMessage=null;if(die.total>skillValue||die.total>=95){const augmentDie=await new Die({faces:10}).evaluate({async:!0});if(success.push(item.id),skillValue<90&&skillValue+augmentDie.total>=90){const augmentSANDie=await new Die({faces:6,number:2}).evaluate({async:!0}),sanGained=augmentSANDie.total,sanGainedMessage=`Gained 2d6 (${augmentSANDie.values[0]} + ${augmentSANDie.values[1]} = ${sanGained}) SAN`;console.debug(sanGainedMessage),skillMasteringMessage=`<span class="upgrade-success">${game.i18n.format("CoC7.SanGained",{results:`${augmentSANDie.values[0]} + ${augmentSANDie.values[1]}`,sanGained,skill:item.data.name,skillValue:skillValue+augmentDie.total})}</span><br>`,await this.setSan(this.san+sanGained)}augment+=augmentDie.total,message+=`<span class="upgrade-success">${game.i18n.format("CoC7.DevSuccess",{item:item.data.name,die:die.total,score:item.value,augment:augmentDie.total})}</span><br>`,null!==skillMasteringMessage&&(message+=skillMasteringMessage),await item.increaseExperience(augment)}else message+=`<span class="upgrade-failed">${game.i18n.format("CoC7.DevFailure",{item:item.data.name,die:die.total,score:item.value})}</span><br>`,failure.push(item.id);await item.unflagForDevelopement()}if(!fastForward){message+="</p>";const speaker={actor:this.actor};await chatHelper.createMessage(title,message,{speaker})}return{failure,success}}async developLuck(fastForward=!1){const luck=this.data.data.attribs.lck,upgradeRoll=new Roll("1D100"),title=game.i18n.localize("CoC7.RollLuck4Dev");let message='<p class="chat-card">';if(await upgradeRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(upgradeRoll),upgradeRoll.total>luck.value){const augmentRoll=new Roll("1D10");if(await augmentRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(augmentRoll),luck.value+augmentRoll.total<=99)await this.update({"data.attribs.lck.value":this.data.data.attribs.lck.value+augmentRoll.total}),message+=`<span class="upgrade-success">${game.i18n.format("CoC7.LuckIncreased",{die:upgradeRoll.total,score:luck.value,augment:augmentRoll.total})}</span>`;else{let correctedValue;for(let i=1;i<=10;i++)if(luck.value+augmentRoll.total-i<=99){correctedValue=augmentRoll.total-i;break}await this.update({"data.attribs.lck.value":this.data.data.attribs.lck.value+correctedValue}),message+=`<span class="upgrade-success">${game.i18n.format("CoC7.LuckIncreased",{die:upgradeRoll.total,score:luck.value,augment:correctedValue})}</span>`}}else message+=`<span class="upgrade-failed">${game.i18n.format("CoC7.LuckNotIncreased",{die:upgradeRoll.total,score:luck.value})}</span>`;if(!fastForward){message+="</p>";const speaker={actor:this.actor};await chatHelper.createMessage(title,message,{speaker})}}async developSkill(skillId,fastForward=!1){const skill=this.items.get(skillId);if(!skill)return;let title="",message="";const upgradeRoll=new Roll("1D100");if(await upgradeRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(upgradeRoll),upgradeRoll.total>skill.value||upgradeRoll.total>=95){const augmentRoll=new Roll("1D10");await augmentRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(augmentRoll),message=game.i18n.format("CoC7.DevSuccessDetails",{item:skill.name,augment:augmentRoll.total}),title=game.i18n.format("CoC7.DevRollTitle",{item:skill.name,die:upgradeRoll.total,score:skill.value}),await skill.increaseExperience(augmentRoll.total)}else title=game.i18n.format("CoC7.DevRollTitle",{item:skill.name,die:upgradeRoll.total,score:skill.value}),message=game.i18n.format("CoC7.DevFailureDetails",{item:skill.name});const speaker={actor:this._id};await chatHelper.createMessage(title,message,{speaker}),await skill.unflagForDevelopement()}async toggleStatus(statusName){let effectEffect,statusValue=this.data.data.status[statusName]?.value;if("boolean"!=typeof statusValue&&(statusValue="false"===statusValue),COC7.status.criticalWounds!==statusName)switch(statusName){case"dead":statusValue?(await this.unsetStatus("dead"),effectEffect=await this.hasActiveEffect("dead"),effectEffect.length>0&&effectEffect.forEach((effect=>effect.delete()))):this.fallDead();break;case"dying":statusValue?(await this.unsetStatus("dying"),effectEffect=await this.hasActiveEffect("dying"),effectEffect.length>0&&effectEffect.forEach((effect=>effect.delete()))):this.fallDying();break;case"prone":statusValue?(await this.unsetStatus("prone"),effectEffect=await this.hasActiveEffect("prone"),effectEffect.length>0&&effectEffect.forEach((effect=>effect.delete()))):this.fallProne();break;case"unconscious":statusValue?(await this.unsetStatus("unconscious"),effectEffect=await this.hasActiveEffect("unconscious"),effectEffect.length>0&&effectEffect.forEach((effect=>effect.delete()))):this.fallUnconscious()}else statusValue?await this.cureMajorWound():await this.inflictMajorWound()}async hasActiveEffect(effectLabel){return this.effects.map((effect=>effect)).filter((effect=>effect.data.label===effectLabel))}async toggleEffect(effectName){switch(effectName){case"boutOfMadness":this.boutOfMadness?await this.boutOfMadness.delete():await super.createEmbeddedDocuments("ActiveEffect",[{label:game.i18n.localize("CoC7.BoutOfMadnessName"),icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/hanging-spider.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},flags:{CoC7:{madness:!0,realTime:!0}},disabled:!1}]);break;case"insanity":this.insanity?this.insanity.delete():await super.createEmbeddedDocuments("ActiveEffect",[{label:game.i18n.localize("CoC7.InsanityName"),icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/tentacles-skull.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},flags:{CoC7:{madness:!0,indefinite:!0}},disabled:!1}])}}getStatus(statusName){if(!this.data.data.status)return!1;let statusValue=this.data.data.status[statusName]?.value;return void 0!==statusValue&&("boolean"!=typeof statusValue&&(statusValue="false"===statusValue),statusValue)}async setStatus(statusName){await this.update({[`data.status.${statusName}.value`]:!0})}async unsetStatus(statusName){await this.update({[`data.status.${statusName}.value`]:!1})}async resetCounter(counter){await this.update({[counter]:0})}async setOneFifthSanity(oneFifthSanity){await this.update({"data.attribs.san.oneFifthSanity":oneFifthSanity})}get fightingSkills(){const skillList=[];return this.items.forEach((value=>{"skill"===value.type&&value.data.data.properties.fighting&&skillList.push(value)})),skillList.sort(((a,b)=>a.name.localeCompare(b.name))),skillList}get closeCombatWeapons(){const weaponList=[];return this.items.forEach((value=>{if("weapon"===value.type&&!value.data.data.properties.rngd){const skill=this.items.get(value.data.data.skill.main.id);value.data.data.skill.main.value=skill?skill.value:0,weaponList.push(value)}})),weaponList.sort(((a,b)=>a.name.localeCompare(b.name))),weaponList}get firearmSkills(){const skillList=[];return this.items.forEach((value=>{"skill"===value.type&&value.data.data.properties.firearm&&skillList.push(value)})),skillList.sort(((a,b)=>a.name.localeCompare(b.name))),skillList}get user(){return game.users.find((user=>!(!user.character||user.character.id!==this.id)))}get dodgeSkill(){const skillList=this.getSkillsByName(game.i18n.localize(COC7.dodgeSkillName));return 0!==skillList.length?skillList[0]:null}get creditRatingSkill(){const skillList=this.getSkillsByName(game.i18n.localize(COC7.creditRatingSkillName));return 0!==skillList.length?skillList[0]:null}get cthulhuMythosSkill(){const skillList=this.getSkillsByName(game.i18n.localize(COC7.CthulhuMythosName));return 0!==skillList.length?skillList[0]:null}get cthulhuMythos(){const CM=this.cthulhuMythosSkill;if(CM){const value=CM.value;return value||parseInt(CM.data.data.value)}return 0}get mythosInsanityExperienced(){return this.getFlag("CoC7","mythosInsanityExperienced")||!1}async experienceFirstMythosInsanity(){await this.setFlag("CoC7","mythosInsanityExperienced",!0)}get creditRating(){const CR=this.creditRatingSkill;if(CR){const value=CR.value;return value||parseInt(CR.data.data.value)}return 0}get spendingLevel(){const CR=this.creditRating;return CR>=99?5e3:CR>=90?250:CR>=50?50:CR>=10?10:CR>=1?2:.5}get cash(){const CR=this.creditRating;return CR>=99?5e4:CR>=90?20*CR:CR>=50?5*CR:CR>=10?2*CR:CR>=1?CR:.5}get assets(){const CR=this.creditRating;return CR>=99?5e6:CR>=90?2e3*CR:CR>=50?500*CR:CR>=10?50*CR:CR>=1?10*CR:0}get skills(){const skillList=[];return this.items.forEach((value=>{"skill"===value.type&&skillList.push(value)})),skillList.sort(((a,b)=>a.name.localeCompare(b.name))),skillList}get owners(){return game.users.filter((u=>this.testUserPermission(u,"OWNER")&&!u.isGM))}get player(){return this.owners.filter((u=>u.character?.id===this.id))}get characterUser(){return game.users.contents.filter((u=>u.character?.id===this.id))[0]||null}async setHealthStatusManually(event){if(event.preventDefault(),event.originalEvent){const healthBefore=parseInt(event.originalEvent.currentTarget.defaultValue),healthAfter=parseInt(event.originalEvent.currentTarget.value);let damageTaken;return healthAfter>healthBefore?await this.setHp(healthAfter):(damageTaken=healthAfter<0?Math.abs(healthAfter):healthBefore-healthAfter,this.render(!0),await this.dealDamage(damageTaken,{ignoreArmor:!0}))}}async dealDamage(amount,options={}){let total=parseInt(amount);if(this.data.data.attribs.armor.value&&!options.ignoreArmor){let armorValue;if(CoC7Utilities.isFormula(this.data.data.attribs.armor.value)){armorValue=(await new Roll(this.data.data.attribs.armor.value).roll({async:!0})).total}else isNaN(Number(this.data.data.attribs.armor.value))?(ui.notifications.warn(`Unable to process armor value :${this.data.data.attribs.armor.value}. Ignoring armor`),armorValue=0):armorValue=Number(this.data.data.attribs.armor.value);total-=armorValue}return total<=0?0:(await this.setHp(this.hp-total),total>=this.hpMax?await this.fallDead():(total>=Math.floor(this.hpMax/2)&&await this.inflictMajorWound(),0===this.hp&&(this.getStatus(COC7.status.unconscious)||await this.fallUnconscious(),this.majorWound&&this.fallDying())),total)}async inflictMajorWound(){if(!this.majorWound){await this.setStatus(COC7.status.criticalWounds);0===(await this.hasActiveEffect("criticalWounds")).length&&await super.createEmbeddedDocuments("ActiveEffect",[{label:"criticalWounds",icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/arm-sling.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},disabled:!1}])}if(await this.fallProne(),!this.getStatus(COC7.status.unconscious)){new CoC7ConCheck(this.isToken?this.tokenKey:this.id).toMessage()}}async cureMajorWound(){await this.unsetStatus(COC7.status.criticalWounds);const criticalWoundsEffect=await this.hasActiveEffect("criticalWounds");criticalWoundsEffect.length>0&&criticalWoundsEffect.forEach((effect=>effect.delete()))}async fallProne(){await this.setStatus(COC7.status.prone);0===(await this.hasActiveEffect("prone")).length&&await super.createEmbeddedDocuments("ActiveEffect",[{label:"prone",icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/falling.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},disabled:!1}])}async fallUnconscious(){await this.setStatus(COC7.status.unconscious);0===(await this.hasActiveEffect("unconscious")).length&&await super.createEmbeddedDocuments("ActiveEffect",[{label:"unconscious",icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/knocked-out-stars.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},disabled:!1}])}async fallDying(){await this.setStatus(COC7.status.dying);0===(await this.hasActiveEffect("dying")).length&&await super.createEmbeddedDocuments("ActiveEffect",[{label:"dying",icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/heart-beats.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},disabled:!1}])}async fallDead(){await this.inflictMajorWound(),await this.unsetStatus(COC7.status.dying),await this.fallUnconscious(),await this.setStatus(COC7.status.dead);0===(await this.hasActiveEffect("dead")).length&&await super.createEmbeddedDocuments("ActiveEffect",[{label:"dead",icon:game.settings.get("CoC7","enableStatusIcons")?"systems/CoC7/assets/icons/tombstone.svg":null,origin:this.uuid,duration:{seconds:void 0,rounds:void 0,turns:1},disabled:!1}]);const dyingEffect=await this.hasActiveEffect("dying");!this.dying&&dyingEffect.length>0&&dyingEffect.forEach((effect=>effect.delete()))}get majorWound(){return this.getStatus(COC7.status.criticalWounds)}get dying(){return this.getStatus(COC7.status.dying)}get unconscious(){return this.getStatus(COC7.status.unconscious)}get dead(){return this.getStatus(COC7.status.dead)}get prone(){return this.getStatus(COC7.status.prone)}}class CoC7Link{constructor(){this._linkData={type:CoC7Link.LINK_TYPE.CHECK,check:CoC7Link.CHECK_TYPE.SKILL}}static async fromData(linkData){const link=new CoC7Link;return await link.setData(linkData),link}static get TYPE_KEYWORD(){return["check","sanloss","item"]}static get CHARAC_KEYWORD(){return["charac","char","characteristic","characteristics"]}static get ATTRIB_KEYWORD(){return["attributes","attribute","attrib","attribs"]}static get SKILL_KEYWORD(){return["skill"]}static get LINK_TYPE(){return{CHECK:1,SANLOSS:2,ITEM:3}}static get CHECK_TYPE(){return{CHARACTERISTIC:1,ATTRIBUTE:2,SKILL:3}}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get data(){const data=duplicate(this._linkData);return data.isCheck=this.is.check,data.isSanloss=this.is.sanloss,data.isItem=this.is.item,data}async fetchItem(){if(this._linkData.validItem=!1,!this._linkData.fromCompendium&&!this._linkData.fromDirectory)return this._item=void 0,!1;if(this._linkData.fromCompendium){const pack=game.packs.get(this._linkData.pack);if(!pack)return!1;if("Item"!==pack.metadata.entity)return;this._item=await pack.getEntity(this._linkData.id)}if(this._linkData.fromDirectory&&(this._item=game.items.get(this._linkData.id)),this._linkData.skillName=null,this._linkData.itemName=null,this._item){if("weapon"===this._item.data.type)return this.type=CoC7Link.LINK_TYPE.ITEM,this._linkData.itemName=this._item.data.name,this._linkData.validItem=!0,!0;if("skill"===this._item.data.type)return this.type=CoC7Link.LINK_TYPE.CHECK,this.check=CoC7Link.CHECK_TYPE.SKILL,this._linkData.skillName=this._item.data.name,this._linkData.validItem=!0,!0}return!1}async setData(x){this._linkData.fromCompendium=!1,this._linkData.fromDirectory=!1,this.hasPlayerOwner=!1,x.hasPlayerOwner&&(this.hasPlayerOwner=!0,this.actorKey=x.actorKey),x.pack&&x.id&&(this._linkData.fromCompendium=!0,this._linkData.pack=x.pack,this._linkData.id=x.id),x.id&&!x.pack&&(this._linkData.fromDirectory=!0,this._linkData.id=x.id);if(!await this.fetchItem()&&(x.check?this.type=x.check:this.type=CoC7Link.LINK_TYPE.CHECK,x.type?this.check=x.type:this.type&&(this.check=CoC7Link.CHECK_TYPE.CHARACTERISTIC),x.name))if(this._linkData.itemName=null,this._linkData.skillName=null,this._linkData.characteristicKey=null,this._linkData.attributeKey=null,this.is.check)switch(this.check){case CoC7Link.CHECK_TYPE.SKILL:this._linkData.skillName=x.name;break;case CoC7Link.CHECK_TYPE.CHARACTERISTIC:this._linkData.characteristicKey=x.name;break;case CoC7Link.CHECK_TYPE.ATTRIBUTE:this._linkData.attributeKey=x.name}else this.is.item&&(this._linkData.itemName=x.name);!x.difficulty&&isNaN(Number(x.difficulty))||(this._linkData.difficulty=Number(x.difficulty)),!x.modifier&&isNaN(Number(x.modifier))||(this._linkData.modifier=Number(x.modifier)),void 0===x.difficulty&&void 0===x.modifier||(this._linkData.forceModifiers=!0),x.forceModifiers&&(this._linkData.forceModifiers=!0),"true"!==x.displayName&&!0!==x.displayName||(this._linkData.displayName=!0),x.label&&(this._linkData.hasLabel=!0,this._linkData.label=x.label),x.icon&&(this._linkData.hasIcon=!0,this._linkData.icon=x.icon),"true"!==x.blind&&!0!==x.blind||(this._linkData.blind=!0),this._linkData.sanMin=x.sanMin,this._linkData.sanMax=x.sanMax}get type(){return this._linkData.type}get checkType(){switch(this.check){case CoC7Link.CHECK_TYPE.CHARACTERISTIC:return"characteristic";case CoC7Link.CHECK_TYPE.ATTRIBUTE:return"attribute";case CoC7Link.CHECK_TYPE.SKILL:return"skill";default:return}}set type(x){if(isNaN(Number(x)))switch(x.toLowerCase()){case"check":this._linkData.type=CoC7Link.LINK_TYPE.CHECK;break;case"sanloss":this._linkData.type=CoC7Link.LINK_TYPE.SANLOSS;break;case"item":this._linkData.type=CoC7Link.LINK_TYPE.ITEM;break;default:this._linkData.type=void 0}else this._linkData.type=x}get check(){return isNaN(Number(this._linkData.check))?void 0:Number(this._linkData.check)}set check(x){isNaN(Number(x))?(this._linkData.check=void 0,CoC7Link.CHARAC_KEYWORD.includes(x)&&(this.type=CoC7Link.LINK_TYPE.CHECK,this._linkData.check=CoC7Link.CHECK_TYPE.CHARACTERISTIC),CoC7Link.ATTRIB_KEYWORD.includes(x)&&(this.type=CoC7Link.LINK_TYPE.CHECK,this._linkData.check=CoC7Link.CHECK_TYPE.ATTRIBUTE),CoC7Link.SKILL_KEYWORD.includes(x)&&(this.type=CoC7Link.LINK_TYPE.CHECK,this._linkData.check=CoC7Link.CHECK_TYPE.SKILL)):this._linkData.check=Number(x)}get name(){if(this.is.check)switch(this.check){case CoC7Link.CHECK_TYPE.CHARACTERISTIC:return this._linkData.characteristicKey;case CoC7Link.CHECK_TYPE.ATTRIBUTE:return this._linkData.attributeKey;case CoC7Link.CHECK_TYPE.SKILL:return this._linkData.skillName;default:return}else if(this.is.item)return this._linkData.itemName}set name(x){if(this.is.check)switch(this.check){case CoC7Link.CHECK_TYPE.CHARACTERISTIC:this._linkData.characteristicKey=x;break;case CoC7Link.CHECK_TYPE.ATTRIBUTE:this._linkData.attributeKey=x;break;case CoC7Link.CHECK_TYPE.SKILL:this._linkData.skillName=x}else this.is.item&&(this._linkData.itemName=x)}get is(){const link=this;return{get check(){return link.type===CoC7Link.LINK_TYPE.CHECK},set check(x){!0===x&&(link.type=CoC7Link.LINK_TYPE.CHECK)},get sanloss(){return link.type===CoC7Link.LINK_TYPE.SANLOSS},set sanloss(x){!0===x&&(link.type=CoC7Link.LINK_TYPE.SANLOSS)},get item(){return link.type===CoC7Link.LINK_TYPE.ITEM},set item(x){!0===x&&(link.type=CoC7Link.LINK_TYPE.ITEM)}}}async update(updateData){this._linkData=mergeObject(this._linkData,updateData),(this._linkData.fromDirectory||this._linkData.fromCompendium)&&await this.fetchItem()}async updateFromLink(linkData){await this.setData(linkData),(this._linkData.fromDirectory||this._linkData.fromCompendium)&&await this.fetchItem()}get link(){if(!this.type)return null;switch(this.type){case CoC7Link.LINK_TYPE.CHECK:{if(!this.type||!this.name)return null;let options=`${this._linkData.blind?"blind,":""}type:${this.checkType},name:${this.name}`;void 0!==this._linkData.difficulty&&(options+=`,difficulty:${this._linkData.difficulty}`),void 0!==this._linkData.modifier&&(options+=`,modifier:${this._linkData.modifier}`),this._linkData.icon&&(options+=`,icon:${this._linkData.icon}`),this._linkData.fromCompendium&&(options+=`,pack:${this._linkData.pack}`),(this._linkData.fromCompendium||this._linkData.fromDirectory)&&(options+=`,id:${this._linkData.id}`);let link=`@coc7.check[${options}]`;return this._linkData.hasLabel&&this._linkData.label?link+=`{${this._linkData.label}}`:this.name&&(link+=`{${this.name}}`),link}case CoC7Link.LINK_TYPE.SANLOSS:{if(!this._linkData.sanMax||!this._linkData.sanMin)return null;let options=`sanMax:${this._linkData.sanMax},sanMin:${this._linkData.sanMin}`;this._linkData.difficulty&&(options+=`,difficulty:${this._linkData.difficulty}`),this._linkData.modifier&&(options+=`,modifier:${this._linkData.modifier}`),this._linkData.icon&&(options+=`,icon:${this._linkData.icon}`);let link=`@coc7.sanloss[${options}]`;return this._linkData.hasLabel&&(link+=`{${this._linkData.label}}`),link}case CoC7Link.LINK_TYPE.ITEM:{if(!this.type||!this.name)return null;let options=`name:${this.name}`;this._linkData.icon&&(options+=`,icon:${this._linkData.icon}`),this._linkData.fromCompendium&&(options+=`,pack:${this._linkData.pack}`),(this._linkData.fromCompendium||this._linkData.fromDirectory)&&(options+=`,id:${this._linkData.id}`);let link=`@coc7.item[${options}]`;return this._linkData.hasLabel&&(link+=`{${this._linkData.label}}`),link}default:return null}}}class CoC7LinkCreationDialog extends FormApplication{static get defaultOptions(){return mergeObject(super.defaultOptions,{id:"link-creation",classes:["coc7"],title:game.i18n.localize("CoC7.CreateLink"),dragDrop:[{dragSelector:null,dropSelector:".container"}],template:"systems/CoC7/templates/apps/link-creation.html",closeOnSubmit:!1,submitOnClose:!0,submitOnChange:!0,width:400,height:"auto",choices:{},allowCustom:!0,minimum:0,maximum:null})}static async fromLinkData(linkData,options={}){const link=await CoC7Link.fromData(linkData);return new CoC7LinkCreationDialog(link,options)}async getData(){const data=await super.getData();data.link=this.link,data.data=this.link.data,data.fromGame=this.link.is.item||this.link.is.check&&this.link.check===CoC7Link.CHECK_TYPE.SKILL,data.askId=data.fromGame&&(this.link.data.fromDirectory||this.link.data.fromCompendium),data.askPack=data.fromGame&&this.link.data.fromCompendium,data.isSetFromGame=data.askId||data.askPack,data.difficultyLevel=CoC7Check.difficultyLevel,data.selectedDifficulty={unknown:CoC7Check.difficultyLevel.unknown===this.link.data.difficulty,regular:CoC7Check.difficultyLevel.regular===this.link.data.difficulty,hard:CoC7Check.difficultyLevel.hard===this.link.data.difficulty,extreme:CoC7Check.difficultyLevel.extreme===this.link.data.difficulty,critical:CoC7Check.difficultyLevel.critical===this.link.data.difficulty},this.link.data.difficulty||("unknown"===game.settings.get("CoC7","defaultCheckDifficulty")?data.selectedDifficulty.unknown=!0:data.selectedDifficulty.regular=!0),data.linkType=[{key:CoC7Link.LINK_TYPE.CHECK,label:game.i18n.localize("CoC7.Check"),selected:this.link.is.check},{key:CoC7Link.LINK_TYPE.SANLOSS,label:game.i18n.localize("CoC7.SanityCheck"),selected:this.link.is.sanloss},{key:CoC7Link.LINK_TYPE.ITEM,label:game.i18n.localize("CoC7.ItemWeapon"),selected:this.link.is.item}],data.checkType=CoC7Link.CHECK_TYPE,data.selectedCheckType={characteristic:CoC7Link.CHECK_TYPE.CHARACTERISTIC===this.link.check,attribute:CoC7Link.CHECK_TYPE.ATTRIBUTE===this.link.check,skill:CoC7Link.CHECK_TYPE.SKILL===this.link.check},this.link.check||(data.selectedCheckType.characteristic=!0),data.characteristics=CoCActor.getCharacteristicDefinition();for(let i=0;i<data.characteristics.length;i++)data.data.characteristicKey===data.characteristics[i].key||data.data.characteristicKey===data.characteristics[i].shortName||data.data.characteristicKey===data.characteristics[i].label?data.characteristics[i].selected=!0:data.characteristics[i].selected=!1;return data.attributes=[{key:"lck",label:game.i18n.localize("CoC7.Luck"),selected:"lck"===data.data.attributeKey},{key:"san",label:game.i18n.localize("CoC7.Sanity"),selected:"san"===data.data.attributeKey}],data}get link(){return this.object}activateListeners(html){html.find(".submit-button").click(this._onClickSubmit.bind(this)),super.activateListeners(html)}async _onDrop(event){const dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);if("link"===data.CoC7Type)await this.link.updateFromLink(data),this.render(!0);else{if(data.actorId){const actorKey=data.sceneId&&data.tokenId?`${data.sceneId}.${data.tokenId}`:data.actorId,actor=chatHelper.getActorFromKey(actorKey);actor.hasPlayerOwner?(this.link.hasPlayerOwner=!0,this.link.actorKey=actor.actorKey):this.link.hasPlayerOwner=!1}if("Item"===data.type)if(data.data)switch(data.data.type){case"skill":this.link._linkData.fromDirectory=!1,this.link._linkData.fromCompendium=!1,this.link.type=CoC7Link.LINK_TYPE.CHECK,this.link.check=CoC7Link.CHECK_TYPE.SKILL,this.link.name=data.data.name,this.render(!0);break;case"weapon":this.link._linkData.fromDirectory=!1,this.link._linkData.fromCompendium=!1,this.link.type=CoC7Link.LINK_TYPE.ITEM,this.link.name=data.data.name,this.render(!0)}else data.id&&(this.link._linkData.id=data.id,this.link._linkData.fromDirectory=!0),data.pack&&(this.link._linkData.pack=data.pack,this.link._linkData.fromDirectory=!1,this.link._linkData.fromCompendium=!0),await this.link.fetchItem(),this.render(!0)}}_onClickSubmit(event){const action=event.currentTarget.dataset.action;if(this.link.link){switch(action){case"clipboard":CoC7Utilities.copyToClipboard(this.link.link);break;case"chat":{const option={};option.speaker={alias:game.user.name},chatHelper.createMessage(null,game.i18n.format("CoC7.MessageCheckRequestedWait",{check:this.link.link}),option)}break;case"whisper-owner":{const option={};option.speaker={alias:game.user.name},option.whisper=this.link.actor.owners,chatHelper.createMessage(null,game.i18n.format("CoC7.MessageTargetCheckRequested",{name:this.link.actor.name,check:this.link.link}),option)}break;case"whisper-selected":{if(!canvas.tokens.controlled.length)return void ui.notifications.warn("No tokens selected");const option={};option.speaker={alias:game.user.name},canvas.tokens.controlled.forEach((t=>{t.actor.hasPlayerOwner&&(option.whisper=t.actor.owners,chatHelper.createMessage(null,game.i18n.format("CoC7.MessageTargetCheckRequested",{name:t.actor.name,check:this.link.link}),option))}))}}this.close()}}async _updateObject(event,formData){const target=event.currentTarget,group=target?.closest(".form-group"),groupName=group?.dataset.group;if("origin"===groupName)"fromCompendium"===target.name&&(this.link._linkData.fromCompendium=!this.link._linkData.fromCompendium,this.link._linkData.fromCompendium&&(this.link._linkData.fromDirectory=!1)),"fromDirectory"===target.name&&(this.link._linkData.fromDirectory=!this.link._linkData.fromDirectory,this.link._linkData.fromDirectory&&(this.link._linkData.fromCompendium=!1)),await this.link.fetchItem();else{const formDataEx=expandObject(formData);formDataEx.check&&(formDataEx.check=Number(formDataEx.check)),formDataEx.difficulty&&(formDataEx.difficulty=Number(formDataEx.difficulty)),formDataEx.type&&(formDataEx.type=Number(formDataEx.type));const diffData=diffObject(this.link.data,formDataEx);await this.link.update(diffData)}this.render(!0)}static async create(){const link=new CoC7Link;new CoC7LinkCreationDialog(link,{}).render(!0)}}class CoC7Parser{static async onEditorDrop(event,editor){event.preventDefault();const dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);if("coc7-link"===data.linkType){if(event.stopPropagation(),!event.shiftKey&&(void 0===data.difficulty||void 0===data.modifier)){const usage=await RollDialog.create({disableFlatDiceModifier:!0});usage&&(data.modifier=usage.get("bonusDice"),data.difficulty=usage.get("difficulty"))}"blindroll"===game.settings.get("core","rollMode")&&(data.blind=!0);const link=CoC7Parser.createCoC7Link(data);link&&editor.insertContent(link)}else if(isCtrlKey(event)){if(event.stopPropagation(),"Item"!==data.type)return;let item;const linkData={};if(data.pack){const pack=game.packs.get(data.pack);if("Item"!==pack.metadata.entity)return;item=await pack.getDocument(data.id)}else item=data.data?data.data:game.items.get(data.id);if(!item)return;if(linkData.name=item.name,data.pack&&(linkData.pack=data.pack),data.id&&(linkData.id=data.id),"skill"===item.type){if(!event.shiftKey){const usage=await RollDialog.create({disableFlatDiceModifier:!0});usage&&(linkData.modifier=usage.get("bonusDice"),linkData.difficulty=usage.get("difficulty"))}linkData.check="check",linkData.type="skill","blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0)}else{if("weapon"!==item.type)return;linkData.check="item",linkData.type="weapon"}const link=CoC7Parser.createCoC7Link(linkData);link&&editor.insertContent(link)}}static ParseMessage(message,html,data){if(message.isContentVisible){if(data.message.content.toLocaleLowerCase().includes("@coc7")){const parsedContent=CoC7Parser.enrichHTML(data.message.content);html.find(".message-content").html(parsedContent),data.message.content=parsedContent}return!0}}static createCoC7Link(data){if(data.check)switch(data.check.toLowerCase()){case"check":{if(!data.type||!data.name)return;let options=`${data.blind?"blind,":""}type:${data.type},name:${data.name}`;void 0!==data.difficulty&&(options+=`,difficulty:${data.difficulty}`),void 0!==data.modifier&&(options+=`,modifier:${data.modifier}`),data.icon&&(options+=`,icon:${data.icon}`),data.pack&&(options+=`,pack:${data.pack}`),data.id&&(options+=`,id:${data.id}`);let link=`@coc7.check[${options}]`;return data.displayName&&(link+=`{${data.displayName}}`),link}case"sanloss":{if(!data.sanMax||!data.sanMin)return;let options=`${data.blind?"blind,":""}sanMax:${data.sanMax},sanMin:${data.sanMin}`;data.difficulty&&(options+=`,difficulty:${data.difficulty}`),data.modifier&&(options+=`,modifier:${data.modifier}`),data.icon&&(options+=`,icon:${data.icon}`);let link=`@coc7.sanloss[${options}]`;return data.displayName&&(link+=`{${data.displayName}}`),link}case"item":{if(!data.type||!data.name)return;let options=`${data.blind?"blind,":""}type:${data.type},name:${data.name}`;data.icon&&(options+=`,icon:${data.icon}`),data.pack&&(options+=`,pack:${data.pack}`),data.id&&(options+=`,id:${data.id}`);let link=`@coc7.item[${options}]`;return data.displayName&&(link+=`{${data.displayName}}`),link}}}static ParseSheetContent(app,html){for(const element of html.find("div.editor-content > *, p"))element.outerHTML.toLocaleLowerCase().includes("@coc7")&&(element.outerHTML=CoC7Parser.enrichHTML(element.outerHTML));html.find("a.coc7-link").on("click",(async event=>await CoC7Parser._onCheck(event))),html.find("a.coc7-link").on("dragstart",(event=>CoC7Parser._onDragCoC7Link(event)))}static _getTextNodes(parent){const text=[],walk=document.createTreeWalker(parent,NodeFilter.SHOW_TEXT,null,!1);for(;walk.nextNode();)text.push(walk.currentNode);return text}static enrichHTML(content){const html=document.createElement("div");html.innerHTML=String(content);let text=[];text=TextEditor._getTextNodes(html);const rgx=new RegExp("@(coc7).(.*?)\\[([^\\]]+)\\](?:{([^}]+)})?","gi");return TextEditor._replaceTextContent(text,rgx,CoC7Parser._createLink),html.innerHTML}static bindEventsHandler(html){html.find("a.coc7-link").on("click",(async event=>await CoC7Parser._onCheck(event))),html.find("a.coc7-link").on("dragstart",(event=>CoC7Parser._onDragCoC7Link(event)))}static _onDragCoC7Link(event){const a=event.currentTarget,i=a.querySelector("i.link-icon"),data=duplicate(a.dataset);data.linkType="coc7-link",data.CoC7Type="link",data.icon=null,i.dataset&&i.dataset.linkIcon&&"fas fa-dice"!==i.dataset.linkIcon&&(data.icon=i.dataset.linkIcon),data.displayName=a.dataset.displayName?a.innerText:null,event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}static _createLink(match,tag,type,options,name){const data={cls:["coc7-link"],dataset:{check:type},icon:"fas fa-dice",blind:!1,name},matches=options.matchAll(/[^,]+/gi);for(const match of Array.from(matches)){let[key,value]=match[0].split(":");"icon"===key&&(data.icon=value),"blind"===key&&void 0===value&&(value=!0,data.blind=["check"].includes(type.toLowerCase())),data.dataset[key]=value}let title;const difficulty=CoC7Check.difficultyString(data.dataset.difficulty);switch(type.toLowerCase()){case"check":{let humanName=data.dataset.name;["attributes","attribute","attrib","attribs"].includes(data.dataset.type?.toLowerCase())&&("lck"===data.dataset.name&&(humanName=game.i18n.localize("CoC7.Luck")),"san"===data.dataset.name&&(humanName=game.i18n.localize("CoC7.Sanity"))),["charac","char","characteristic","characteristics"].includes(data.dataset.type?.toLowerCase())&&(humanName=CoC7Utilities.getCharacteristicNames(data.dataset.name)?.label),title=game.i18n.format(`CoC7.LinkCheck${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,name:humanName});break}case"sanloss":title=game.i18n.format(`CoC7.LinkSanLoss${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,sanMin:data.dataset.sanMin,sanMax:data.dataset.sanMax});break;case"item":title=game.i18n.format(`CoC7.LinkItem${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,name:data.dataset.name})}name?data.dataset.displayName=!0:data.name=title;const a=document.createElement("a");a.title=game.user.isGM?data.name:title,a.classList.add(...data.cls);for(const[k,v]of Object.entries(data.dataset))a.dataset[k]=v;return a.draggable=!0,a.innerHTML=`${data.blind?'<i class="fas fa-eye-slash"></i>':""}<i data-link-icon="${data.icon}" class="link-icon ${data.icon}"></i>${data.name}`,a}static async _onCheck(event){const options=event.currentTarget.dataset;if(options.difficulty&&(options.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),game.user.isGM){if(isCtrlKey(event)){options.displayName&&(options.label=event.currentTarget.innerText);const link=await CoC7Link.fromData(options);return void new CoC7LinkCreationDialog(link).render(!0)}if(canvas.tokens.controlled.length)canvas.tokens.controlled.forEach((token=>{switch(options.check){case"check":if(["charac","char","characteristic","characteristics"].includes(options.type.toLowerCase()))return token.actor.characteristicCheck(options.name,event.shiftKey,options);if(["skill"].includes(options.type.toLowerCase()))return token.actor.skillCheck(options,event.shiftKey,options);if(["attributes","attribute","attrib","attribs"].includes(options.type.toLowerCase()))return token.actor.attributeCheck(options.name,event.shiftKey,options);break;case"sanloss":SanCheckCard.create(token.actor.id,options,{fastForward:event.shiftKey});break;case"item":return token.actor.weaponCheck(options,event.shiftKey)}}));else if(game.user.data.document.character?.data)await Promise.all(game.user.data.document.character.data.items.map((async v=>{if(v.name===options.name){const check=new CoC7Check;check._rawValue=v.data.data.base,await check.roll(),check.toMessage()}return!1})));else if(game.user.isGM){const option={speaker:{alias:game.user.name}};chatHelper.createMessage(null,game.i18n.format("CoC7.MessageCheckRequestedWait",{check:(await CoC7Link.fromData(options)).link}),option)}}else{const speaker=ChatMessage.getSpeaker(),actor=ChatMessage.getSpeakerActor(speaker);if(actor)switch(options.check){case"check":if(["charac","char","characteristic","characteristics"].includes(options.type.toLowerCase()))return actor.characteristicCheck(options.name,event.shiftKey,options);if(["skill"].includes(options.type.toLowerCase()))return actor.skillCheck(options,event.shiftKey,options);if(["attributes","attribute","attrib","attribs"].includes(options.type.toLowerCase()))return actor.attributeCheck(options.name,event.shiftKey,options);break;case"sanloss":SanCheckCard.create(actor.id,options,{fastForward:event.shiftKey});break;case"item":return actor.weaponCheck(options,event.shiftKey)}else game.user.data.document.character?.data?await Promise.all(game.user.data.document.character.data.items.map((async v=>{if(v.name===options.name){const check=new CoC7Check;check._rawValue=v.data.data.base,await check.roll(),check.toMessage()}return!1}))):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoControlledActor"))}}}class CoC7Item extends Item{constructor(data,context){if(data.type in CONFIG.Item.documentClasses&&!context?.extended)return new CONFIG.Item.documentClasses[data.type](data,{extended:!0,...context});void 0===data.img&&("chase"===data.type?data.img="systems/CoC7/assets/icons/running-solid.svg":"skill"===data.type?data.img="systems/CoC7/assets/icons/skills.svg":"spell"===data.type?data.img="systems/CoC7/assets/icons/pentagram-rose.svg":"status"===data.type?data.img="icons/svg/aura.svg":"weapon"===data.type&&(data.img="icons/svg/sword.svg")),super(data,context)}static get flags(){return{malfunction:"malfc"}}async toggleProperty(propertyId,override=!1){let fighting,firearms,checkedProps={};if("weapon"===this.type&&!override&&("ahdb"===propertyId&&(checkedProps=this.data.data.properties.ahdb?{"data.properties.ahdb":!1}:{"data.properties.ahdb":!0,"data.properties.addb":!1}),"addb"===propertyId&&(checkedProps=this.data.data.properties.addb?{"data.properties.addb":!1}:{"data.properties.addb":!0,"data.properties.ahdb":!1}),"shotgun"===propertyId&&(checkedProps=this.data.data.properties.shotgun?{"data.properties.shotgun":!1,"data.range.extreme.value":null,"data.range.extreme.damage":null,"data.range.long.value":null,"data.range.long.damage":null}:{"data.properties.rngd":!0,"data.properties.melee":!1,"data.properties.shotgun":!0}),"melee"===propertyId||"rngd"===propertyId)){let meleeWeapon;"melee"!==propertyId||this.data.data.properties.melee||(meleeWeapon=!0),"melee"===propertyId&&this.data.data.properties.melee&&(meleeWeapon=!1),"rngd"!==propertyId||this.data.data.properties.rngd||(meleeWeapon=!1),"rngd"===propertyId&&this.data.data.properties.rngd&&(meleeWeapon=!0),checkedProps=meleeWeapon?{"data.properties.melee":!0,"data.properties.rngd":!1,"data.properties.shotgun":!1,"data.properties.brst":!1,"data.properties.auto":!1,"data.properties.dbrl":!1}:{"data.properties.melee":!1,"data.properties.rngd":!0}}if("skill"===this.type&&!override){let modif=!1;"combat"===propertyId&&(this.data.data.properties.combat?checkedProps={"data.properties.combat":!1,"data.properties.special":!1,"data.properties.fighting":!1,"data.properties.firearm":!1,"data.specialization":null}:this.data.data.properties.firearm?firearms=!0:fighting=!0,modif=!0),"fighting"===propertyId&&(this.data.data.properties.fighting?(firearms=!0,fighting=!1):(firearms=!1,fighting=!0),modif=!0),"firearm"===propertyId&&(this.data.data.properties.firearm?(firearms=!1,fighting=!0):(firearms=!0,fighting=!1),modif=!0),modif&&(fighting&&(checkedProps={"data.properties.fighting":!0,"data.properties.firearm":!1,"data.properties.combat":!0,"data.properties.special":!0,"data.specialization":game.i18n.localize(COC7.fightingSpecializationName)}),firearms&&(checkedProps={"data.properties.fighting":!1,"data.properties.firearm":!0,"data.properties.combat":!0,"data.properties.special":!0,"data.specialization":game.i18n.localize(COC7.firearmSpecializationName)}))}if(Object.keys(checkedProps).length>0){return await this.update(checkedProps)}{const propName=`data.properties.${propertyId}`,propValue=!this.data.data.properties[propertyId];this.update({[propName]:propValue}).then((item=>item))}}hasProperty(propertyId){return this.isIncludedInSet("properties",propertyId)}get name(){if("skill"!==this.type||!this.data.data?.properties?.special)return super.name;if(this.data.name.toLowerCase().includes(this.data.data.specialization?.toLowerCase())){if(this.isOwned&&super.name===this.data.name){const match=new RegExp("^"+this.data.data.specialization.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")+" \\((.+)\\)$").exec(this.data.name);if(null!==match&&void 0!==match[1])return match[1]}return super.name}return this.isOwned?super.name:`${this.data.data.specialization} (${this.data.name})`}get sName(){return"skill"===this.type&&this.data.data?.properties?.special?this.data.name.toLowerCase().includes(this.data.data.specialization?.toLowerCase())?super.name:`${this.data.name}`:super.name}async updateRoll(roll){return"updateRoll"in this.sheet?await this.sheet.updateRoll(roll):"updateRoll"in this?await this.updateRoll(roll):void 0}static getNameWithoutSpec(item){if(item instanceof CoC7Item){if(item.data.data?.properties?.special){const specNameRegex=new RegExp(item.data.data.specialization,"ig"),filteredName=item.name.replace(specNameRegex,"").trim().replace(/^\(+|\)+$/gm,"");return filteredName.length?filteredName:item.name}}else if(item.data.properties?.special){const specNameRegex=new RegExp(item.data.specialization,"ig"),filteredName=item.name.replace(specNameRegex,"").trim().replace(/^\(+|\)+$/gm,"");return filteredName.length?filteredName:item.name}return item.name}static isAnySpec(item){return item instanceof CoC7Item?!("skill"!==item.type||!item.data.data.properties?.special)&&CoC7Item.getNameWithoutSpec(item).toLowerCase()===game.i18n.localize("CoC7.AnySpecName").toLowerCase():!("skill"!==item.type||!item.data.properties?.special)&&CoC7Item.getNameWithoutSpec(item).toLowerCase()===game.i18n.localize("CoC7.AnySpecName").toLowerCase()}async checkSkillProperties(){if("skill"!==this.type)return;const checkedProps={};return this.data.data.properties.combat?(this.data.data.properties.special||(this.data.data.properties.special=!0,checkedProps["data.properties.special"]=!0),this.data.data.properties.fighting||this.data.data.properties.firearm||(this.data.data.properties.fighting=!0,checkedProps["data.properties.fighting"]=!0),!this.data.data.properties.fighting||this.data.data.specialization&&""!==this.data.data.specialization||(this.data.data.specialization=game.i18n.localize(COC7.fightingSpecializationName),checkedProps["data.specialization"]=game.i18n.localize(COC7.fightingSpecializationName)),!this.data.data.properties.firearm||this.data.data.specialization&&""!==this.data.data.specialization||(this.data.data.specialization=game.i18n.localize(COC7.firearmSpecializationName),checkedProps["data.specialization"]=game.i18n.localize(COC7.firearmSpecializationName))):(this.data.data.properties.fighting&&(this.data.data.properties.fighting=!1,checkedProps["data.properties.fighting"]=!1),this.data.data.properties.firearm&&(this.data.data.properties.firearm=!1,checkedProps["data.properties.firearm"]=!1)),Object.keys(checkedProps).length>0&&await this.update(checkedProps),checkedProps}isIncludedInSet(set,propertyId){this.data.data[set]||(this.data.data[set]=[]);return this.data.data[set].indexOf(propertyId)>-1}async flagForDevelopement(){(game.settings.get("CoC7","xpEnabled")||game.user.isGM)&&(this.data.data.flags||await this.update({"data.flags":{}}),await this.update({"data.flags.developement":!0}))}async unflagForDevelopement(){(game.settings.get("CoC7","xpEnabled")||game.user.isGM)&&(this.data.data.flags||await this.update({"data.flags":{}}),await this.update({"data.flags.developement":!1}))}get developementFlag(){return this.getItemFlag("developement")}async toggleItemFlag(flagName,eraseAdjustment=!0){const flagValue=!this.getItemFlag(flagName),name=`data.flags.${flagName}`;"occupation"!==flagName&&"archetype"!==flagName||flagValue||!eraseAdjustment?"developement"===flagName?game.settings.get("CoC7","xpEnabled")||game.user.isGM?await this.update({[name]:flagValue}):ui.notifications.info("XP Gain disabled."):await this.update({[name]:flagValue}):await this.update({[`data.adjustments.${flagName}`]:null,[name]:flagValue})}async setItemFlag(flagName){await this.update({[`data.flags.${flagName}`]:!0})}async unsetItemFlag(flagName,eraseAdjustment=!0){const name=`data.flags.${flagName}`;"occupation"!==flagName&&"archetype"!==flagName||!eraseAdjustment?await this.update({[name]:!1}):await this.update({[`data.adjustments.${flagName}`]:null,[name]:!1})}getItemFlag(flagName){return this.data.data.flags?!!this.data.data.flags[flagName]&&this.data.data.flags[flagName]:(this.data.data.flags={},this.data.data.flags.locked=!0,this.update({"data.flags":{}}),!1)}get usesAlternativeSkill(){return"weapon"===this.type&&(!0===this.data.data.properties?.auto||!0===this.data.data.properties?.brst||!0===this.data.data.properties?.thrown)}get maxUsesPerRound(){if("weapon"!==this.type)return null;const multiShot=parseInt(this.data.data.usesPerRound.max);return isNaN(multiShot)?0:multiShot}get usesPerRound(){if("weapon"!==this.type)return null;const singleShot=parseInt(this.data.data.usesPerRound.normal);return isNaN(singleShot)?0:singleShot}get usesPerRoundString(){let usesPerRound;return usesPerRound=this.data.data.usesPerRound.normal?this.data.data.usesPerRound.normal:"1",this.data.data.usesPerRound.max&&(usesPerRound+=`(${this.data.data.usesPerRound.max})`),this.data.data.properties.auto&&(usesPerRound+=` ${game.i18n.localize("CoC7.WeaponAuto")}`),this.data.data.properties.brst&&(usesPerRound+=` ${game.i18n.localize("CoC7.WeaponBrst")}`,this.data.data.usesPerRound.burst&&(usesPerRound+=`(${this.data.data.usesPerRound.burst})`)),usesPerRound}get multipleShots(){return"weapon"!==this.type?null:!(this.maxUsesPerRound<=1)}get singleShot(){return"weapon"!==this.type?null:!!this.usesPerRound}get baseRange(){return parseInt(this.data.data.range.normal.value)}get longRange(){return parseInt(this.data.data.range.long.value)}get extremeRange(){return parseInt(this.data.data.range.extreme.value)}get skillProperties(){if("skill"!==this.type)return[];const skillProperties=[];for(const[key,value]of Object.entries(COC7.skillProperties))!0===this.data.data.properties[key]&&skillProperties.push(game.i18n.localize(value));return skillProperties}get _base(){if("skill"!==this.type)return null;if("string"!=typeof this.data.data.base)return this.data.data.base;if(this.data.data.base.includes("@")){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=getProperty(this,value.substring(5)));let value;try{value=Math.floor(new Roll(this.data.data.base,parsed).evaluate({maximize:!0}).total)}catch(err){value=0}return[value,!0]}return[isNaN(parseInt(this.data.data.base))?null:parseInt(this.data.data.base),!1]}async asyncBase(){const e=this._base;return e[1]&&await this.update({"data.base":e[0]}),e[0]}get base(){const e=this._base;return e[1]&&this.update({"data.base":e[0]}),e[0]}get value(){if("skill"!==this.type)return null;let value=0;return"character"===this.actor.data.type?(value=this.base,value+=this.data.data.adjustments?.personal?parseInt(this.data.data.adjustments?.personal):0,value+=this.data.data.adjustments?.occupation?parseInt(this.data.data.adjustments?.occupation):0,value+=this.data.data.adjustments?.experience?parseInt(this.data.data.adjustments?.experience):0,game.settings.get("CoC7","pulpRules")&&this.data.data.adjustments?.archetype&&(value+=parseInt(this.data.data.adjustments?.archetype))):value=parseInt(this.data.data.value),isNaN(value)?null:value}async updateValue(value){if("skill"!==this.type)return null;if("character"===this.actor.data.type){const delta=parseInt(value)-this.value,exp=(this.data.data.adjustments?.experience?parseInt(this.data.data.adjustments.experience):0)+delta;await this.update({"data.adjustments.experience":exp>0?exp:0})}else await this.update({"data.value":value})}async increaseExperience(x){if("skill"!==this.type)return null;if("character"===this.actor.data.type){const exp=(this.data.data.adjustments?.experience?parseInt(this.data.data.adjustments.experience):0)+parseInt(x);await this.update({"data.adjustments.experience":exp>0?exp:0})}}getBulletLeft(){return"weapon"!==this.type?null:this.data.data.ammo?this.data.data.ammo:(this.setBullets(0),0)}async reload(){if("weapon"!==this.type)return null;const maxBullet=this.data.data.bullets?parseInt(this.data.data.bullets):1;await this.setBullets(maxBullet)}async setBullets(bullets){if("weapon"!==this.type)return null;await this.update({"data.ammo":bullets||0})}async addBullet(){if("weapon"!==this.type)return null;const bullets=await this.getBulletLeft(),maxBullets=this.data.data.bullets?parseInt(this.data.data.bullets):1;bullets+1>=maxBullets?await this.setBullets(maxBullets):await this.setBullets(bullets+1)}async shootBullets(x){if("weapon"!==this.type)return null;const bullets=await this.getBulletLeft();x>bullets?await this.setBullets(0):await this.setBullets(bullets-x)}static mergeOptionalSkills(skillList,options){return skillList.concat(options).reduce(((newArray,item)=>!CoC7Item.isAnySpec(item)&&newArray.find((skill=>skill.name===item.name))?newArray:[...newArray,item]),[]).sort(((a,b)=>{let lca,lcb;return a.data.properties&&b.data.properties?(lca=a.data.properties.special?a.data.specialization.toLowerCase()+a.name.toLowerCase():a.name.toLowerCase(),lcb=b.data.properties.special?b.data.specialization.toLowerCase()+b.name.toLowerCase():b.name.toLowerCase()):(lca=a.name.toLowerCase(),lcb=b.name.toLowerCase()),lca.localeCompare(lcb)}))}static _getChatCardActor(card){const tokenKey=card.dataset.tokenId;if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;return new Token(tokenData).actor}}const actorId=card.dataset.actorId;return game.actors.get(actorId)||null}getChatData(htmlOptions={}){const data=duplicate(this.data.data);"string"==typeof data.description&&(data.description={value:data.description,special:""}),void 0===data.description.value&&(data.description.value=""),void 0===data.description.special&&(data.description.special="");const labels=[];data.description.value=TextEditor.enrichHTML(data.description.value,htmlOptions),data.description.value=CoC7Parser.enrichHTML(data.description.value),data.description.special=TextEditor.enrichHTML(data.description.special,htmlOptions),data.description.special=CoC7Parser.enrichHTML(data.description.special);const props=[],fn=this[`_${this.data.type}ChatData`];if(fn&&fn.bind(this)(data,labels,props,htmlOptions),"skill"===this.type)for(const[key,value]of Object.entries(COC7.skillProperties))!0===this.data.data.properties[key]&&props.push(value);return data.properties=props.filter((p=>!!p)),data.labels=labels,data}_weaponChatData(data,labels,props){for(const[key,value]of Object.entries(COC7.weaponProperties))!0===this.data.data.properties[key]&&props.push(value);let skillLabel=game.i18n.localize("CoC7.Skill"),skillName="",found=!1;if(this.data.data.skill.main.id){const skill=this.actor?.items.get(this.data.data.skill.main.id);skill&&(skillName+=CoC7Item.getNameWithoutSpec(skill),found=!0)}if(this.usesAlternativeSkill&&this.data.data.skill.alternativ.id){skillLabel=game.i18n.localize("CoC7.Skills");const skill=this.actor?.items.get(this.data.data.skill.alternativ.id);skill&&(skillName+=`/${CoC7Item.getNameWithoutSpec(skill)}`,found=!0)}found||(skillName=this.data.data.skill.main.name,this.usesAlternativeSkill&&this.data.data.skill.alternativ.name&&(skillName+=`/${this.data.data.skill.alternativ.name}`)),skillName&&labels.push({name:skillLabel,value:skillName}),labels.push({name:game.i18n.localize("CoC7.WeaponUsesPerRound"),value:this.usesPerRoundString}),labels.push({name:game.i18n.localize("CoC7.WeaponMalfunction"),value:this.data.data.malfunction?this.data.data.malfunction:"-"}),this.data.data.bullets&&labels.push({name:game.i18n.localize("CoC7.WeaponBulletsInMag"),value:this.data.data.bullets})}canBePushed(){return!("skill"!==this.type||!this.data.data.properties.push)}get impale(){return this.data.data.properties.impl}get isDodge(){return"skill"===this.type&&this.name.toLowerCase()===game.i18n.localize("CoC7.DodgeSkillName").toLowerCase()}}class CoC7Check{constructor(actor=null,skill=null,item=null,diceMod=0,difficulty=null,flatThresholdModifier=0,flatDiceModifier=0){if(this.actor=actor,this.skill=skill,this.item=item,this.difficulty=difficulty,this.diceModifier=diceMod,this.rawValue=0,this.successLevel=null,this.referenceMessageId=null,this.pushing=!1,this.flatDiceModifier=flatDiceModifier,this.flatThresholdModifier=flatThresholdModifier,null===difficulty){const isUnknown="unknown"===game.settings.get("CoC7","defaultCheckDifficulty");this.difficulty=isUnknown?CoC7Check.difficultyLevel.unknown:CoC7Check.difficultyLevel.regular}}static get cardType(){return"rollCard"}static get difficultyLevel(){return{unknown:-1,regular:1,hard:2,extreme:3,critical:4,impossible:9}}static get successLevel(){return{fumble:-99,failure:0,regular:1,hard:2,extreme:3,critical:4}}static difficultyString(difficultyLevel){switch(isNaN(Number(difficultyLevel))?difficultyLevel:Number(difficultyLevel)){case"?":return game.i18n.localize("CoC7.UnknownDifficulty");case"+":return game.i18n.localize("CoC7.HardDifficulty");case"++":return game.i18n.localize("CoC7.ExtremeDifficulty");case"+++":return game.i18n.localize("CoC7.CriticalDifficulty");case 0:return game.i18n.localize("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.unknown:return game.i18n.localize("CoC7.UnknownDifficulty");case CoC7Check.difficultyLevel.regular:return game.i18n.localize("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.hard:return game.i18n.localize("CoC7.HardDifficulty");case CoC7Check.difficultyLevel.extreme:return game.i18n.localize("CoC7.ExtremeDifficulty");case CoC7Check.difficultyLevel.critical:return game.i18n.localize("CoC7.CriticalDifficulty");default:return null}}get rawValue(){if(this._rawValue||(this.characteristic&&(this.rawValue=this.actor.data.data.characteristics[this.characteristic].value),this.skill&&(this.rawValue=this.skill.value),this.attribute&&(this.rawValue=this.actor.data.data.attribs[this.attribute].value)),this._rawValue)return this.flatThresholdModifier&&game.settings.get("CoC7","allowFlatThresholdModifier")?this._rawValue+this.flatThresholdModifier<1?1:this._rawValue+this.flatThresholdModifier:this._rawValue}set rawValue(x){this._rawValue=x}set uuid(x){this._uuid=x}get uuid(){return this._uuid||(this._uuid=foundry.utils.randomID(16)),this._uuid}get hasCard(){return ui.chat.collection.filter((message=>this.uuid===message.getFlag("CoC7","uuid")&&CoC7Check.cardType===message.getFlag("CoC7","type"))).length>0}get rawValueString(){if(this._rawValue)return this.flatThresholdModifier&&game.settings.get("CoC7","allowFlatThresholdModifier")?this.flatThresholdModifier<0?this._rawValue.toString()+this.flatThresholdModifier.toString():this._rawValue.toString()+"+"+this.flatThresholdModifier.toString():this._rawValue.toString()}get criticalThreshold(){return 1}get regularThreshold(){return this.rawValue?this.rawValue>=100?99:parseInt(this.rawValue):null}get hardThreshold(){return this.rawValue?Math.floor(this.rawValue/2):null}get extremeThreshold(){return this.rawValue?Math.floor(this.rawValue/5):null}get fumbleThreshold(){return this.rawValue?this.rawValue<50?96:100:null}get succesThreshold(){if(void 0!==this.difficulty)switch(this.difficulty){case CoC7Check.difficultyLevel.extreme:return this.extremeThreshold;case CoC7Check.difficultyLevel.hard:return this.hardThreshold;case CoC7Check.difficultyLevel.regular:return this.regularThreshold;case CoC7Check.difficultyLevel.critical:return this.criticalThreshold;case CoC7Check.difficultyLevel.unknown:return-1;default:return this.rawValue}return null}get difficultyString(){if(void 0!==this.difficulty)switch(this.difficulty){case CoC7Check.difficultyLevel.extreme:return game.i18n.format("CoC7.ExtremeDifficulty");case CoC7Check.difficultyLevel.hard:return game.i18n.format("CoC7.HardDifficulty");case CoC7Check.difficultyLevel.regular:return game.i18n.format("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.critical:return game.i18n.format("CoC7.CriticalDifficulty");case CoC7Check.difficultyLevel.unknown:return game.i18n.format("CoC7.UnknownDifficulty");default:return""}return""}get modifiedResult(){if(!this.standby){if(void 0!==this._modifiedResult)return this._modifiedResult;if(this.flatDiceModifier){const modified=this.dices.total+this.flatDiceModifier;return modified<1?1:modified>100?100:modified}return this.dices.total}}set modifiedResult(x){this._modifiedResult=x}get flatDiceModifierString(){return this.flatDiceModifier?this.flatDiceModifier>0?`+${this.flatDiceModifier}`:this.flatDiceModifier.toString():null}get isFumble(){if(!this.standby&&!this.isSimpleRoll)return this.modifiedResult>=this.fumbleThreshold}get isCritical(){if(!this.standby)return 1===this.modifiedResult}get isExtremeSuccess(){if(!this.standby)return this.successLevel>=CoC7Check.successLevel.extreme}get passed(){if(!this.standby&&!this.isSimpleRoll)return this.luckSpent?this.difficulty<=this.successLevel:this.succesThreshold>=this.modifiedResult||this.isCritical}get failed(){if(!this.standby&&!this.isSimpleRoll)return!this.passed}get isSimpleRoll(){return void 0===this.rawValue}get hasBonus(){return!!(this.diceModifier&&this.diceModifier>0)}get hasPenalty(){return!!(this.diceModifier&&this.diceModifier<0)}get hasModifier(){return!(!this.diceModifier||0===this.diceModifier)}get diceModifier(){return this._diceModifier?this._diceModifier:null}set diceModifier(x){this._diceModifier=parseInt(x)}get name(){if(this.actor){if(this.skill)return this.skill.name;if(this.item)return this.item.name;if(this.characteristic)return CoC7Utilities.getCharacteristicNames(this.characteristic)?.label;if(this.attribute){if("lck"===this.attribute)return game.i18n.localize("CoC7.Luck");if("san"===this.attribute)return game.i18n.localize("CoC7.Sanity")}}return null}get sName(){if(this.actor){if(this.skill)return this.skill.sName;if(this.item)return this.item.name;if(this.characteristic)return CoC7Utilities.getCharacteristicNames(this.characteristic)?.short;if(this.attribute){if("lck"===this.attribute)return game.i18n.localize("CoC7.Luck");if("san"===this.attribute)return game.i18n.localize("CoC7.SAN")}}return null}get fullName(){const difficulty=this._difficulty!==CoC7Check.difficultyLevel.regular&&CoC7Check.difficultyString(this._difficulty),modifier=this._diceModifier>0?`+${this._diceModifier}`:this._diceModifier.toString();return game.i18n.format(`CoC7.LinkCheck${difficulty?"Diff":""}${this._diceModifier?"Modif":""}`,{difficulty,modifier,name:this.name})}get rolled(){return!!this.dice}static getFromCard(card){const rollResult=card.classList.contains("roll-result")?card:card.querySelector(".roll-result"),check=new CoC7Check;CoC7Roll.getFromElement(rollResult,check);const message=card.closest(".message");return check.messageId=message?message.dataset.messageId:null,check}static async push(card,publish=!0){const oldCheck=CoC7Check.getFromCard(card),actorId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId,skillId=card.dataset.skillId,charac=card.dataset.characteristic,itemId=card.dataset.itemId,diceMod=card.dataset.diceMod,difficulty=card.dataset.difficulty;let pushedRoll;if(skillId)pushedRoll=new CoC7Check(actorId,skillId,itemId,diceMod,difficulty);else{if(!charac)return;pushedRoll=new CoC7Check,pushedRoll.diceModifier=diceMod,pushedRoll.difficulty=difficulty,pushedRoll.actor=actorId,pushedRoll.characteristic=charac}oldCheck.uuid&&(pushedRoll.context=oldCheck.context,pushedRoll.uuid=oldCheck.uuid),oldCheck.parent&&(pushedRoll.parent=oldCheck.parent),pushedRoll.pushing=!0,await pushedRoll.roll(),publish&&pushedRoll.toMessage(!0,card)}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}set actor(x){if(this.actorKey=x,null!=x){if(x instanceof Actor)return this._actor=x,this._actor.alias=this.actor.name,void(x.token&&x.token.scene&&x.token.scene.id?this.actorKey=`${x.token.scene.id}.${x.token.id}`:this.actorKey=x.id);if(x.includes(".")){const[sceneId,tokenId]=x.split(".");if("TOKEN"===sceneId)this._actor=game.actors.tokens[tokenId],this._actor.alias=this._actor.name;else{const scene=game.scenes.get(sceneId);if(!scene)return;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return;const token=new Token(tokenData);this._actor=token.actor,this._actor.alias=token.name}}else this._actor=game.actors.get(x),this.actor.alias=this.actor.name}else this._actor=x}get successLevelIcons(){if(this.unknownDifficulty)return null;if(this.isSimpleRoll)return null;if(this.successLevel>=this.difficulty){const icons=[];for(let index=0;index<this.successLevel-this.difficulty+1;index++)icons.push(this.isCritical?"medal":"star");const successHint=game.i18n.format("CoC7.SuccesLevelHint",{value:this.successLevel-this.difficulty+1});return{success:!0,cssClass:this.isCritical?"critical":"success",hint:successHint,icons}}{const icons=[],successLevel=this.isFumble?-1:this.successLevel;for(let index=0;index<this.difficulty-successLevel;index++)icons.push(this.isFumble?"skull":"spider");const failureHint=game.i18n.format("CoC7.FailureLevelHint",{value:this.difficulty-successLevel});return{success:!1,cssClass:this.isFumble?"fumble":"failure",hint:failureHint,icons}}}get isBlind(){return void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind}set isBlind(x){this._isBlind=x}get unknownDifficulty(){return!(this.gmDifficultyCritical||this.gmDifficultyExtreme||this.gmDifficultyHard||this.gmDifficultyRegular)&&CoC7Check.difficultyLevel.unknown===this.difficulty}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}set skill(x){this._skill=this._getItemFromId(x),this.skillId=x}set item(x){this._item=this._getItemFromId(x),"weapon"===this._item?.type?this.itemId=x:(this._item=void 0,this.itemId=void 0)}_getItemFromId(x){return null==x?null:x instanceof Item?x:this._actor?this._actor.items.get(x):game.items.get(x)}get actor(){if(this._actor&&this._actor?.id){if("Object"===this._actor.constructor.name){const actor=new CoCActor(this._actor);this._actor=actor}}else if(this.actorKey&&(this._actor=chatHelper.getActorFromKey(this.actorKey)),this.actorId&&(this._actor=chatHelper.getActorFromKey(this.actorId)),!this._actor)return{isDummy:!0,name:this.actorName?this.actorName:void 0,id:void 0,img:"systems/CoC7/assets/icons/question-circle-regular.svg",portrait:"systems/CoC7/assets/icons/question-circle-regular.svg"};return this._actor}get skill(){return!this._skill&&this.skillId&&(this._skill=this.actor?.items.get(this.skillId)),!this._skill&&this.item&&this.item.data.data.skill&&(this.item.data.data.skill.main.id&&!this.weaponAltSkill?this._skill=this._actor.items.get(this.item.data.data.skill.main.id):this.item.data.data.skill.alternativ.id&&this.weaponAltSkill&&(this._skill=this._actor.items.get(this.item.data.data.skill.alternativ.id))),this._skill}get item(){return!this._item&&this.itemId&&this.actor&&(this._item=this.actor.items.get(this.itemId)),this._item}get displayResultType(){return game.settings.get("CoC7","displayResultType")}get displayCheckSuccessLevel(){return game.settings.get("CoC7","displayCheckSuccessLevel")}get displayBothSuccessLevel(){return this.displayResultType&&this.displayCheckSuccessLevel}get dontDisplaySuccessLevel(){return!this.displayResultType&&!this.displayCheckSuccessLevel}get image(){return this.skill?this.skill.img:this.item?this.item.img:void 0}get link(){return this.getLinkElement().outerHTML}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}getLinkElement(classes=null){const data={cls:["coc7-link","coc7-roll"].concat(classes),dataset:{check:"check"},icon:this.image?`<div style="background-image: url(${this.image})"></div>`:'<i class="fas fa-dice"></i>',blind:this.isBlind},difficulty=CoC7Check.difficultyString(this._difficulty),title=game.i18n.format(`CoC7.LinkCheck${this._difficulty?"Diff":""}${this._diceModifier?"Modif":""}`,{difficulty,modifier:this._diceModifier,name:this.name}),a=document.createElement("a");return a.title=title,a.classList.add(...data.cls),a.innerHTML=`${data.blind?'<i class="fas fa-eye-slash"></i>':""}${data.icon}${this.name}`,a}async roll(diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.standby||await this._perform()}static create({difficulty=CoC7Check.difficultyLevel.regular,diceModifier=null,actorKey=null,characteristic=null,attribute=null,rawValue=0,skill=null,flatDiceModifier=0,flatThresholdModifier=0,displayName=null,actorName=null}={}){const check=new CoC7Check;return check.difficulty=difficulty,diceModifier&&(check.diceModifier=diceModifier),flatDiceModifier&&(check.flatDiceModifier=flatDiceModifier),flatThresholdModifier&&(check.flatThresholdModifier=flatThresholdModifier),displayName&&(check.displayName=displayName),actorKey&&(check.actor=actorKey),actorName&&(check.actorName=actorName),isNaN(Number(rawValue))||(check.rawValue=Number(rawValue)),check.actor&&!check.actor.isDummy&&(skill?check.skill=skill:characteristic?check.characteristic=characteristic:attribute&&(check.attribute=attribute)),check}async rollCharacteristic(char,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.characteristic=char,this.standby||await this._perform()}async rollAttribute(attrib,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.attribute=attrib,this.standby||await this._perform()}async rollValue(val,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.rawValue=val,this.standby||await this._perform()}async _perform(options={}){this.dice=options.roll||await CoC7Dice.roll(this.diceModifier,this.rollMode,this.isBlind),options.silent||AudioHelper.play({src:CONFIG.sounds.dice}),this.dices={tens:[],unit:{value:this.dice.unit.total},total:this.dice.total,tenResult:this.dice.total-this.dice.unit.total,hasBonus:!!this.diceModifier,bonus:Math.abs(this.diceModifier),bonusType:this.diceModifier<0?game.i18n.format("CoC7.DiceModifierPenalty"):game.i18n.format("CoC7.DiceModifierBonus"),difficulty:this.difficulty};const max=0===this.dice.unit.total?100:90,min=0===this.dice.unit.total?10:0;let selected=this.dice.total-this.dice.unit.total;for(let i=0;i<this.dice.tens.results.length;i++){const die={};die.value=this.dice.tens.results[i],die.value===selected?(selected=101,die.selected=!0,this.dices.hasBonus?(die.isMax=!0,die.isMin=!1):(die.isMin=!0,die.isMax=!1)):(die.value===max?die.isMax=!0:die.isMax=!1,die.value===min?die.isMin=!0:die.isMin=!1),this.dices.tens.push(die)}this.computeCheck()}async computeCheck(){switch(this.isUnknown=this.unknownDifficulty,this.gmDifficultyRegular&&(this.difficulty=CoC7Check.difficultyLevel.regular),this.gmDifficultyHard&&(this.difficulty=CoC7Check.difficultyLevel.hard),this.gmDifficultyExtreme&&(this.difficulty=CoC7Check.difficultyLevel.extreme),this.gmDifficultyCritical&&(this.difficulty=CoC7Check.difficultyLevel.critical),this.tenOnlyOneDie=1===this.dices.tens.length,this.isValue=!1,this.isCharactiristic=!1,this.isSkill=!1,this.isItem=!1,this.isAttribute=!1,this.isSimpleRoll?(this.denyPush=!0,this.denyLuck=!0):null==this.actor?this.isValue=!0:(this.characteristic&&(this.isCharactiristic=!0,this.rawValue=this.actor.data.data.characteristics[this.characteristic].value),this.skill&&(this.isSkill=!0,this.rawValue=this.skill.value),this.attribute&&(this.isAttribute=!0,this.rawValue=this.actor.data.data.attribs[this.attribute].value)),this.luckSpent||this.isSimpleRoll||(this.modifiedResult<=this.rawValue&&(this.successLevel=CoC7Check.successLevel.regular),this.modifiedResult<=this.hardThreshold&&(this.successLevel=CoC7Check.successLevel.hard),this.modifiedResult<=this.extremeThreshold&&(this.successLevel=CoC7Check.successLevel.extreme),this.modifiedResult>this.rawValue&&(this.successLevel=CoC7Check.successLevel.failure),1===this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.critical),this.fumbleThreshold<=this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.fumble)),this.successLevel){case CoC7Check.successLevel.regular:this.resultType=game.i18n.format("CoC7.RegularSuccess");break;case CoC7Check.successLevel.hard:this.resultType=game.i18n.format("CoC7.HardSuccess");break;case CoC7Check.successLevel.extreme:this.resultType=game.i18n.format("CoC7.ExtremeSuccess");break;case CoC7Check.successLevel.critical:this.resultType=game.i18n.format("CoC7.CriticalSuccess");break;case CoC7Check.successLevel.fumble:this.resultType=game.i18n.format("CoC7.Fumble");break;case CoC7Check.successLevel.failure:this.resultType=game.i18n.format("CoC7.Failure")}if(this.unknownDifficulty?this.successRequired="":this.isSimpleRoll||(this.successRequired=game.i18n.format("CoC7.SuccessRequired",{successRequired:this.difficultyString})),1===this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.critical),this.luckSpent||this.isUnknown||this.isSimpleRoll||(this.isFailure=this.failed,this.isSuccess=this.passed),this.hasMalfunction=!1,this.isFumble&&(this.successLevel=CoC7Check.successLevel.fumble),this.item&&(this.isItem=!0,this.item.data.data.malfunction&&Number(this.modifiedResult)>=Number(this.item.data.data.malfunction)&&(this.hasMalfunction=!0,this.malfunctionTxt=game.i18n.format("CoC7.Malfunction",{itemName:this.item.name}),await this.item.toggleItemFlag(CoC7Item.flags.malfunction))),this.canBePushed=!!this.skill&&this.skill.canBePushed(),null!=this.characteristic&&(this.canBePushed=!0),this.isFumble&&(this.canBePushed=!1),this.denyPush&&(this.canBePushed=!1),!this.denyLuck&&this.actor){if(!(this.luckSpent||this.passed||this.isFumble||this.difficulty===CoC7Check.difficultyLevel.critical||this.unknownDifficulty)&&(this.skill||this.characteristic)){const luckNeeded=this.modifiedResult-this.succesThreshold;this.actor.luck>luckNeeded&&(this.hasEnoughLuck=!0,this.luckNeeded=luckNeeded,this.luckNeededTxt=game.i18n.format("CoC7.SpendLuck",{luckNeededValue:luckNeeded}))}if(!this.luckSpent&&(this.increaseSuccess=[],!this.pushing&&"lck"!==this.attribute&&"san"!==this.attribute)){if(this.unknownDifficulty&&this.modifiedResult>this.regularThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.RegularDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.regular,nextLevel.luckToSpend=this.modifiedResult-this.regularThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}if(this.difficulty<=CoC7Check.difficultyLevel.regular&&this.modifiedResult>this.hardThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.HardDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.hard,nextLevel.luckToSpend=this.modifiedResult-this.hardThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}if(this.difficulty<=CoC7Check.difficultyLevel.hard&&this.modifiedResult>this.extremeThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.ExtremeDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.extreme,nextLevel.luckToSpend=this.modifiedResult-this.extremeThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}}this.canIncreaseSuccess=this.increaseSuccess.length>0,this.isFumble&&(this.canIncreaseSuccess=!1)}if(this.canAwardExperience=this.skill&&!this.skill.data.data.properties.noxpgain,!(this.passed&&this.diceModifier<=0&&this.skill)||this.skill.data.data.properties.noxpgain||this.luckSpent||this.forced||this.isBlind||this.isUnknown||this.flagForDevelopement(),this.parent){const parent=await fromUuid(this.parent);parent&&"updateRoll"in parent&&await parent.updateRoll(this.JSONRollString)}}showDiceRoll(){if(game.modules.get("dice-so-nice")?.active){const diceResults=[];this.dices.tens.forEach((dieResult=>{diceResults.push(100===dieResult.value?0:dieResult.value/10)})),diceResults.push(this.dices.unit.value);const diceData={formula:`${this.dices.tens.length}d100+1d10`,results:diceResults,whisper:null,blind:!1};game.dice3d.show(diceData)}}get cssClass(){let cssClass="";return this.isSuccess&&(cssClass="success"),this.isFailure&&(cssClass="failure"),this.isCritical&&!this.isFailure&&(cssClass="success critical"),this.isFumble&&!this.isSuccess&&(cssClass="failure fumble"),CoC7Check.successLevel.regular===this.successLevel&&(cssClass+=" regular-success"),CoC7Check.successLevel.hard===this.successLevel&&(cssClass+=" hard-success"),CoC7Check.successLevel.extreme===this.successLevel&&(cssClass+=" extreme-success"),cssClass}get cssClassList(){const cssClass=[];return this.isSuccess&&cssClass.push("success"),this.isFailure&&cssClass.push("failure"),this.isCritical&&!this.isFailure&&cssClass.push("success","critical"),this.isFumble&&!this.isSuccess&&cssClass.push("failure","fumble"),CoC7Check.successLevel.regular===this.successLevel&&cssClass.push("regular-success"),CoC7Check.successLevel.hard===this.successLevel&&cssClass.push("hard-success"),CoC7Check.successLevel.extreme===this.successLevel&&cssClass.push("extreme-success"),cssClass}get playerCssClass(){return this.isSuccess||this.forcedSuccess?"success":this.isFailure||this.forcedFailure?"failure":null}async upgradeCheck(upgradeindex,update=!0){const increasedSuccess=this.increaseSuccess[upgradeindex],luckAmount=parseInt(increasedSuccess.luckAmount)||parseInt(increasedSuccess.luckToSpend);if(!this.actor.spendLuck(luckAmount))return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:this.actor.name}));this.totalLuckSpent=parseInt(this.totalLuckSpent)?parseInt(this.totalLuckSpent):0,this.totalLuckSpent+=parseInt(luckAmount);const newSuccessLevel=parseInt(increasedSuccess.newSuccessLevel)||parseInt(increasedSuccess.difficulty);this.successLevel=newSuccessLevel,this.difficulty<=newSuccessLevel&&(this.isSuccess=!0,this.isFailure=!1);for(let index=0;index<upgradeindex+1;index++)this.increaseSuccess.shift();return this.increaseSuccess.forEach((s=>{s.luckToSpend=s.luckToSpend-luckAmount})),this.luckSpent=!0,this.computeCheck(),update?await this.updateChatCard():void 0}removeUpgrades(){this.canIncreaseSuccess=!1,this.increaseSuccess=[],this.luckNeeded=0,this.luckNeededTxt=null,this.canBePushed=!1}forcePass(luckAmount=null,update=!0){luckAmount?(this.actor.spendLuck(luckAmount),this.successLevel=this.difficulty,this.increaseSuccess.forEach((s=>{s.luckToSpend=s.luckToSpend-luckAmount})),this.luckSpent=!0,this.isSuccess=!0,this.totalLuckSpent=parseInt(this.totalLuckSpent)?parseInt(this.totalLuckSpent):0,this.totalLuckSpent+=parseInt(luckAmount),this.computeCheck(),update&&this.updateChatCard()):(this.forced=!0,this.forcedSuccess=!0,this.isUnknown?this.forceSuccessLevel(CoC7Check.successLevel.regular,update):this.forceSuccessLevel(this.difficulty,update))}forceFail(update=!0){this.forced=!0,this.forcedFailure=!0,this.isUnknown?this.forceSuccessLevel(CoC7Check.successLevel.failure,update):this.forceSuccessLevel(this.difficulty-1,update)}_forceCheck(high,low,update=!0){let total=Math.floor(Math.random()*(high-low))+low+1;const unitTotal=total%10;let tenTotal=Math.floor(total/10);const tens=[];let hasEnough=Math.abs(this.diceModifier)===tens.length;for(;!hasEnough;){let ten=Math.floor(10*Math.random()),roll=10*ten+unitTotal;0===roll&&(roll=100,ten=100),this.hasPenalty&&roll<=high&&(tens.push(ten),roll>total&&(total=roll)),this.hasBonus&&roll>low&&(tens.push(ten),roll<total&&(total=roll)),hasEnough=tens.length===Math.abs(this.diceModifier)}10===tenTotal&&0===unitTotal&&(tenTotal=100),tens.splice(Math.floor(Math.random()*tens.length+1),0,10===tenTotal?0:tenTotal),this.dices.tens=[],this.dices.unit.value=unitTotal,this.modifiedResult=total,this.dices.total=total,this.dices.tenResult=total-unitTotal;const max=0===unitTotal?100:90,min=0===unitTotal?10:0;let selected=total-unitTotal;for(let i=0;i<tens.length;i++){const die={};die.value=tens[i],die.value===selected?(selected=101,die.selected=!0,this.hasBonus?(die.isMax=!0,die.isMin=!1):(die.isMin=!0,die.isMax=!1)):(die.value===max?die.isMax=!0:die.isMax=!1,die.value===min?die.isMin=!0:die.isMin=!1),this.dices.tens.push(die)}this.computeCheck(),update&&this.updateChatCard()}forceSuccessLevel(successLevel,update=!0){let high,low;CoC7Check.successLevel.fumble===successLevel&&(high=100,low=this.fumbleThreshold-1),CoC7Check.successLevel.failure===successLevel&&(high=this.regularThreshold===this.fumbleThreshold-1?100:this.fumbleThreshold-1,low=this.regularThreshold),CoC7Check.successLevel.regular===successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.hard===successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.extreme===successLevel&&(high=this.extremeThreshold,low=1),CoC7Check.successLevel.critical===successLevel&&(high=1,low=0),high===low&&low--,0===high&&(high=this.fumbleThreshold-1),this._forceCheck(high,low,update)}increaseSuccessLevel(update=!0){let high,low;CoC7Check.successLevel.fumble===this.successLevel&&(high=this.fumbleThreshold-1,low=this.regularThreshold===this.fumbleThreshold-1?this.hardThreshold:this.regularThreshold),CoC7Check.successLevel.failure===this.successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.regular===this.successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.hard===this.successLevel&&(high=this.extremeThreshold,low=this.criticalThreshold),CoC7Check.successLevel.extreme===this.successLevel&&(high=this.criticalThreshold,low=0),high===low&&low--,this._forceCheck(high,low,update)}decreaseSuccessLevel(update=!0){let high,low;CoC7Check.successLevel.failure===this.successLevel&&(high=100,low=this.fumbleThreshold-1),CoC7Check.successLevel.regular===this.successLevel&&(high=this.fumbleThreshold-1,low=this.regularThreshold),CoC7Check.successLevel.hard===this.successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.extreme===this.successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.critical===this.successLevel&&(high=this.extremeThreshold,low=1),0===high&&(high=this.fumbleThreshold-1),this._forceCheck(high,low,update)}async flagForDevelopement(){this.flaggedForDevelopment=!0,this.skill&&await this.skill.flagForDevelopement()}set difficulty(x){this._difficulty=parseInt(x)}get difficulty(){return this._difficulty}set flavor(x){this._flavor=x}set context(x){this._context=x}get context(){if(this._context)return this._context}set parent(x){this.uuid||(this.uuid=foundry.utils.randomID(16)),this.parentUuid=x}get parent(){if(this.parentUuid)return this.parentUuid}get flavor(){if(this._flavor)return this._flavor;let flavor="";return this.actor?.data&&(this.skill?flavor=game.i18n.format("CoC7.CheckResult",{name:this.skill.name,value:this.rawValueString,difficulty:this.difficultyString}):this.item?flavor=game.i18n.format("CoC7.ItemCheckResult",{item:this.item.name,skill:this.skill.name,value:this.rawValueString,difficulty:this.difficultyString}):this.characteristic?flavor=game.i18n.format("CoC7.CheckResult",{name:game.i18n.format(this.actor.data.data.characteristics[this.characteristic].label),value:this.rawValueString,difficulty:this.difficultyString}):this.attribute?flavor=game.i18n.format("CoC7.CheckResult",{name:game.i18n.format(`CoC7.${this.actor.data.data.attribs[this.attribute].label}`),value:this.rawValueString,difficulty:this.difficultyString}):this.displayName&&(flavor=game.i18n.format("CoC7.CheckResult",{name:this.displayName,value:this.rawValueString,difficulty:this.difficultyString}))),flavor||this.rawValue&&(flavor=this.displayName?game.i18n.format("CoC7.CheckResult",{name:this.displayName,value:this.rawValueString,difficulty:this.difficultyString}):game.i18n.format("CoC7.CheckRawValue",{rawvalue:this.rawValue,difficulty:this.difficultyString})),this.pushing&&(flavor=`${game.i18n.format("CoC7.Pushing")} ${flavor}`),flavor}get tooltipHeader(){return this.attribute?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:game.i18n.format(`CoC7.${this.actor.data.data.attribs[this.attribute].label}`)})+` (${this.actor.data.data.attribs[this.attribute].value}%)`:this.characteristic?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:game.i18n.localize(this.actor.data.data.characteristics[this.characteristic].label)})+` (${this.actor.data.data.characteristics[this.characteristic].value}%)`:this.skill?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:this.skill.name})+` (${this.skill.value}%)`:this.displayName?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:this.displayName})+` (${this.rawValueString}%)`:null}async getHtmlRollElement(options={}){this.options?this.options=mergeObject(this.options,options):this.options=options;const html=await renderTemplate("systems/CoC7/templates/chat/rolls/in-card-roll.html",this);return html?$.parseHTML(html)[0]:null}async getHtmlRoll(options={}){this.options?this.options=mergeObject(this.options,options):this.options=options;return await renderTemplate("systems/CoC7/templates/chat/rolls/in-card-roll.html",this)||void 0}async toMessage(pushing=!1){this.pushing=pushing;const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this),speakerData={};let speaker;this.actor?this.actor.isToken?speakerData.token=this.token.document:this.actor.isDummy?this.actor.name&&(speaker={alias:this.actor.name}):(speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor?.user?this.actor.user:game.user).id,speaker,flavor:this.flavor,content:html,flags:{CoC7:{type:CoC7Check.cardType}}};if(this.uuid&&(chatData.flags.CoC7.uuid=this.uuid),this.context&&(chatData.flags.CoC7.context=this.context),"selfroll"===this.rollMode)if(game.user.isGM){if(chatData.user=game.user.id,chatData.flavor=`[${this.actor.name}] ${chatData.flavor}`,chatData.flags={CoC7:{GMSelfRoll:!0,originalSpeaker:duplicate(chatData.speaker)}},game.user.isGM)switch(game.settings.get("CoC7","selfRollWhisperTarget")){case"owners":delete chatData.speaker,chatData.whisper=this.actor.owners,chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER;break;case"everyone":delete chatData.speaker,chatData.whisper=game.users.players,chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER;break;default:ChatMessage.applyRollMode(chatData,this.rollMode)}}else ChatMessage.applyRollMode(chatData,this.rollMode);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),this.dice?.roll&&!this.dice?.hideDice&&(chatData.roll=this.dice.roll,chatData.type=CONST.CHAT_MESSAGE_TYPES.ROLL,chatData.rollMode=this.isBlind?"blindroll":this.rollMode),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard({makePublic=!1,forceRoll=!1}={}){makePublic&&(this.rollMode=!1);const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this);let newContent=html;if(!this.messageId)return $.parseHTML(html)[0];const message=game.messages.get(this.messageId),htmlMessage=$.parseHTML(message.data.content)[0];if(!htmlMessage.classList.contains("roll-result")){const htmlCheck=$.parseHTML(html)[0],rollResultElement=htmlMessage.querySelector(".roll-result");null!==rollResultElement&&rollResultElement.replaceWith(htmlCheck),newContent=htmlMessage.outerHTML}const chatData={flavor:this.flavor,content:newContent};CONST.CHAT_MESSAGE_TYPES.ROLL===message.data.type&&(message.data.whisper?.length?chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER:chatData.type=CONST.CHAT_MESSAGE_TYPES.OTHER),makePublic&&(chatData.whisper=[],chatData.blind=!1),ChatMessage.applyRollMode(chatData),forceRoll&&this.dice?.roll&&await CoC7Dice.showRollDice3d(this.dice.roll);const msg=await message.update(chatData);return await ui.chat.updateMessage(msg,!1),msg}static async updateCardSwitch(event){const card=event.currentTarget.closest(".chat-card"),check=await CoC7Check.getFromCard(card);check.gmDifficultyRegular=!1,check.gmDifficultyHard=!1,check.gmDifficultyExtreme=!1,check.gmDifficultyCritical=!1,"gmDifficultyRegular"===event.currentTarget.dataset.flag&&(check.gmDifficultyRegular=!0),"gmDifficultyHard"===event.currentTarget.dataset.flag&&(check.gmDifficultyHard=!0),"gmDifficultyExtreme"===event.currentTarget.dataset.flag&&(check.gmDifficultyExtreme=!0),"gmDifficultyCritical"===event.currentTarget.dataset.flag&&(check.gmDifficultyCritical=!0),check.computeCheck(),check.updateChatCard()}async shortResult(details=!1){this.details=details||!1;return await renderTemplate("systems/CoC7/templates/chat/roll.html",this)}get tooltip(){return renderTemplate("systems/CoC7/templates/chat/rolls/roll-tooltip.html",this)}get inlineCheck(){const a=document.createElement("a");return a.classList.add("coc7-inline-check"),a.classList.add("coc7-check-result"),a.classList.add("coc7-inline"),a.classList.add(...this.cssClassList),a.title=this.tooltipHeader,a.dataset.roll=escape(this.JSONRollString),a.innerHTML=`<i class="game-icon game-icon-d10"></i> ${this.modifiedResult||"??"}`,a}get rollToolTip(){if(this.standby)return;const parts=[],tens=this.dices.tens.map((r=>({result:r.value,selected:r.selected,classes:["die","d10",r.selected?null:"discarded",r.isMin?"min":null,r.isMax?"max":null].filter((c=>c)).join(" ")}))),unit=[{result:this.dices.unit.value,selected:!0,classes:"die d10"}];return parts.push({formula:this.tooltipHeader,total:this.modifiedResult,icons:this.successLevelIcons,class:this.cssClass,successRequired:this.successRequired,resultType:this.resultType,face:10,rolls:[...tens,...unit]}),renderTemplate("systems/CoC7/templates/chat/rolls/roll-tooltip.html",{parts})}get JSONRollData(){return JSON.parse(this.JSONRollString)}get JSONRollString(){return JSON.stringify(this,((key,value)=>{if(null===value)return;return["_actor","_skill","_item"].includes(key)?void 0:value}))}static fromData(data){return Object.assign(new CoC7Check,data)}static fromRollString(dataString){let data;try{data=JSON.parse(unescape(dataString))}catch(err){return ui.notifications.error(err.message),null}return CoC7Check.fromData(data)}static async alter(check,command,options={}){switch(command){case"useLuck":if(options.target.classList.contains("pass-check")){const luckAmount=parseInt(options.target.dataset.luckAmount);check.forcePass(luckAmount,options.update)}else{const upgradeIndex=parseInt(options.target.dataset.index);await check.upgradeCheck(upgradeIndex,options.update)}break;case"force-pass":check.forcePass(null,options.update);break;case"force-fail":check.forceFail(options.update);break;case"increase-success-level":check.increaseSuccessLevel(options.update);break;case"decrease-success-level":check.decreaseSuccessLevel(options.update);break;case"reveal-check":check.isBlind=!1,check.rollMode=!1,check.computeCheck(),options.update&&check.updateChatCard();break;case"flag-for-development":await check.flagForDevelopement(),check.computeCheck(),options.update&&check.updateChatCard();break;case"push":await check._perform(),check.pushing=!0,options.update&&check.updateChatCard()}}static async _onClickInlineRoll(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("coc7-check-result"))return a.classList.contains("expanded")?CoC7Check._collapseInlineResult(a):CoC7Check._expandInlineResult(a)}static _collapseInlineResult(a){if(!a.classList.contains("coc7-inline-check"))return;if(!a.classList.contains("expanded"))return;const tooltip=a.querySelector(".coc7-check-tooltip");return tooltip&&tooltip.remove(),a.classList.remove("expanded")}static async _expandInlineResult(a){if(!a.classList.contains("coc7-inline-check"))return;if(a.classList.contains("expanded"))return;const check=Object.assign(new CoC7Check,JSON.parse(unescape(a.dataset.roll)));if(check.standby)return;const tip=document.createElement("div");tip.innerHTML=await check.rollToolTip;const tooltip=tip.children[0];a.appendChild(tooltip),a.classList.add("expanded");const pa=a.getBoundingClientRect(),pt=tooltip.getBoundingClientRect();tooltip.style.left=`${Math.min(pa.x,window.innerWidth-(pt.width+3))}px`,tooltip.style.top=`${Math.min(pa.y+pa.height+3,window.innerHeight-(pt.height+3))}px`;const zi=getComputedStyle(a).zIndex;tooltip.style.zIndex=Number.isNumeric(zi)?zi+1:100}}class RollDialog{static async create(options={}){options.difficulty&&(options.difficultyLevel={},CoC7Check.difficultyLevel.unknown===options.difficulty&&(options.difficultyLevel.unknown=!0),CoC7Check.difficultyLevel.regular===options.difficulty&&(options.difficultyLevel.regular=!0),CoC7Check.difficultyLevel.hard===options.difficulty&&(options.difficultyLevel.hard=!0),CoC7Check.difficultyLevel.extreme===options.difficulty&&(options.difficultyLevel.extreme=!0)),options.name&&!options.displayName&&(options.displayName=options.name);const unknownDifficultyDefault="unknown"===game.settings.get("CoC7","defaultCheckDifficulty"),html=await renderTemplate("systems/CoC7/templates/apps/bonus.html",{allowFlatDiceModifier:game.settings.get("CoC7","allowFlatDiceModifier")&&!options.disableFlatDiceModifier,allowFlatThresholdModifier:game.settings.get("CoC7","allowFlatThresholdModifier")&&!options.disableFlatThresholdModifier,difficulty:CoC7Check.difficultyLevel,unknownDifficultyDefault,options});return new Promise((resolve=>{let formData=null;new Dialog({title:options.displayName?game.i18n.format("CoC7.BonusSelectionWindowNamed",{name:options.displayName}):game.i18n.localize("CoC7.BonusSelectionWindow"),content:html,buttons:{roll:{label:game.i18n.localize("CoC7.RollDice"),callback:html=>(formData=new FormData(html[0].querySelector("#bonus-roll-form")),resolve(formData))}},default:"roll",close:()=>{}}).render(!0)}))}}class SanDataDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(":checkbox").click((()=>this._toggleInput(html)))}_toggleInput(html){html.find('*[name="customname"]').toggle()}static async create(options={}){const html=await renderTemplate("systems/CoC7/templates/apps/sandata.html",options);return new Promise((resolve=>{let formData=null;new SanDataDialog({title:options.displayName?game.i18n.format("CoC7.SanDataSelectionWindowNamed",{name:options.displayName}):game.i18n.localize("CoC7.SanDataSelectionWindow"),content:html,buttons:{Validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#san-data-form")),resolve(formData))}},default:"Validate",close:()=>{}}).render(!0)}))}}class CoC7ActorSheet extends ActorSheet{async getData(){const data=await super.getData(),actorData=this.actor.data.toObject(!1);if(data.data=actorData.data,data.editable=this.isEditable,data.isToken=this.actor.isToken,data.itemsByType={},data.skills={},data.combatSkills={},data.weapons={},data.rangeWpn=[],data.meleeWpn=[],data.actorFlags={},data.permissionLimited=(this.actor.data.permission[game.user.id]===CONST.ENTITY_PERMISSIONS.LIMITED||this.actor.data.permission.default===CONST.ENTITY_PERMISSIONS.LIMITED)&&!game.user.isGM,data.isGM=game.user.isGM,data.alowUnlock="always"===game.settings.get("CoC7","playerUnlockSheetMode")||game.user.isGM||"creation"===game.settings.get("CoC7","playerUnlockSheetMode")&&game.settings.get("CoC7","charCreationEnabled"),"creation"===game.settings.get("CoC7","playerUnlockSheetMode")&&game.settings.get("CoC7","charCreationEnabled")&&(data["data.flags.locked"]=!1),["vehicle"].includes(this.actor.data.type)||(data.data.characteristics||(data.data.characteristics={str:{value:null,short:"CHARAC.STR",label:"CHARAC.Strength",formula:null},con:{value:null,short:"CHARAC.CON",label:"CHARAC.Constitution",formula:null},siz:{value:null,short:"CHARAC.SIZ",label:"CHARAC.Size",formula:null},dex:{value:null,short:"CHARAC.DEX",label:"CHARAC.Dexterity",formula:null},app:{value:null,short:"CHARAC.APP",label:"CHARAC.Appearance",formula:null},int:{value:null,short:"CHARAC.INT",label:"CHARAC.Intelligence",formula:null},pow:{value:null,short:"CHARAC.POW",label:"CHARAC.Power",formula:null},edu:{value:null,short:"CHARAC.EDU",label:"CHARAC.Education",formula:null}}),data.data.attribs||(data.data.attribs={hp:{value:null,max:null,short:"HP",label:"Hit points",auto:!0},mp:{value:null,max:null,short:"HP",label:"Magic points",auto:!0},lck:{value:null,short:"LCK",label:"Luck"},san:{value:null,max:99,short:"SAN",label:"Sanity",auto:!0},mov:{value:null,short:"MOV",label:"Movement rate",auto:!0},db:{value:null,short:"DB",label:"Damage bonus",auto:!0},build:{value:null,short:"BLD",label:"Build",auto:!0},armor:{value:null,auto:!1}}),data.data.status||(data.data.status={criticalWounds:{type:"Boolean",value:!1},unconscious:{type:"Boolean",value:!1},dying:{type:"Boolean",value:!1},dead:{type:"Boolean",value:!1},prone:{type:"Boolean",value:!1},tempoInsane:{type:"boolean",value:!1},indefInsane:{type:"boolean",value:!1}}),data.data.biography||(data.data.biography={personalDescription:{type:"string",value:""}}),data.data.infos||(data.data.infos={occupation:"",age:"",sex:"",residence:"",birthplace:"",archetype:"",organization:"",playername:""}),data.data.flags||(data.data.flags={locked:!0,manualCredit:!1}),data.data.credit||(data.data.credit={monetarySymbol:null,multiplier:null,spent:null,assetsDetails:null}),data.data.development||(data.data.development={personal:null,occupation:null,archetype:null}),data.data.biography||(data.data.biography=[]),data.data.encounteredCreatures||(data.data.encounteredCreatures=[]),data.isInABoutOfMadness=this.actor.isInABoutOfMadness,data.isInsane=this.actor.isInsane,data.boutOfMadness=this.actor.boutOfMadness,data.sanity=this.actor.sanity,data.pulpCharacter=game.settings.get("CoC7","pulpRules")),data.isDead=this.actor.dead,data.isDying=this.actor.dying,data.items){for(const item of data.items){if("skill"===item.type){if(item.data.properties.special){if(item.data.properties.fighting&&item.data.specialization!==game.i18n.localize("CoC7.FightingSpecializationName")){const itemToUpdate=this.actor.items.get(item._id);await itemToUpdate.update({"data.specialization":game.i18n.localize("CoC7.FightingSpecializationName")}),item.data.specialization=game.i18n.localize("CoC7.FightingSpecializationName")}if(item.data.properties.firearm&&item.data.specialization!==game.i18n.localize("CoC7.FirearmSpecializationName")){const itemToUpdate=this.actor.items.get(item._id);await itemToUpdate.update({"data.specialization":game.i18n.localize("CoC7.FirearmSpecializationName")}),item.data.specialization=game.i18n.localize("CoC7.FirearmSpecializationName")}}if("character"!==this.actor.data.type){if(isNaN(Number(item.data.value))){let value=null;const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=getProperty(this,value.substring(5)));try{value=(await new Roll(item.data.value,parsed).evaluate({async:!0})).total}catch(err){console.warn(`unable to parse formula :${item.data.value} for skill ${item.name}`),value=null}if(value){item.data.value=value;const itemToUpdate=this.actor.items.get(item._id);await itemToUpdate.update({"data.value":value})}}}else{const skill=this.actor.items.get(item._id);if(item.data.base=await skill.asyncBase(),item.data.value){const value=item.data.value;let updatedExp=(item.data.adjustments?.experience?parseInt(item.data.adjustments.experience):0)+parseInt(item.data.value)-skill.value;updatedExp<=0&&(updatedExp=null),await this.actor.updateEmbeddedEntity("OwnedItem",{_id:item._id,"data.adjustments.experience":updatedExp,"data.value":null}),item.data.adjustments||(item.data.adjustments={}),item.data.adjustments.experience=updatedExp,item.data.value=value}else item.data.value=skill.value}}let list=data.itemsByType[item.type];list||(list=[],data.itemsByType[item.type]=list),list.push(item)}for(const itemType in data.itemsByType)data.itemsByType[itemType].sort(((a,b)=>{let lca,lcb;return a.data.properties&&b.data.properties?(lca=a.data.properties.special&&void 0!==a.data.specialization?a.data.specialization.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()+a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase():a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase(),lcb=b.data.properties.special&&void 0!==b.data.specialization?b.data.specialization.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()+b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase():b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()):(lca=a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase(),lcb=b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()),lca<lcb?-1:lca>lcb?1:0}));data.skills=data.items.filter((item=>"skill"===item.type)).sort(((a,b)=>{let lca,lcb;return a.data.properties&&b.data.properties?(lca=a.data.properties.special?a.data.specialization.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()+a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase():a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase(),lcb=b.data.properties.special?b.data.specialization.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()+b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase():b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()):(lca=a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase(),lcb=b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()),lca<lcb?-1:lca>lcb?1:0})),data.meleeSkills=data.skills.filter((skill=>!0===skill.data.properties.combat&&!0===skill.data.properties.fighting)),data.rangeSkills=data.skills.filter((skill=>!0===skill.data.properties.combat&&!0===skill.data.properties.firearm));const cbtSkills=data.skills.filter((skill=>!0===skill.data.properties.combat));if(cbtSkills)for(const skill of cbtSkills)data.combatSkills[skill._id]=skill;const weapons=data.itemsByType.weapon;if(weapons)for(const weapon of weapons){if(weapon.usesAlternateSkill=!0===weapon.data.properties.auto||!0===weapon.data.properties.brst,weapon.data.ammo||(weapon.data.ammo=0),weapon.skillSet=!0,""===weapon.data.skill.main.id)weapon.skillSet=!1;else{if(data.combatSkills[weapon.data.skill.main.id]){const skill=this.actor.items.get(weapon.data.skill.main.id);weapon.data.skill.main.name=data.combatSkills[weapon.data.skill.main.id].name,weapon.data.skill.main.value=skill.value}else weapon.skillSet=!1;if(""!==weapon.data.skill.alternativ.id&&data.combatSkills[weapon.data.skill.alternativ.id]){const skill=this.actor.items.get(weapon.data.skill.alternativ.id);weapon.data.skill.alternativ.name=data.combatSkills[weapon.data.skill.alternativ.id].name,weapon.data.skill.alternativ.value=skill.value}}weapon.data._properties=[];for(const[key,value]of Object.entries(COC7.weaponProperties)){const property={};property.id=key,property.name=value,property.value=!0===weapon.data.properties[key],weapon.data._properties.push(property)}data.weapons[weapon._id]=weapon,weapon.data.properties.rngd?data.rangeWpn.push(weapon):data.meleeWpn.push(weapon)}const token=this.token;if(data.tokenId=token?`${token.parent?.id?token.parent.id:"TOKEN"}.${token.id}`:null,data.hasEmptyValueWithFormula=!1,data.data.characteristics)for(const characteristic of Object.values(data.data.characteristics))characteristic.value||(characteristic.editable=!0),characteristic.hard=Math.floor(characteristic.value/2),characteristic.extreme=Math.floor(characteristic.value/5),characteristic.value||characteristic.formula?characteristic.display=!0:characteristic.display=!1,!characteristic.value&&characteristic.formula&&(characteristic.hasEmptyValueWithFormula=!0),data.hasEmptyValueWithFormula=data.hasEmptyValueWithFormula||characteristic.hasEmptyValueWithFormula}if(["vehicle"].includes(this.actor.data.type))data.data.attribs.hp.auto=!1,data.data.attribs.mp.auto=!1,data.data.attribs.san.auto=!1,data.data.attribs.mov.auto=!1,data.data.attribs.db.auto=!1,data.data.attribs.build.auto=!1;else{const auto=this.actor.checkUndefinedAuto();data.data=mergeObject(data.data,auto)}return data.data.attribs.mov.value=this.actor.mov,data.data.attribs.db.value=this.actor.db,data.data.attribs.build.value=this.actor.build,void 0===this.actor.compendium&&(this.actor.update({"data.attribs.mov.value":this.actor.mov},{render:!1}),this.actor.update({"data.attribs.mov.max":this.actor.mov},{render:!1}),this.actor.update({"data.attribs.db.value":this.actor.db},{render:!1}),this.actor.update({"data.attribs.build.current":this.actor.build},{render:!1}),this.actor.update({"data.attribs.build.value":this.actor.build},{render:!1})),data.data.attribs.mp.value<0&&(data.data.attribs.mp.value=null),data.data.attribs.san.value<0&&(data.data.attribs.san.value=null),data.data.attribs.hp.auto&&null!=data.data.characteristics.siz.value&&null!=data.data.characteristics.con.value&&(data.data.attribs.hp.max=this.actor.hpMax),data.data.attribs.mp.auto&&null!=data.data.characteristics.pow.value&&(data.data.attribs.mp.max=Math.floor(data.data.characteristics.pow.value/5)),data.data.attribs.san.auto&&(data.data.attribs.san.max=this.actor.sanMax),(data.data.attribs.mp.value>data.data.attribs.mp.max||null==data.data.attribs.mp.max)&&(data.data.attribs.mp.value=data.data.attribs.mp.max),(data.data.attribs.hp.value>data.data.attribs.hp.max||null==data.data.attribs.hp.max)&&(data.data.attribs.hp.value=data.data.attribs.hp.max),null==data.data.attribs.hp.value&&null!=data.data.attribs.hp.max&&(data.data.attribs.hp.value=data.data.attribs.hp.max),null==data.data.attribs.mp.value&&null!=data.data.attribs.mp.max&&(data.data.attribs.mp.value=data.data.attribs.mp.max),["vehicle"].includes(this.actor.data.type)||(null==data.data.attribs.san.value&&null!=data.data.characteristics.pow.value&&(data.data.attribs.san.value=data.data.characteristics.pow.value),data.data.attribs.san.value>data.data.attribs.san.max&&(data.data.attribs.san.value=data.data.attribs.san.max),data.data.biography instanceof Array&&data.data.biography.length&&(data.data.biography[0].isFirst=!0,data.data.biography[data.data.biography.length-1].isLast=!0),data.data.indefiniteInsanityLevel={},data.data.indefiniteInsanityLevel.value=data.data.attribs.san.dailyLoss?data.data.attribs.san.dailyLoss:0,data.data.indefiniteInsanityLevel.max=Math.floor(data.data.attribs.san.value/5)),data.hasInventory=Object.prototype.hasOwnProperty.call(data.itemsByType,"item")||Object.prototype.hasOwnProperty.call(data.itemsByType,"book")||Object.prototype.hasOwnProperty.call(data.itemsByType,"spell")||Object.prototype.hasOwnProperty.call(data.itemsByType,"talent"),data}static parseFormula(formula){let parsedFormula=formula;for(const[key,value]of Object.entries(COC7.formula.actorsheet))parsedFormula=parsedFormula.replace(key,value);return parsedFormula}get tokenKey(){throw ui.notifications.error("DEPRECATED SHOULD NOT HAPPEN!"),new Error("base.js get tokenKey(): DEPRECATED SHOULD NOT HAPPEN!")}onCloseSheet(){}activateListeners(html){if(super.activateListeners(html),this.actor.isOwner&&void 0===this.actor.compendium){html.find(".characteristic-label").on("dragstart",(event=>this._onDragCharacteristic(event))),html.find(".attribute-label").on("dragstart",(event=>this._onDragAttribute(event))),html.find(".san-check").on("dragstart",(event=>this._onDragSanCheck(event))),html.find(".characteristic-label").contextmenu(this._onOpposedRoll.bind(this)),html.find(".skill-name.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".attribute-label.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".weapon-name.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".characteristic-label").click(this._onRollCharacteriticTest.bind(this)),html.find(".skill-name.rollable").click(this._onRollSkillTest.bind(this)),html.find(".skill-image").click(this._onRollSkillTest.bind(this)),html.find(".attribute-label.rollable").click(this._onRollAttribTest.bind(this)),html.find(".lock").click(this._onLockClicked.bind(this)),html.find(".flag").click(this._onFlagClicked.bind(this)),html.find(".formula").click(this._onFormulaClicked.bind(this)),html.find(".roll-characteritics").click(this._onRollCharacteriticsValue.bind(this)),html.find(".average-characteritics").click(this._onAverageCharacteriticsValue.bind(this)),html.find(".toggle-switch").click(this._onToggle.bind(this)),html.find(".auto-toggle").click(this._onAutoToggle.bind(this)),(game.user.isGM||game.settings.get("CoC7","statusPlayerEditable"))&&(html.find(".reset-counter").click(this._onResetCounter.bind(this)),html.find(".status-monitor").click(this._onStatusToggle.bind(this)),html.find(".is-dying").click(this.heal.bind(this)),html.find(".is-dead").click(this.revive.bind(this))),html.find(".dying-check").click(this.checkForDeath.bind(this)),html.find(".item .item-image").click((event=>this._onItemRoll(event))),html.find(".weapon-name.rollable").click((event=>this._onWeaponRoll(event))),html.find(".weapon-skill.rollable").click((async event=>this._onWeaponSkillRoll(event))),html.find(".reload-weapon").click((event=>this._onReloadWeapon(event))),html.find(".reload-weapon").on("contextmenu",(event=>this._onReloadWeapon(event))),html.find(".add-ammo").click(this._onAddAmo.bind(this)),html.find(".read-only").dblclick(this._toggleReadOnly.bind(this)),html.on("click",".weapon-damage",this._onWeaponDamage.bind(this)),html.find(".inventory-header").click(this._onInventoryHeader.bind(this)),html.find(".section-header").click(this._onSectionHeader.bind(this));const wheelInputs=html.find(".attribute-value");for(const wheelInput of wheelInputs)wheelInput.addEventListener("wheel",(event=>this._onWheel(event)),{passive:!0})}this.options.editable&&(html.find(".show-detail").click((event=>this._onItemSummary(event))),html.find(".item-popup").click(this._onItemPopup.bind(this)),html.find(".item-edit").click((ev=>{const li=$(ev.currentTarget).parents(".item");this.actor.items.get(li.data("itemId")).sheet.render(!0)})),html.find(".item-delete").click((async ev=>{const li=$(ev.currentTarget).parents(".item"),itemToDelete=this.actor.items.get(li.data("itemId"),{strict:!0});await itemToDelete.delete(),li.slideUp(200,(()=>this.render(!1)))})),html.find(".add-item").click((ev=>{switch(ev.currentTarget.dataset.type){case"skill":this.actor.createEmptySkill(ev);break;case"item":this.actor.createEmptyItem(ev);break;case"weapon":this.actor.createEmptyWeapon(ev)}})),html.find(".add-new-section").click((()=>{this.actor.createBioSection()})),html.find(".delete-section").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.deleteBioSection(index)})),html.find(".move-section-up").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.moveBioSectionUp(index)})),html.find(".move-section-down").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.moveBioSectionDown(index)})),html.find(".development-flag").dblclick((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("developement")})),html.find(".occupation-skill-flag.clickable").click((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("occupation")})),html.find(".archetype-skill-flag.clickable").click((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("archetype")})),html.find(".skill-developement").click((event=>{this.actor.developementPhase(event.shiftKey)})),html.find(".luck-development").click((event=>{event.detail&&1!==event.detail||this.actor.developLuck(event.shiftKey)})),html.find("a.coc7-link").on("click",(async event=>await CoC7Parser._onCheck(event))),html.find("a.coc7-link").on("dragstart",(event=>CoC7Parser._onDragCoC7Link(event))),html.find(".test-trigger").click((async event=>{await OpposedCheckCard.dispatch({type:OpposedCheckCard.defaultConfig.type,combat:!1,action:"new",roll:{characteristic:"str",actor:this.actor.actorKey}}),await OpposedCheckCard.dispatch({type:OpposedCheckCard.defaultConfig.type,combat:!1,action:"new",roll:{characteristic:"con"}}),event.shiftKey&&ui.notifications.info("Shift cliecked")})))}_onDragCharacteristic(event){const box=event.currentTarget.parentElement,data={CoC7Type:"link",linkType:"coc7-link",check:"check",type:"characteristic",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,name:box.dataset.characteristic,icon:null};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}_onDragAttribute(event){const box=event.currentTarget.parentElement,data={CoC7Type:"link",linkType:"coc7-link",check:"check",type:"attribute",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,name:box.dataset.attrib,icon:null};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}_onDragSanCheck(event){const sanMin=event.currentTarget.querySelector(".san-value.pass"),sanMax=event.currentTarget.querySelector(".san-value.failed"),data={CoC7Type:"link",linkType:"coc7-link",check:"sanloss",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,sanMin:sanMin.innerText,sanMax:sanMax.innerText,icon:null};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}async _onDrop(event){await super._onDrop(event)}async _onStatusToggle(event){event.preventDefault(),event.currentTarget.dataset.status?await this.actor.toggleStatus(event.currentTarget.dataset.status):event.currentTarget.dataset.effect&&await this.actor.toggleEffect(event.currentTarget.dataset.effect)}async revive(){game.user.isGM&&this.actor.unsetStatus(COC7.status.dead)}async heal(){game.user.isGM&&this.actor.unsetStatus(COC7.status.dying)}async checkForDeath(event){const conCheck=new CoC7ConCheck(this.actor.isToken?this.actor.tokenKey:this.actor.id);conCheck.stayAlive=!0,conCheck.toMessage(event.shiftKey)}async _onResetCounter(event){event.preventDefault();const counter=event.currentTarget.dataset.counter,oneFifthSanity=" / "+Math.floor(this.actor.data.data.attribs.san.value/5);this.actor.setOneFifthSanity(oneFifthSanity),counter&&this.actor.resetCounter(counter)}async _onAutoToggle(event){if(event.currentTarget.closest(".attribute")){const attrib=event.currentTarget.closest(".attribute").dataset.attrib;this.actor.toggleAttribAuto(attrib)}}async _onToggle(event){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);weapon&&weapon.toggleProperty(event.currentTarget.dataset.property,event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode)}async _onRollCharacteriticsValue(){await this.actor.rollCharacteristicsValue()}async _onAverageCharacteriticsValue(){this.actor.averageCharacteristicsValue()}async _onLockClicked(event){event.preventDefault();const isLocked=this.actor.locked;this.actor.locked=!isLocked}async _onFlagClicked(event){event.preventDefault();const flagName=event.currentTarget.dataset.flag;this.actor.toggleActorFlag(flagName)}async _onFormulaClicked(event){event.preventDefault(),this.actor.toggleActorFlag("displayFormula")}async _onWheel(event){let value=parseInt(event.currentTarget.value);switch(event.deltaY>0&&(value=0===value?0:value-1),event.deltaY<0&&(value+=1),event.currentTarget.name){case"data.attribs.hp.value":this.actor.setHp(value);break;case"data.attribs.mp.value":this.actor.setMp(value);break;case"data.attribs.san.value":this.actor.setSan(value);break;case"data.attribs.lck.value":this.actor.setLuck(value);break;case"data.attribs.build.current":this.actor.setHp(value)}}_toggleReadOnly(event){event.currentTarget.readOnly=!event.currentTarget.readOnly,event.currentTarget.classList.toggle("read-only")}_onItemSummary(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id")),chatData=item.getChatData({secrets:this.actor.isOwner});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$('<div class="item-summary"></div>'),labels=$('<div class="item-labels"></div>');if(chatData.labels.forEach((p=>labels.append(`<div class="item-label"><span class="label-name">${p.name} :</span><span class="label-value">${p.value}</span></div>`))),div.append(labels),div.append($(`<div class="item-description">${chatData.description.value}</div>`)),item.data.data.properties?.spcl){const specialDiv=$(`<div class="item-special">${chatData.description.special}</div>`);div.append(specialDiv)}const props=$('<div class="item-properties"></div>');chatData.properties.forEach((p=>props.append(`<div class="tag item-property">${game.i18n.localize(p)}</div>`))),div.append(props),li.append(div.hide()),CoC7Parser.bindEventsHandler(div),div.slideDown(200)}li.toggleClass("expanded")}_onSectionHeader(event){event.preventDefault();const section=event.currentTarget.closest("section"),pannelClass=event.currentTarget.dataset.pannel,pannel=$(section).find(`.pannel.${pannelClass}`);pannel.hasClass("expanded")?pannel.slideUp(200):pannel.slideDown(200),pannel.toggleClass("expanded")}_onInventoryHeader(event){event.preventDefault();$(event.currentTarget).parents(".inventory-section").find("ol").toggle()}async _onItemPopup(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id"));CoC7ActorSheet.popupSkill(item)}static async popupSkill(skill){skill.data.data.description.enrichedValue=TextEditor.enrichHTML(skill.data.data.description.value);new Dialog({title:game.i18n.localize("CoC7.SkillDetailsWindow"),content:skill,buttons:{},close:()=>{}},{classes:["coc7","sheet","skill"],width:520,height:480,scrollY:[".item-description"],template:"systems/CoC7/templates/apps/skill-details.html"}).render(!0)}async _onItemRoll(event){event.preventDefault()}async _onWeaponRoll(event){event.preventDefault();const itemId=event.currentTarget.closest("li").dataset.itemId,fastForward=event.shiftKey,weapon=this.actor.items.get(itemId);let actorKey;if(actorKey=this.token?this.actor.isToken&&game.actors.tokens[this.token.id]?`TOKEN.${this.token.id}`:`${this.token.parent.id}.${this.token.id}`:this.actor.id,isCtrlKey(event)&&game.user.isGM){const linkData={check:"item",type:"weapon",name:weapon.name,hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey};CoC7LinkCreationDialog.fromLinkData(linkData).then((dlg=>dlg.render(!0)))}else{let proceedWithoutTarget;if(game.user.targets.size<=0&&(proceedWithoutTarget=await new Promise((resolve=>{const data={title:" ",content:game.i18n.format("CoC7.NoTargetSelected",{weapon:weapon.name}),buttons:{cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>resolve(!1)},proceed:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>resolve(!0)}},default:"cancel",classes:["coc7","dialog"]};new Dialog(data).render(!0)}))),game.user.targets.size>0||proceedWithoutTarget){if(!weapon.data.data.properties.rngd){game.user.targets.size>1&&ui.notifications.warn(game.i18n.localize("CoC7.WarnTooManyTarget"));new CoC7MeleeInitiator(actorKey,itemId,fastForward).createChatCard()}if(weapon.data.data.properties.rngd){new CoC7RangeInitiator(actorKey,itemId,fastForward).createChatCard()}}}}async _onReloadWeapon(event){const itemId=event.currentTarget.closest(".item")?event.currentTarget.closest(".item").dataset.itemId:null;if(!itemId)return;const weapon=this.actor.items.get(itemId);0===event.button?event.shiftKey?await weapon.reload():await weapon.addBullet():2===event.button&&(event.shiftKey?await weapon.setBullets(0):await weapon.shootBullets(1))}async _onAddAmo(event){const itemId=event.currentTarget.closest(".item")?event.currentTarget.closest(".item").dataset.itemId:null;if(!itemId)return;const weapon=this.actor.items.get(itemId);await weapon.addBullet()}async _onWeaponSkillRoll(event){event.preventDefault();const skillId=event.currentTarget.dataset.skillId,actorId=event.currentTarget.closest("form").dataset.actorId,tokenKey=event.currentTarget.closest("form").dataset.tokenId,itemId=event.currentTarget.closest("li")?event.currentTarget.closest("li").dataset.itemId:null,check=new CoC7Check;if(!event.shiftKey){const usage=await RollDialog.create();usage&&(check.diceModifier=usage.get("bonusDice"),check.difficulty=usage.get("difficulty"),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=tokenKey||actorId,check.skill=skillId,check.item=itemId,await check.roll(),check.toMessage()}async _onWeaponDamage(event){event.preventDefault();const itemId=event.currentTarget.closest(".weapon").dataset.itemId,range=event.currentTarget.closest(".weapon-damage").dataset.range,damageChatCard=new DamageCard({fastForward:event.shiftKey,range});damageChatCard.actorKey=this.actor.tokenKey,damageChatCard.itemId=itemId,damageChatCard.updateChatCard()}async _onOpposedRoll(event){if(event.preventDefault(),event.altKey){const data={type:CombinedCheckCard.defaultConfig.type,action:"new"},roll=new CoC7Check;if(roll.actor=event.currentTarget.closest("form").dataset.tokenId||event.currentTarget.closest("form").dataset.actorId,roll.characteristic=event.currentTarget.parentElement.dataset.characteristic,roll.attribute=event.currentTarget.parentElement.dataset.attrib,roll.skillId=event.currentTarget.closest(".item")?.dataset.skillId,roll.rollMode=game.settings.get("core","rollMode"),roll.initiator=game.user.id,"db"===roll.attrib)return;data.roll=roll.JSONRollData,CombinedCheckCard.dispatch(data)}else{const data={type:OpposedCheckCard.defaultConfig.type,combat:event.currentTarget.classList?.contains("combat"),action:"new"},roll=new CoC7Check;if(roll.actor=event.currentTarget.closest("form").dataset.tokenId||event.currentTarget.closest("form").dataset.actorId,roll.characteristic=event.currentTarget.parentElement.dataset.characteristic,roll.attribute=event.currentTarget.parentElement.dataset.attrib,roll.item=event.currentTarget.closest(".item")?.dataset.itemId,roll.weaponAltSkill=event.currentTarget.classList.contains("alternativ-skill"),roll.skillId=event.currentTarget.closest(".item")?.dataset.skillId,roll.rollMode=game.settings.get("core","rollMode"),roll.initiator=game.user.id,"db"===roll.attrib)return;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatThresholdModifier:event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode,disableFlatDiceModifier:event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode});usage&&(roll.diceModifier=Number(usage.get("bonusDice")),roll.difficulty=Number(usage.get("difficulty")),roll.flatDiceModifier=Number(usage.get("flatDiceModifier")),roll.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}roll.denyPush=!0,await roll._perform(),data.roll=roll.JSONRollData,OpposedCheckCard.dispatch(data)}}async _onRollCharacteriticTest(event){event.preventDefault();const actorId=event.currentTarget.closest("form").dataset.actorId,tokenKey=event.currentTarget.closest("form").dataset.tokenId,characteristic=event.currentTarget.parentElement.dataset.characteristic;if(isCtrlKey(event)&&game.user.isGM){const linkData={check:"check",type:"characteristic",name:characteristic,hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,forceModifiers:event.shiftKey};return"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),void CoC7LinkCreationDialog.fromLinkData(linkData).then((dlg=>dlg.render(!0)))}let difficulty,modifier,flatDiceModifier,flatThresholdModifier;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatThresholdModifier:event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode,disableFlatDiceModifier:event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode});usage&&(modifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}const check=new CoC7Check;"undefined"!==modifier&&(check.diceModifier=modifier),void 0!==difficulty&&(check.difficulty=difficulty),check.actor=tokenKey||actorId,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,check.standby=game.settings.get("CoC7","stanbyGMRolls")&&game.user.isGM&&this.actor.hasPlayerOwner,await check.rollCharacteristic(characteristic),check.toMessage()}async _onRollAttribTest(event){event.preventDefault();const attrib=event.currentTarget.parentElement.dataset.attrib;if(isCtrlKey(event)&&game.user.isGM&&["lck","san"].includes(attrib)){const linkData=event.altKey?{check:"sanloss",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,forceModifiers:event.shiftKey}:{check:"check",type:"attribute",name:attrib,hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,forceModifiers:event.shiftKey};return"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),void CoC7LinkCreationDialog.fromLinkData(linkData).then((dlg=>dlg.render(!0)))}if("db"===attrib){if(!/^-{0,1}\d+$/.test(event.currentTarget.parentElement.dataset.rollFormula)){const r=new Roll(event.currentTarget.parentElement.dataset.rollFormula);await r.roll({async:!0}),isNaN(r.total)||void 0===r.total||r.toMessage({speaker:ChatMessage.getSpeaker(),flavor:game.i18n.localize("CoC7.BonusDamageRoll")})}return}if("lck"===attrib&&!this.actor.data.data.attribs.lck.value)return;const actorId=event.currentTarget.closest("form").dataset.actorId,tokenKey=event.currentTarget.closest("form").dataset.tokenId;let difficulty,modifier,flatDiceModifier,flatThresholdModifier,sanMin,sanMax;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatThresholdModifier:!1,disableFlatDiceModifier:!1});usage&&(modifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}if(event.altKey&&"san"===attrib){const sanData=await SanDataDialog.create({promptLabel:!1});sanData&&(sanMin=sanData.get("sanMin")||0,sanMax=sanData.get("sanMax")||0,isNaN(Number(sanMin))||(sanMin=Number(sanMin)),isNaN(Number(sanMax))||(sanMax=Number(sanMax)))}if(void 0!==sanMin&&void 0!==sanMax)SanCheckCard.create(this.actor.actorKey,{sanMin,sanMax},{sanModifier:modifier,sanDifficulty:difficulty,fastForward:event.shiftKey});else{const check=new CoC7Check;void 0!==modifier&&(check.diceModifier=modifier),void 0!==difficulty&&(check.difficulty=difficulty),check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,check.actor=tokenKey||actorId,check.standby=game.settings.get("CoC7","stanbyGMRolls")&&game.user.isGM&&this.actor.hasPlayerOwner,await check.rollAttribute(attrib),check.toMessage()}}async _onRollSkillTest(event){if(event.currentTarget.classList.contains("flagged4dev"))return;event.preventDefault();const skillId=event.currentTarget.closest(".item").dataset.skillId,actorId=event.currentTarget.closest("form").dataset.actorId,tokenKey=event.currentTarget.closest("form").dataset.tokenId;if(isCtrlKey(event)&&game.user.isGM){const name=this.actor.items.get(skillId)?.name;if(!name)return;const linkData={check:"check",type:"skill",name,hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,forceModifiers:event.shiftKey};return"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),void CoC7LinkCreationDialog.fromLinkData(linkData).then((dlg=>dlg.render(!0)))}let difficulty,modifier,flatDiceModifier,flatThresholdModifier;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatThresholdModifier:!1,disableFlatDiceModifier:!1});usage&&(modifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}const check=new CoC7Check;void 0!==modifier&&(check.diceModifier=modifier),void 0!==difficulty&&(check.difficulty=difficulty),check.actor=tokenKey||actorId,check.skill=skillId,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,check.standby=game.settings.get("CoC7","stanbyGMRolls")&&game.user.isGM&&this.actor.hasPlayerOwner,await check.roll(),check.toMessage()}async _updateObject(event,formData){if(event.currentTarget&&event.currentTarget.classList){if(event.currentTarget.classList.contains("skill-adjustment")){const item=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);if(item){const value=event.currentTarget.value?parseInt(event.currentTarget.value):null;if(event.currentTarget.value?isNaN(value)||await item.update({[event.currentTarget.name]:value}):await item.update({[event.currentTarget.name]:null}),game.i18n.localize(COC7.creditRatingSkillName)===item.name){const creditValue=value||0;(creditValue>Number(this.actor.occupation.data.data.creditRating.max)||creditValue<Number(this.actor.occupation.data.data.creditRating.min))&&ui.notifications.warn(game.i18n.format("CoC7.CreditOutOfRange",{min:Number(this.actor.occupation.data.data.creditRating.min),max:Number(this.actor.occupation.data.data.creditRating.max)}))}}}if(event.currentTarget.classList.contains("attribute-value")&&"data.attribs.san.value"===event.currentTarget.name)return void this.actor.setSan(parseInt(event.currentTarget.value));if(event.currentTarget.classList.contains("text-area"))return void this.actor.updateTextArea(event.currentTarget);if(event.currentTarget.classList.contains("bio-section-value")){const index=parseInt(event.currentTarget.closest(".bio-section").dataset.index);await this.actor.updateBioValue(index,event.currentTarget.value)}if(event.currentTarget.classList.contains("bio-section-title")){const index=parseInt(event.currentTarget.closest(".bio-section").dataset.index);this.actor.updateBioTitle(index,event.currentTarget.value)}if(event.currentTarget.classList.contains("npc-skill-score")){const skill=this.actor.items.get(event.currentTarget.closest(".item").dataset.skillId);skill&&await skill.updateValue(event.currentTarget.value)}if(event.currentTarget.classList.contains("skill-name")||event.currentTarget.classList.contains("item-name")){const item=this.actor.items.get(event.currentTarget.closest(".item").dataset.skillId);item&&await item.update({name:event.currentTarget.value})}if(event.currentTarget.classList.contains("characteristic-formula")&&0!==event.currentTarget.value.length){const r=new Roll(event.currentTarget.value);await r.roll({async:!0}),(isNaN(r.total)||void 0===r.total)&&(ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:event.currentTarget.value})),formData[event.currentTarget.name]=game.i18n.format("CoC7.ErrorInvalid"))}if(event.currentTarget.classList.contains("attribute-value")&&0!==event.currentTarget.value.length&&"db"===event.currentTarget.closest(".attribute").dataset.attrib){const r=new Roll(event.currentTarget.value);await r.roll({async:!0}),(isNaN(r.total)||void 0===r.total)&&(ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:event.currentTarget.value})),formData[event.currentTarget.name]=game.i18n.format("CoC7.ErrorInvalid"))}if(event.currentTarget.classList.contains("weapon-skill")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId),skill=this.actor.items.get(event.currentTarget.options[event.currentTarget.selectedIndex].value);if(weapon&&skill)switch(event.currentTarget.dataset.skill){case"main":await weapon.update({"data.skill.main.id":skill.id,"data.skill.main.name":skill.name});break;case"alternativ":await weapon.update({"data.skill.alternativ.id":skill.id,"data.skill.alternativ.name":skill.name})}}if(event.currentTarget.classList.contains("weapon-name")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);weapon&&await weapon.update({name:event.currentTarget.value})}if(event.currentTarget.classList.contains("damage-formula")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);if(weapon)if(0!==event.currentTarget.value.length){const r=new Roll(event.currentTarget.value);if(await r.roll({async:!0}),isNaN(r.total)||void 0===r.total)ui.notifications.error(event.currentTarget.value+" is not a valid formula");else switch(event.currentTarget.dataset.range){case"normal":await weapon.update({"data.range.normal.damage":event.currentTarget.value});break;case"long":await weapon.update({"data.range.long.damage":event.currentTarget.value});break;case"extreme":await weapon.update({"data.range.extreme.damage":event.currentTarget.value})}}else switch(event.currentTarget.dataset.range){case"normal":await weapon.update({"data.range.normal.damage":null});break;case"long":await weapon.update({"data.range.long.damage":null});break;case"extreme":await weapon.update({"data.range.extreme.damage":null})}}}return this.object.update(formData)}}class CoC7NPCSheet extends CoC7ActorSheet{async getData(){const data=await super.getData();return data.allowFormula=!0,data.displayFormula=this.actor.getActorFlag("displayFormula"),void 0===data.displayFormula&&(data.displayFormula=!1),data.hasSan=null!==data.data.attribs.san.value,data.hasMp=null!==data.data.attribs.mp.value,data.hasLuck=null!==data.data.attribs.lck.value,data}activateListeners(html){super.activateListeners(html),this.actor.isOwner&&html.find('[name="data.attribs.hp.value"]').change((event=>this.actor.setHealthStatusManually(event)))}onCloseSheet(){this.actor.unsetActorFlag("displayFormula"),super.onCloseSheet()}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","npc"],dragDrop:[{dragSelector:".item",dropSelector:null}],template:"systems/CoC7/templates/actors/npc-sheet.html",width:580,resizable:!0})}static forceAuto(app,html){const cell=html.find(".description.pannel.expanded");cell.length&&cell.height(Math.max(200,html.height()-cell.position().top-8)+"px")}setPosition(a){super.setPosition(a),CoC7NPCSheet.forceAuto(a,this._element)}}class CoC7CreatureSheet extends CoC7ActorSheet{async getData(){const data=await super.getData();return data.allowFormula=!0,data.displayFormula=this.actor.getActorFlag("displayFormula"),void 0===data.displayFormula&&(data.displayFormula=!1),data.hasSan=null!==data.data.attribs.san.value,data.hasMp=null!==data.data.attribs.mp.value,data.hasLuck=null!==data.data.attribs.lck.value,data}activateListeners(html){super.activateListeners(html),html.find(".roll-san").click(this._onSanCheck.bind(this)),this.actor.isOwner&&html.find('[name="data.attribs.hp.value"]').change((event=>this.actor.setHealthStatusManually(event)))}async _onSanCheck(event){if(event.preventDefault(),this.actor.data.data.special.sanLoss.checkPassed||this.actor.data.data.special.sanLoss.checkFailled)if((event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode)&&game.user.isGM){let difficulty,modifier;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatDiceModifier:!0});usage&&(modifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")))}const linkData={check:"sanloss",sanMin:this.actor.data.data.special.sanLoss.checkPassed,sanMax:this.actor.data.data.special.sanLoss.checkFailled};"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),void 0!==modifier&&(linkData.modifier=modifier),void 0!==difficulty&&(linkData.difficulty=difficulty);const link=CoC7Parser.createCoC7Link(linkData);link&&chatHelper.createMessage(null,game.i18n.format("CoC7.MessageCheckRequestedWait",{check:link}))}else SanCheckCard.checkTargets(this.actor.tokenKey,event.shiftKey)}onCloseSheet(){this.actor.unsetActorFlag("displayFormula"),super.onCloseSheet()}static get defaultOptions(){return mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/actors/creature-sheet.html",width:580,classes:["coc7","sheet","actor","npc","creature"],dragDrop:[{dragSelector:".item",dropSelector:null}]})}async _updateObject(event,formData){if(!(event.currentTarget&&event.currentTarget.classList&&event.currentTarget.classList.contains("characteristic-score")))return super._updateObject(event,formData);this.actor.setCharacteristic(event.currentTarget.name,event.currentTarget.value)}static forceAuto(app,html){const cell=html.find(".description.pannel.expanded");cell.length&&cell.height(Math.max(130,html.height()-cell.position().top-8)+"px")}setPosition(a){super.setPosition(a),CoC7CreatureSheet.forceAuto(a,this._element)}}class CoC7CharacterSheet extends CoC7ActorSheet{async getData(){const data=await super.getData();if(this.actor.occupation?(data.data.infos.occupation=this.actor.occupation.name,data.data.infos.occupationSet=!0):data.data.infos.occupationSet=!1,this.actor.archetype?(data.data.infos.archetype=this.actor.archetype.name,data.data.infos.archetypeSet=!0):data.data.infos.archetypeSet=!1,data.totalExperience=this.actor.experiencePoints,data.totalOccupation=this.actor.occupationPointsSpent,data.invalidOccupationPoints=Number(this.actor.occupationPointsSpent)!==Number(this.actor.data.data.development?.occupation),data.totalArchetype=this.actor.archetypePointsSpent,data.invalidArchetypePoints=Number(this.actor.archetypePointsSpent)!==Number(this.actor.data.data.development?.archetype),data.totalPersonal=this.actor.personalPointsSpent,data.invalidPersonalPoints=Number(this.actor.personalPointsSpent)!==Number(this.actor.data.data.development?.personal),data.creditRatingMax=Number(this.actor.occupation?.data.data.creditRating.max),data.creditRatingMin=Number(this.actor.occupation?.data.data.creditRating.min),data.invalidCreditRating=this.actor.creditRatingSkill?.data.data.adjustments?.occupation>data.creditRatingMax||this.actor.creditRatingSkill?.data.data.adjustments?.occupation<data.creditRatingMin,data.pulpTalentCount=data.itemsByType.talent?.length?data.itemsByType.talent?.length:0,data.minPulpTalents=this.actor.archetype?.data.data.talents?this.actor.archetype?.data.data.talents:0,data.invalidPulpTalents=data.pulpTalentCount<data.minPulpTalents,data.hasSkillFlaggedForExp=this.actor.hasSkillFlaggedForExp,data.allowDevelopment=game.settings.get("CoC7","developmentEnabled"),data.allowCharCreation=game.settings.get("CoC7","charCreationEnabled"),data.developmentRollForLuck=game.settings.get("CoC7","developmentRollForLuck"),data.showDevPannel=data.allowDevelopment||data.allowCharCreation,data.manualCredit=this.actor.getActorFlag("manualCredit"),!data.manualCredit){let factor,moneySymbol;data.credit={},data.data.credit?(factor=parseInt(data.data.credit.multiplier)?parseInt(data.data.credit.multiplier):1,moneySymbol=data.data.credit.monetarySymbol?data.data.credit.monetarySymbol:"$"):(factor=1,moneySymbol="$"),data.credit.spendingLevel=`${this.actor.spendingLevel*factor}${moneySymbol}`,data.credit.assets=`${this.actor.assets*factor}${moneySymbol}`,data.credit.cash=`${this.actor.cash*factor}${moneySymbol}`}return data.oneBlockBackStory=game.settings.get("CoC7","oneBlockBackstory"),data}activateListeners(html){super.activateListeners(html),this.actor.isOwner&&(html.find(".skill-name.rollable.flagged4dev").click((async event=>this._onSkillDev(event))),html.find(".reset-occupation").click((async()=>await this.actor.resetOccupation())),html.find(".reset-archetype").click((async()=>await this.actor.resetArchetype())),html.find(".open-item").click((event=>this._onItemDetails(event))),html.find('[name="data.attribs.hp.value"]').change((event=>this.actor.setHealthStatusManually(event))))}async _onSkillDev(event){event.preventDefault();const skillId=event.currentTarget.closest(".item").dataset.itemId;await this.actor.developSkill(skillId,event.shiftKey)}_onItemDetails(event){event.preventDefault();const type=event.currentTarget.dataset.type,item=this.actor[type];item&&item.sheet.render(!0)}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","character"],template:"systems/CoC7/templates/actors/character-sheet.html",width:600,height:650,dragDrop:[{dragSelector:".item",dropSelector:null}],tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"skills"}]})}}class CoC7CharacterSheetV2 extends CoC7CharacterSheet{async getData(){const data=await super.getData();data.skillList=[];let previousSpec="";for(const skill of data.skills)skill.data.properties.special&&previousSpec!==skill.data.specialization&&(previousSpec=skill.data.specialization,data.skillList.push({isSpecialization:!0,name:skill.data.specialization})),data.skillList.push(skill);if(data.displayPlayerName=game.settings.get("CoC7","displayPlayerNameOnSheet"),data.displayPlayerName&&!data.data.infos.playername){const user=this.actor.characterUser;user&&(data.data.infos.playername=user.name)}return data}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","actor","character"],template:"systems/CoC7/templates/actors/character-sheet-v2.html",width:687,height:623,resizable:!0,dragDrop:[{dragSelector:".item",dropSelector:null}],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"skills"}]})}static renderSheet(sheet){if(game.settings.get("CoC7","overrideSheetArtwork")){if(game.settings.get("CoC7","artWorkSheetBackground")){if(sheet.element.css("--main-sheet-bg",game.settings.get("CoC7","artWorkSheetBackground")),"slice"!==game.settings.get("CoC7","artWorkSheetBackgroundType")){let styleSheet,cssRuleIndex;for(let i=0;i<document.styleSheets.length;i++)if(document.styleSheets[i].href?.endsWith("coc7g.css")){styleSheet=document.styleSheets[i];break}if(styleSheet)for(let i=0;i<styleSheet.rules.length;i++)if(".sheetV2.character form"===styleSheet.rules[i].selectorText){cssRuleIndex=i;break}if(cssRuleIndex){const CSSStyle=styleSheet.rules[cssRuleIndex].style;switch(CSSStyle.removeProperty("border-image"),CSSStyle.setProperty("background",game.settings.get("CoC7","artWorkSheetBackground")),game.settings.get("CoC7","artWorkSheetBackgroundType")){case"auto":CSSStyle.setProperty("background-size","auto");break;case"contain":CSSStyle.setProperty("background-size","contain");break;case"cover":CSSStyle.setProperty("background-size","cover");break;default:CSSStyle.setProperty("background-size","auto")}}}}else"null"===game.settings.get("CoC7","artWorkSheetBackground").toLowerCase()&&sheet.element.css("--main-sheet-bg","url( './assets/images/void.webp')");if(game.settings.get("CoC7","artWorkOtherSheetBackground")?sheet.element.css("--other-sheet-bg",game.settings.get("CoC7","artWorkOtherSheetBackground")):"null"===game.settings.get("CoC7","artWorkOtherSheetBackground").toLowerCase()&&sheet.element.css("--other-sheet-bg","url( './assets/images/void.webp')"),game.settings.get("CoC7","artworkSheetImage")?sheet.element.css("--main-sheet-image",game.settings.get("CoC7","artworkSheetImage")):"null"===game.settings.get("CoC7","artworkSheetImage").toLowerCase()&&sheet.element.css("--main-sheet-image","url( './assets/images/void.webp')"),game.settings.get("CoC7","artworkFrontColor")&&sheet.element.css("--main-sheet-front-color",game.settings.get("CoC7","artworkFrontColor")),game.settings.get("CoC7","artworkBackgroundColor")&&sheet.element.css("--main-sheet-back-color",game.settings.get("CoC7","artworkBackgroundColor")),game.settings.get("CoC7","artworkInteractiveColor")&&sheet.element.css("--main-sheet-interactie-color",game.settings.get("CoC7","artworkInteractiveColor")),game.settings.get("CoC7","artworkFixedSkillLength")||(sheet.element.css("--skill-length","auto"),sheet.element.css("--skill-specialization-length","auto")),game.settings.get("CoC7","artworkMainFont")){new FontFace("customSheetFont",game.settings.get("CoC7","artworkMainFont")).load().then((function(loadedFace){document.fonts.add(loadedFace)})).catch((function(error){ui.notifications.error(error)}))}if(game.settings.get("CoC7","artworkMainFontBold")){new FontFace("customSheetFont",game.settings.get("CoC7","artworkMainFontBold"),{weight:"bold"}).load().then((function(loadedFace){document.fonts.add(loadedFace)})).catch((function(error){ui.notifications.error(error)}))}if(game.settings.get("CoC7","artworkMainFontSize")){const size=`${game.settings.get("CoC7","artworkMainFontSize")}px`;size!==$(":root").css("font-size")&&$(":root").css("font-size",size)}}}}class CoC7Combat{static renderCombatTracker(app,html,data){const currentCombat=data.combats[data.currentIndex-1];currentCombat&&(html.find(".combatant").each(((i,el)=>{const combId=el.getAttribute("data-combatant-id"),combatantControlsDiv=el.querySelector(".combatant-controls"),combatant=currentCombat.data.combatants.get(combId);if(combatant.getFlag("CoC7","hasGun")?$(combatantControlsDiv).prepend(`<a class="combatant-control active add-init" title="${game.i18n.localize("CoC7.PutGunAway")}" data-control="drawGun"><i class="game-icon game-icon-revolver"></i></a>`):$(combatantControlsDiv).prepend(`<a class="combatant-control add-init" title="${game.i18n.localize("CoC7.DrawGun")}" data-control="drawGun"><i class="game-icon game-icon-revolver"></i></a>`),"optional"===game.settings.get("CoC7","initiativeRule")&&game.settings.get("CoC7","displayInitAsText")){if(combatant.initiative){const tokenInitiative=el.querySelector(".token-initiative"),initiativeTest=tokenInitiative.querySelector(".initiative"),roll=100*combatant.initiative-100*Math.floor(combatant.initiative);switch(Math.floor(combatant.initiative)){case CoC7Check.successLevel.fumble:tokenInitiative.classList.add("fumble"),initiativeTest.innerText=game.i18n.localize("CoC7.Fumble"),initiativeTest.title=roll;break;case CoC7Check.successLevel.failure:tokenInitiative.classList.add("failure"),initiativeTest.innerText=game.i18n.localize("CoC7.Failure"),initiativeTest.title=roll;break;case CoC7Check.successLevel.regular:tokenInitiative.classList.add("regular-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyRegular"),initiativeTest.title=roll;break;case CoC7Check.successLevel.hard:tokenInitiative.classList.add("hard-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyHard"),initiativeTest.title=roll;break;case CoC7Check.successLevel.extreme:tokenInitiative.classList.add("extreme-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyExtreme"),initiativeTest.title=roll;break;case CoC7Check.successLevel.critical:tokenInitiative.classList.add("critical"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyCritical"),initiativeTest.title=roll}}}else if(combatant.initiative<0){const h4=el.querySelector(".token-name").querySelector("h4"),span=el.querySelector("span.initiative");h4.style.fontWeight="900",h4.style.textShadow="1px 1px 4px darkred",span.style.fontWeight="900",span.style.textShadow="1px 1px 4px darkred",el.style.color="darkred",el.style.background="black",el.style.fontWeight="900"}})),html.find(".add-init").click((event=>CoC7Combat._onToggleGun(event))))}static async _onToggleGun(event){event.preventDefault(),event.stopPropagation();const li=event.currentTarget.closest(".combatant"),c=await game.combat.combatants.get(li.dataset.combatantId);c.actor.isOwner&&(c.getFlag("CoC7","hasGun")?await c.setFlag("CoC7","hasGun",!1):await c.setFlag("CoC7","hasGun",!0));const newInit=await c.actor.rollInitiative(!!c.getFlag("CoC7","hasGun"));c.getFlag("CoC7","hasGun")?c.initiative<newInit&&game.combat.setInitiative(c.id,newInit):game.combat.setInitiative(c.id,newInit)}}async function rollInitiative(ids,{formula=null,updateTurn=!0,messageOptions={}}={}){ids="string"==typeof ids?[ids]:ids;const currentId=this.combatant.id,updates=[];for(const[,id]of ids.entries()){const combatant=this.combatants.get(id);if(!combatant?.isOwner)return null;const roll=await combatant.actor.rollInitiative(!!combatant.getFlag("CoC7","hasGun"));updates.push({_id:id,initiative:roll})}return updates.length?(await this.updateEmbeddedDocuments("Combatant",updates),updateTurn&&await this.update({turn:this.turns.findIndex((t=>t.id===currentId))}),this):this}class Updater{static async checkForUpdate(){this.systemUpdateVersion=String(game.settings.get("CoC7","systemUpdateVersion")),isNewerVersion("0.3",this.systemUpdateVersion)&&(game.user.isGM?new Dialog({title:game.i18n.localize("CoC7.Migrate.Title"),content:game.i18n.format("CoC7.Migrate.Message",{version:game.system.data.version}),buttons:{update:{label:game.i18n.localize("CoC7.Migrate.ButtonUpdate"),callback:async()=>Updater.update()},skip:{label:game.i18n.localize("CoC7.Migrate.ButtonSkip")}}}).render(!0):new Dialog({title:game.i18n.localize("CoC7.Migrate.Title"),content:game.i18n.format("CoC7.Migrate.GMRequired",{version:game.system.data.version}),buttons:{OK:{label:game.i18n.localize("CoC7.Migrate.ButtonOkay")}}}).render(!0))}static async update(){for(const actor of game.actors.contents)try{const updateData=this.migrateActorData(actor.toObject());foundry.utils.isObjectEmpty(updateData)||(console.log(`Migrating Actor entity ${actor.name}`),await actor.update(updateData,{enforceTypes:!1}))}catch(err){err.message=`Failed CoC7 system migration for Actor ${actor.name}: ${err.message}`,console.error(err)}for(const item of game.items.contents)try{const updateData=Updater.migrateItemData(item.toObject());foundry.utils.isObjectEmpty(updateData)||(console.log(`Migrating Item entity ${item.name}`),await item.update(updateData,{enforceTypes:!1}))}catch(err){err.message=`Failed CoC7 system migration for Item ${item.name}: ${err.message}`,console.error(err)}for(const table of game.tables.contents)try{const updateData=Updater.migrateTableData(table.toObject());foundry.utils.isObjectEmpty(updateData)||(console.log(`Migrating Table entity ${table.name}`),await table.update(updateData,{enforceTypes:!1}))}catch(err){err.message=`Failed CoC7 system migration for Table ${table.name}: ${err.message}`,console.error(err)}for(const macro of game.macros.contents)try{const updateData=Updater.migrateMacroData(macro.toObject());foundry.utils.isObjectEmpty(updateData)||(console.log(`Migrating Macro entity ${macro.name}`),await macro.update(updateData,{enforceTypes:!1}))}catch(err){err.message=`Failed CoC7 system migration for Table ${macro.name}: ${err.message}`,console.error(err)}for(const pack of game.packs)"world"===pack.metadata.package&&["Actor","Item","Macro","RollTable"].includes(pack.metadata.entity)&&await Updater.migrateCompendiumData(pack);game.settings.set("CoC7","systemUpdateVersion","0.3")}static migrateActorData(actor){const updateData={};if(Updater._migrateActorCharacterSanity(actor,updateData),Updater._migrateActorArtwork(actor,updateData),actor.items){const items=actor.items.reduce(((arr,i)=>{const itemData=i instanceof CONFIG.Item.documentClass?i.toObject():i,itemUpdate=Updater.migrateItemData(itemData);return foundry.utils.isObjectEmpty(itemUpdate)||(itemUpdate._id=itemData._id,arr.push(expandObject(itemUpdate))),arr}),[]);items.length>0&&(updateData.items=items)}return updateData}static async migrateCompendiumData(pack){const entity=pack.metadata.entity;if(!["Actor","Item","Macro","RollTable"].includes(entity))return;const wasLocked=pack.locked;await pack.configure({locked:!1}),await pack.migrate();const documents=await pack.getDocuments();for(const doc of documents){let updateData={};try{switch(entity){case"Actor":updateData=Updater.migrateActorData(doc.toObject());break;case"Item":updateData=Updater.migrateItemData(doc.toObject());break;case"Macro":updateData=Updater.migrateMacroData(doc.toObject());break;case"RollTable":updateData=Updater.migrateTableData(doc.toObject())}foundry.utils.isObjectEmpty(updateData)||(console.log(`Migrated ${entity} entity ${doc.name} in Compendium ${pack.collection}`),await doc.update(updateData))}catch(err){err.message=`Failed CoC7 system migration for entity ${doc.name} in pack ${pack.collection}: ${err.message}`,console.error(err)}}await pack.configure({locked:wasLocked})}static migrateItemData(item){const updateData={};return Updater._migrateItemExperience(item,updateData),Updater._migrateItemArtwork(item,updateData),Updater._migrateItemBookAutomated(item,updateData),updateData}static migrateMacroData(table){const updateData={};return Updater._migrateMacroArtwork(table,updateData),updateData}static migrateTableData(table){const updateData={};return Updater._migrateTableArtwork(table,updateData),updateData}static _migrateItemExperience(item,updateData){return"skill"===item.type&&void 0===item.data.adjustments?.experience&&(updateData["data.adjustments.experience"]=0),updateData}static _migrateItemArtwork(item,updateData){const regEx=new RegExp(/systems\/CoC7\/artwork\/icons\/(.+)/);let image=String(item.img).match(regEx);if(null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),"setup"===item.type)for(const[k,v]of Object.entries(item.data.items))image=String(v.img).match(regEx),null!==image&&(void 0===updateData["data.items"]&&(updateData["data.items"]=item.data.items),updateData["data.items"][k].img="systems/CoC7/assets/icons/"+image[1]);else if("occupation"===item.type){for(const[k,v]of Object.entries(item.data.skills))image=String(v.img).match(regEx),null!==image&&(void 0===updateData["data.skills"]&&(updateData["data.skills"]=item.data.skills),updateData["data.skills"][k].img="systems/CoC7/assets/icons/"+image[1]);for(const[o,g]of Object.entries(item.data.groups))for(const[k,v]of Object.entries(g.skills))image=String(v.img).match(regEx),null!==image&&(void 0===updateData["data.groups"]&&(updateData["data.groups"]=item.data.groups),updateData["data.groups"][o].skills[k].img="systems/CoC7/assets/icons/"+image[1])}else if("book"===item.type)for(const[k,v]of Object.entries(item.data.spells))image=String(v.img).match(regEx),null!==image&&(void 0===updateData["data.spells"]&&(updateData["data.spells"]=item.data.spells),updateData["data.spells"][k].img="systems/CoC7/assets/icons/"+image[1]);else if("archetype"===item.type)for(const[k,v]of Object.entries(item.data.skills))image=String(v.img).match(regEx),null!==image&&(void 0===updateData["data.skills"]&&(updateData["data.skills"]=item.data.skills),updateData["data.skills"][k].img="systems/CoC7/assets/icons/"+image[1]);return updateData}static _migrateItemBookAutomated(item,updateData){return"book"===item.type&&void 0!==item.data.description.unidentified&&(updateData["data.author"]=item.data.author||"",updateData["data.date"]=item.data.date||"",updateData["data.language"]=item.data.language||"",updateData["data.sanityLoss"]=item.data.sanLoss||0,updateData["data.mythosRating"]=Number(item.data.mythosRating)||0,updateData["data.content"]=item.data.description.unidentified,updateData["data.keeperNotes"]=item.data.description.notes,updateData["data.difficultyLevel"]="regular",updateData["data.fullStudies"]=0,updateData["data.initialReading"]=!1,updateData["data.keeperNotes"]="",updateData["data.gains.cthulhuMythos.initial"]=Number(item.data.gain.cthulhuMythos.CMI)||0,updateData["data.gains.cthulhuMythos.final"]=Number(item.data.gain.cthulhuMythos.CMF)||0,updateData["data.gains.occult"]=Number(item.data.gain.occult)||0,updateData["data.gains.others"]=[],updateData["data.study"]={necessary:Number(item.data.weeksStudyTime)||0,progress:0},updateData["data.-=sanLoss"]=null,updateData["data.-=weeksStudyTime"]=null,updateData["data.-=gain"]=null,updateData["data.description.-=unidentified"]=null,updateData["data.description.-=notes"]=null,updateData["data.gains.-=other"]=null,updateData["data.-=properties"]=null,updateData["data.-=flags"]=null),updateData}static _migrateActorArtwork(actor,updateData){const regEx=new RegExp(/systems\/CoC7\/artwork\/icons\/(.+)/);let image=String(actor.img).match(regEx);null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),image=String(actor.token.img).match(regEx),null!==image&&(updateData["token.img"]="systems/CoC7/assets/icons/"+image[1]);for(const[k,v]of Object.entries(actor.effects))image=String(v.icon).match(regEx),null!==image&&(void 0===updateData.effects&&(updateData.effects=actor.effects),updateData.effects[k].icon="systems/CoC7/assets/icons/"+image[1]);return updateData}static _migrateActorCharacterSanity(actor,updateData){if("character"===actor.type){const oneFifthSanity=Math.ceil(actor.data.attribs.san.value/5);void 0!==actor.data.attribs.san.dailyLoss&&null!==actor.data.attribs.san.dailyLoss||(updateData["data.attribs.san.dailyLoss"]=0),void 0!==actor.data.attribs.san.oneFifthSanity&&null!==actor.data.attribs.san.oneFifthSanity||(updateData["data.attribs.san.oneFifthSanity"]=" / "+oneFifthSanity),void 0!==actor.data.attribs.san.dailyLoss&&null!==actor.data.attribs.san.dailyLoss||(updateData["data.attribs.san.dailyLoss"]=0),void 0!==actor.data.indefiniteInsanityLevel&&null!==actor.data.indefiniteInsanityLevel&&void 0!==actor.data.indefiniteInsanityLevel.value&&null!==actor.data.indefiniteInsanityLevel.value||(updateData["data.indefiniteInsanityLevel.value"]=0),void 0!==actor.data.indefiniteInsanityLevel&&null!==actor.data.indefiniteInsanityLevel&&void 0!==actor.data.indefiniteInsanityLevel.max&&null!==actor.data.indefiniteInsanityLevel.max||(updateData["data.indefiniteInsanityLevel.max"]=oneFifthSanity),void 0!==actor.data.attribs.mp.value&&null!==actor.data.attribs.mp.value||(updateData["data.attribs.mp.value"]=oneFifthSanity),void 0!==actor.data.attribs.mp.max&&null!==actor.data.attribs.mp.max||(updateData["data.attribs.mp.max"]=oneFifthSanity),void 0!==actor.data.notes&&null!==actor.data.notes||(updateData["data.notes"]="")}return updateData}static _migrateMacroArtwork(table,updateData){const regEx=new RegExp(/systems\/CoC7\/artwork\/icons\/(.+)/),image=String(table.img).match(regEx);return null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),updateData}static _migrateTableArtwork(table,updateData){const regEx=new RegExp(/systems\/CoC7\/artwork\/icons\/(.+)/);let image=String(table.img).match(regEx);null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]);for(const[k,v]of Object.entries(table.results))image=String(v.img).match(regEx),null!==image&&(void 0===updateData.results&&(updateData.results=table.results),updateData.results[k].img="systems/CoC7/assets/icons/"+image[1]);return updateData}}const accentedCharacters=function(string){const len=string.length;let qString="'";for(let current,i=0;i<len;++i)if(current=string.charAt(i),current>=" "&&current<="~")"\\"!==current&&"'"!==current||(qString+="\\"),qString+=current;else switch(current){case"\b":qString+="\\b";break;case"\f":qString+="\\f";break;case"\n":qString+="\\n";break;case"\r":qString+="\\r";break;case"\t":qString+="\\t";break;case"\v":qString+="\\v";break;default:qString+="\\u",current=current.charCodeAt(0).toString(16);for(let j=4;--j>=current.length;qString+="0");qString+=current}return qString+="'",qString}("áéíóàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇßØøÅåÆæœ");const englishRegExp={nameRegExp:new RegExp("^[\\s\\n\\r]*(?<name>[\\w\\s\\.\\/\\(\\)\\-"+accentedCharacters+"]+),"),ageRegExp:/[, ]?\s*age:?\s+(\d+)/i,strRegExp:/(?:STR):?\s+(\d+)/,conRegExp:/CON:?\s+(\d+)/,sizRegExp:/(?:SIZ):?\s+(\d+)/,intRegExp:/INT:?\s+(\d+)/,powRegExp:/(?:POW):?\s+(\d+)/,dexRegExp:/(?:DEX):?\s+(\d+)/,appRegExp:/(?:APP):?\s+(\d+)/,eduRegExp:/EDU:?\s+(\d+)/,sanRegExp:/(?:SAN|Sanity):?\s+(\d+)/,hpRegExp:/(?:HP|Hit points):?\s+(\d+)/,mpRegExp:/(?:MP|Magic points):?\s+(\d+)/,dbRegExp:/(?:Damage Bonus|DB):?\s+([+-]?\d+(?:d\d+|D\d+)?)/i,attacksRegExp:/(?:Attacks|Fighting|Combat):?\s+(.*)\.[\n|\r]?$/ims,buildRegExp:/(?:Build):?\s+([+-]?\d+)/i,armorRegExp:/(?:Armor):?\s+(none|\d+)/i,moveRegExp:/(?:Move):?\s+(\d+)/i,luckRegExp:/(?:Luck):?\s+(\d+)/i,spellsRegExp:/(?:Spells):?\s+(.*)\.[\n|\r]?$/ims,skillsRegExp:/(?:Skills):?\s+(.*)\.[\n|\r]?$/ims,dodgeRegExp:/(?<name>Dodge):?\s+\(?(?<percentage>\d+)\)?\s*%/i,languagesRegExp:/(?:Languages):?\s+(.*)\.[\n|\r]?$/ims,skillRegExp:new RegExp("(?<skill>[\\w\\s\\(\\).\\/"+accentedCharacters+"]+) (?<percentage>\\d+)%"),attacksPerRoundRegExp:/(?:Attacks per round|# Attacks):?\s+(none|\d+)/i,sanLossRegExp:/(?:Sanity loss|SAN loss):?\s+(none|\d[dD]?[+\d]*\/\d[dD][+\d]+)/i,weaponRegExp:new RegExp("^(?<weapon>[\\w\\s\\n\\(\\).\\/"+accentedCharacters+"]+):?[\\n\\r\\s]+(?<percentage>\\d+)%,?\\s*(?:\\(\\d+\\/\\d+\\))?\\s*,?\\s*(?:damage)\\s+(?<damage>[\\d+\\+dD\\- ]+\\s*(DB|db|damage bonus)?)","img"),stopWords:"(Spells|Skills|Sanity loss|Languages|Armor|Attacks|Combat|)",handgunRegExp:/( Gun|Revolver|Pistol|Handgun|Derringer|Beretta|Luger|Desert Eagle| .38)/i,rifleRegExp:/(Rifle|Shotgun|Carbine|Gauge |Lee-Enfield|Elephant)/i,smbRegExp:/(Submachine Gun|Thompson)/i,machineGunRegExp:/(Browning|Vickers)/i,launchedWeapons:/(Molotov|Grenade|Dynamite)/i},frenchRegExp={nameRegExp:new RegExp("^[\\s\\n\\r]*(?<name>[\\w\\s\\.\\/\\(\\)\\-"+accentedCharacters+"]+),"),ageRegExp:/(\d+) ans/i,strRegExp:/(?:FOR):?\s+(\d+)/,conRegExp:/CON:?\s+(\d+)/,sizRegExp:/(?:TAI):?\s+(\d+)/,intRegExp:/INT:?\s+(\d+)/,powRegExp:/(?:POU):?\s+(\d+)/,dexRegExp:/(?:DEX):?\s+(\d+)/,appRegExp:/(?:APP):?\s+(\d+)/,eduRegExp:/ÉDU:?\s+(\d+)/,sanRegExp:/(?:SAN|Santé Mentale):?\s+(\d+)/,hpRegExp:/(?:PV|Points de vie):?\s+(\d+)/,mpRegExp:/(?:PM|Points de magie):?\s+(\d+)/,dbRegExp:/(?:BD|Bonus aux dommages|Impact|Imp):?\s+([+-]?\d+(?:d\d+|D\d+)?)/i,attacksRegExp:/(?:Attaques|Armes|Combat):?\s+(.*)\.[\n|\r]?$/ims,buildRegExp:/(?:Carrure):?\s+([+-]?\d+)/i,armorRegExp:/(?:Armure):?\s+(Acune|\d+)/i,moveRegExp:/(?:Mvt|Mouvement|Déplacement):?\s+(\d+)/i,luckRegExp:/(?:Chance):?\s+(\d+)/i,spellsRegExp:/(?:Sortilèges|Sorts):?\s+(.*)\.[\n|\r]?$/ims,skillsRegExp:/(?:Compétences):?\s+(.*)\.[\n|\r]?$/ims,dodgeRegExp:/(?<name>Esquiver):?\s+\(?(?<percentage>\d+)\)?\s*%/i,languagesRegExp:/(?:Langue):?\s+(.*)\.[\n|\r]?$/ims,skillRegExp:new RegExp("(?<skill>[\\w\\s\\(\\).\\/"+accentedCharacters+"]+) (?<percentage>\\d+)%"),attacksPerRoundRegExp:/(?:Attaques par round):?\s+(Acune|\d+)/i,sanLossRegExp:/(?:Perte de [Santé mentale|SAN]):?\s+(no|\d[dD]?[+\d]*\/\d[dD][+\d]+)/i,weaponRegExp:new RegExp("^(?<weapon>[\\w\\s\\n\\(\\).\\/"+accentedCharacters+"]+):?[\\n\\r\\s]+(?<percentage>\\d+)%,?\\s*(?:\\(\\d+\\/\\d+\\))?\\s*,?\\s*(?:dommage|dégâts)\\s+(?<damage>[\\d+\\+dD\\- ]+\\s*(Impact|Imp)?)","img"),stopWords:"(Langue|Armure|Carrure|Perte de Santé mentale|Compétences|Combat|Armes|Attaques)",handgunRegExp:/(Revolver|Pistolet|Derringer|Beretta|Luger|Desert Eagle| .38)/i,rifleRegExp:/(Carabine|Lee-Enfield|Fusil)/i,smbRegExp:/(SMG|Thompson)/i,machineGunRegExp:/(Browning|Vickers|Mitrailleuse)/i,launchedWeapons:/(Molotov|Grenade|Dynamite)/i},spanishRegExp={nameRegExp:new RegExp("^[\\s\\n\\r]*(?<name>[\\w\\s\\.\\/\\(\\)\\-"+accentedCharacters+"]+),"),ageRegExp:/(\d+) a[ñÑ]os/i,strRegExp:/(?:FUE):?\s+(\d+)/,conRegExp:/CON:?\s+(\d+)/,sizRegExp:/(?:TAM):?\s+(\d+)/,intRegExp:/INT:?\s+(\d+)/,powRegExp:/(?:POD):?\s+(\d+)/,dexRegExp:/(?:DES):?\s+(\d+)/,appRegExp:/(?:APA):?\s+(\d+)/,eduRegExp:/EDU:?\s+(\d+)/,sanRegExp:/(?:COR|Cordura):?\s+(\d+)/,hpRegExp:/(?:PV|Puntos de vida|P\. ?V\.):?\s+(\d+)/,mpRegExp:/(?:PM|Puntos Mágicos|Puntos de Magia):?\s+(\d+)/,dbRegExp:/(?:BD):?\s+([+-]?\d+(?:d\d+|D\d+)?)/i,attacksRegExp:/(?:Combate|Armas):?\s+(.*)\.[\n|\r]?$/ims,buildRegExp:/(?:Corpulencia):?\s+([+-]?\d+)/i,armorRegExp:/(?:Armadura):?\s+(ninguna|\d+)/i,moveRegExp:/(?:Movimiento):?\s+(\d+)/i,luckRegExp:/(?:Suerte):?\s+(\d+)/i,spellsRegExp:/(?:Conjuros|Hechizos):?\s+(.*)\.[\n|\r]?$/ims,skillsRegExp:/(?:Habilidades):?\s+(.*)\.[\n|\r]?$/ims,dodgeRegExp:/(?<name>Esquivar):?\s+\(?(?<percentage>\d+)\)?\s*%/i,languagesRegExp:/(?:Idiomas|Lenguajes|Lenguas):?\s+(.*)\.[\n|\r]?$/ims,skillRegExp:new RegExp("(?<skill>[\\w\\s\\(\\).\\/"+accentedCharacters+"]+) (?<percentage>\\d+)%"),attacksPerRoundRegExp:/(?:Número de Ataques):?\s+(ninguno|\d+)/i,sanLossRegExp:/(?:Pérdida de cordura|Pérdida de COR):?\s+(no|\d[dD]?[+\d]*\/\d[dD][+\d]+)/i,weaponRegExp:new RegExp("^(?<weapon>[\\w\\s\\n\\(\\).\\/"+accentedCharacters+"]+):?[\\n\\r\\s]+(?<percentage>\\d+)%,?\\s*(?:\\(\\d+\\/\\d+\\))?\\s*,?\\s*(?:daño)\\s+(?<damage>[\\d+\\+dD\\- ]+\\s*(BD|bd|bonificación de daño)?)","img"),stopWords:"(Conjuros|Habilidades|Pérdida de cordura|Idiomas|Lenguajes|Lenguas|Armadura|Combate|Armas)",handgunRegExp:/(Revolver|Pistola|Derringer|Beretta|Luger|Desert Eagle| .38)/i,rifleRegExp:/(Rifle|Carabina|Lee-Enfield|Caza Elefantes|Fusil|Escopeta|Galga|Recortada)/i,smbRegExp:/(Subfusil|Thompson)/i,machineGunRegExp:/(Browning|Vickers|Ametralladora)/i,launchedWeapons:/(Molotov||Granada|Dinamita)/i};class CoC7ActorImporterRegExp{static get optionLangRegExp(){return/coc-(?<langcode>\w\w)/}constructor(){this.RE=CoC7ActorImporterRegExp.getRegularExpressions(game.i18n.lang)}static getRegularExpressions(lang){switch(console.debug("Set RegExp Lang: ",lang),lang){case"es":return spanishRegExp;case"fr":return frenchRegExp}return englishRegExp}}const defaultWeaponSkillAdjustments={personal:null,occupation:null,archetype:null,experience:null};class CoC7ActorImporter{static get RE(){return(new CoC7ActorImporterRegExp).RE}async parseCharacter(text){const extractedData={};extractedData.name=this.processName(text),extractedData.age=this.extractValue(text,this.RE.ageRegExp),console.debug("age",extractedData.age),extractedData.str=Number(this.extractValue(text,this.RE.strRegExp)),extractedData.con=Number(this.extractValue(text,this.RE.conRegExp)),extractedData.siz=Number(this.extractValue(text,this.RE.sizRegExp)),extractedData.int=Number(this.extractValue(text,this.RE.intRegExp)),extractedData.pow=Number(this.extractValue(text,this.RE.powRegExp)),extractedData.dex=Number(this.extractValue(text,this.RE.dexRegExp)),extractedData.app=Number(this.extractValue(text,this.RE.appRegExp)),extractedData.edu=Number(this.extractValue(text,this.RE.eduRegExp)),extractedData.san=Number(this.extractValue(text,this.RE.sanRegExp)),extractedData.hp=Number(this.extractValue(text,this.RE.hpRegExp)),extractedData.mp=Number(this.extractValue(text,this.RE.mpRegExp)),extractedData.db=this.extractValue(text,this.RE.dbRegExp),extractedData.build=this.extractValue(text,this.RE.buildRegExp),extractedData.armor=this.extractValue(text,this.RE.armorRegExp),console.debug("armor",extractedData.armor),extractedData.mov=Number(this.extractValue(text,this.RE.moveRegExp)),extractedData.lck=Number(this.extractValue(text,this.RE.luckRegExp)),extractedData.sanLoss=this.extractValue(text,this.RE.sanLossRegExp),extractedData.attacksPerRound=this.extractValue(text,this.RE.attacksPerRoundRegExp);const attacks=this.extractValue(text,this.RE.attacksRegExp);console.debug(attacks),extractedData.attacks=await this.processAttacks(attacks);const spells=this.extractValue(text,this.RE.spellsRegExp);console.debug(spells),extractedData.spells=await this.processSpells(spells);const skills=this.extractValue(text,this.RE.skillsRegExp);console.debug(skills),extractedData.skills=await this.processSkills(skills);const dodge=this.RE.dodgeRegExp.exec(text);null!==dodge&&extractedData.skills.push({name:this.cleanString(dodge.groups.name),value:Number(dodge.groups.percentage)});const languages=this.extractValue(text,this.RE.languagesRegExp);return console.debug(languages),extractedData.languages=await this.processSkills(languages),extractedData}processName(text){const nameFound=this.RE.nameRegExp.exec(text);return null!==nameFound?nameFound.groups.name:game.i18n.localize("COC7.ImportedUnnamedCharacter")}processAttacks(attacks){const results=[];if(null!=attacks){let weapon=this.RE.weaponRegExp.exec(attacks);for(;null!==weapon;){const cleanWeapon=this.cleanString(weapon.groups.weapon),doesDamageBonus=this.RE.dbRegExp.test(weapon.groups.damage),isRanged=this.RE.handgunRegExp.test(cleanWeapon)||this.RE.rifleRegExp.test(cleanWeapon)||this.RE.smbRegExp.test(cleanWeapon)||this.RE.machineGunRegExp.test(cleanWeapon),data={name:cleanWeapon,type:"weapon",data:{properties:{},range:{normal:{value:Number(weapon.groups.percentage),damage:weapon.groups.damage}}}};for(const[key]of Object.entries(COC7.weaponProperties))data.data.properties[key]=!1;data.data.properties.rngd=isRanged,data.data.properties.melee=doesDamageBonus,data.data.properties.addb=doesDamageBonus,results.push(data),weapon=this.RE.weaponRegExp.exec(attacks)}}return console.debug("attacks",results),results}processSpells(spells){const results=[];if(null!==spells){spells.replace(/(\n|\r)/g," ").split(",").forEach((s=>{results.push(this.cleanString(s))}))}return console.debug("spells",results),results}basicWeaponSkillData(firearms){return{specialization:game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName"),adjustments:defaultWeaponSkillAdjustments,properties:{special:!0,fighting:!firearms,firearm:firearms,combat:!0}}}processSkills(skills){const results=[];if(console.debug("skills string",skills),null!==skills){const skillsArr=skills.replace(/(\n|\r)/g," ").split(",");console.debug("skillsArr",skillsArr),skillsArr.forEach((skill=>{const parsedSkill=this.RE.skillRegExp.exec(skill);if(console.debug("parsedSkill",parsedSkill),null!==parsedSkill){const skillName=this.cleanString(parsedSkill.groups.skill);results.push({name:skillName,value:Number(parsedSkill.groups.percentage)})}}))}return console.debug("skills",results),results}extractValue(text,re){const results=re.exec(text);return null!==results?results[1]:null}cleanString(s){return s.replace(/(\n|\r)/g," ").replace(/^\s*/,"").replace(/\s*\.?\s*$/,"")}entityType(entityTypeString){switch(entityTypeString){case"coc-npc":return"npc";case"coc-creature":return"creature"}return console.warn("entity type: ",entityTypeString),"npc"}async createEntity(pc,entityTypeString){const importedCharactersFolder=await this.createImportCharactersFolderIfNotExists(),npc=await Actor.create({name:pc.name,type:this.entityType(entityTypeString),folder:importedCharactersFolder.id,data:{}});return await this.addTheSkills(pc,npc),await this.addTheLanguages(pc,npc),await this.addTheSpells(pc,npc),await this.handleTheAttacks(pc,npc),await this.updateActorData(pc,npc),npc}async createImportCharactersFolderIfNotExists(){let importedCharactersFolder=game.folders.find((entry=>"Imported characters"===entry.data.name&&"Actor"===entry.data.type));return null==importedCharactersFolder&&(importedCharactersFolder=await Folder.create({name:"Imported characters",type:"Actor",parent:null}),ui.notifications.info(game.i18n.localize("COC7.CreatedImportedCharactersFolder"))),importedCharactersFolder}async updateActorData(pc,npc){let updateData={};if(["str","con","siz","dex","app","int","pow","edu"].forEach((key=>{updateData[`data.characteristics.${key}.value`]=Number(pc[key])})),await npc.update(updateData),await npc.setLuck(Number(pc.lck)),await npc.setHp(Number(pc.hp)),await npc.setMp(Number(pc.mp)),updateData={},["san","mov","db","build","armor"].forEach((key=>{updateData[`data.attribs.${key}.value`]=Number(pc[key])})),null!==pc.age&&(updateData["data.infos.age"]=pc.age),null!==pc.sanLoss){const[passed,failed]=pc.sanLoss.split("/");updateData["data.special.sanLoss.checkPassed"]=passed,updateData["data.special.sanLoss.checkFailled"]=failed}null!==pc.attacksPerRound&&(updateData["data.special.attacksPerRound"]=Number(pc.attacksPerRound)),console.debug("updateData:",updateData),await npc.update(updateData)}async handleTheAttacks(pc,npc){if(null!==pc.attacks)for(let i=0;i<pc.attacks.length;i++){const attack=pc.attacks[i];console.debug("attack",attack);const mainAttackSkill=await this.mainAttackSkill(attack);await npc.createEmbeddedDocuments("Item",[mainAttackSkill]).then((async newSkills=>{await npc.createEmbeddedDocuments("Item",[attack]).then((async createdAttacks=>{if(Array.isArray(createdAttacks)&&createdAttacks.length>0&&Array.isArray(newSkills)&&newSkills.length>0){const createdAttack=await this.setMainAttackSkill(createdAttacks[0],newSkills[0]);console.debug("createdAttack",createdAttack)}}))}))}}async mainAttackSkill(attack){const skill=await this.weaponSkill(attack.name);if(null!=skill){console.debug("skill",skill);const skillClone=skill.clone({data:{value:attack.data.range.normal.value}});return console.debug("skillClone",skillClone),skillClone}console.debug(`Weapon skill not found for ${attack.name}, creating a new one`);const newSkill={name:attack.name,type:"skill",data:this.basicWeaponSkillData(!1)};return newSkill.data.base=attack.data?.range?.normal?.value,newSkill.data.value=attack.data?.range?.normal?.value,console.debug("newSkill",newSkill),newSkill}async setMainAttackSkill(weapon,skill){return await weapon.update({"data.skill.main.id":skill.id,"data.skill.main.name":skill.name,"data.properties":skill.data.properties,"data.adjustments":skill.data.adjustments,"data.specialization":skill.data.specialization})}async addTheSpells(pc,npc){null!==pc.spells&&pc.spells.forEach((async spell=>{const created=await npc.addItems([{name:spell,type:"spell"}]);console.debug(created)}))}async addTheLanguages(pc,npc){if(null!==pc.languages)for(const lang of pc.languages){const created=await npc.createSkill(lang.name,lang.value);console.debug(created)}}async addTheSkills(pc,npc){if(null!==pc.skills)for(const skill of pc.skills){const existingSkill=await game.items.find((i=>"skill"===i.data.type&&i.data.name===skill.name));if(void 0!==existingSkill){const clonedSkill=existingSkill.toObject();clonedSkill.data.base=skill.value,await npc.createEmbeddedDocuments("Item",[clonedSkill]).then((created=>console.debug(created)))}else await npc.createSkill(skill.name,skill.value).then((created=>console.debug(created)))}}async weaponSkill(weaponName){let skill=null;return this.RE.handgunRegExp.exec(weaponName)?(skill=await game.items.find((i=>"skill"===i.data.type&&"Handgun"===i.data.name)),console.debug(`${weaponName} uses Handgun skill: ${skill}`)):this.RE.rifleRegExp.exec(weaponName)?(skill=await game.items.find((i=>"skill"===i.data.type&&"Rifle/Shotgun"===i.data.name)),console.debug(`${weaponName} uses Rifle skill: ${skill}`)):this.RE.smbRegExp.exec(weaponName)?(skill=await game.items.find((i=>"skill"===i.data.type&&"Submachine Gun"===i.data.name)),console.debug(`${weaponName} uses Submachine Gun skill: ${skill}`)):this.RE.machineGunRegExp.exec(weaponName)?(skill=await game.items.find((i=>"skill"===i.data.type&&"Machine Gun"===i.data.name)),console.debug(`${weaponName} uses Machine Gun skill: ${skill}`)):this.RE.launchedWeapons.exec(weaponName)&&(skill=await game.items.find((i=>"skill"===i.data.type&&"Launch"===i.data.name)),console.debug(`${weaponName} uses Launch skill: ${skill}`)),skill}needsConversion(npc){let needsConversionResult=!0;return["str","con","siz","dex","app","int","pow","edu"].forEach((key=>{npc[key]>30&&(needsConversionResult=!1)})),console.debug("needsConversion:",needsConversionResult),needsConversionResult}async createActor(inputs){const lang=this.extractValue(inputs.lang,CoC7ActorImporterRegExp.optionLangRegExp)||"en";this.RE=CoC7ActorImporterRegExp.getRegularExpressions(lang);let character=await this.parseCharacter(inputs.text);console.debug(character),("coc-guess"===inputs.convertFrom6E&&this.needsConversion(character)||"coc-convert"===inputs.convertFrom6E)&&(character=await this.convert7E(character));return await this.createEntity(character,inputs.entity)}async convert7E(creature){return console.debug("Converting creature",creature),["str","con","siz","dex","app","int","pow"].forEach((key=>{creature[key]*=5})),creature.edu<=18?creature.edu*=5:creature.edu<=26?creature.edu=creature.edu+90-18:creature.edu=99,"-1d4"===creature.db?creature.db=-1:"-1d6"===creature.db&&(creature.db=-2),console.debug("Converted creature",creature),creature}}class CoC7ActorImporterDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.on("submit","form",this._onSubmit.bind(this)),html.find("option[value=coc-"+game.i18n.lang+"]").attr("selected","selected")}static async getInputs(){const inputs={};inputs.entity=$("#coc-entity-type").val().trim(),inputs.convertFrom6E=$("#coc-convert-6E").val().trim(),console.debug("entity type:",inputs.entity),inputs.lang=$("#coc-entity-lang").val().trim();let text=$("#coc-pasted-character-data").val().trim();return console.debug("received text","##"+text+"##"),"."!==text[text.length]&&(text+="."),inputs.text=text,inputs}static async importActor(html){console.debug("html",html);const inputs=await CoC7ActorImporterDialog.getInputs(),actor=new CoC7ActorImporter,createdActor=await actor.createActor(inputs);console.debug("createdActor:",createdActor),ui.notifications.info("Created "+createdActor.data?.type?.toUpperCase()+": "+createdActor.data?.name),await createdActor.sheet.render(!0)}async _onSubmit(event){event.preventDefault()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/actor-importer.html",data);return new Promise((resolve=>{new CoC7ActorImporterDialog({title:data.title,content:html,data,buttons:{import:{icon:'<i class="fas fa-file-import"></i>',label:game.i18n.localize("CoC7.Import"),callback:CoC7ActorImporterDialog.importActor},no:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel")}},default:"import",close:console.log("Closing:")},{classes:["coc7","dialog","actor-importer"],width:600}).render(!0)}))}}class CoC7Menu{constructor(options){this.options=options,this.controls=this._getControls()}static async renderMenu(controls,html){game.CoC7.menus||(game.CoC7.menus=new CoC7Menu);const menu=await renderTemplate("systems/CoC7/templates/coc7-menu.html",game.CoC7.menus.getData()),coc7Button=$(menu);coc7Button.find(".scene-control").click(game.CoC7.menus._onClickMenu.bind(game.CoC7.menus)),coc7Button.find(".control-tool").click(game.CoC7.menus._onClickTool.bind(game.CoC7.menus)),game.CoC7.menus.activeControl&&html.find(".scene-control").removeClass("active"),html.find(".scene-control").click(game.CoC7.menus._clearActive.bind(game.CoC7.menus)),html.append(coc7Button),game.CoC7.menus.html=html}get control(){return this.controls&&this.controls.find((c=>c.name===this.activeControl))||null}_clearActive(event){event.preventDefault();const customMenuActive=!!this.activeControl;this.activeControl="";const controlName=event.currentTarget.dataset?.control;ui.controls.activeControl===controlName&&customMenuActive&&ui.controls.render()}_onClickTool(event){if(event.preventDefault(),!canvas?.ready)return;const toolName=event.currentTarget.dataset.tool,tool=this.control.tools.find((t=>t.name===toolName));tool.toggle?(tool.active=!tool.active,tool.onClick instanceof Function&&tool.onClick(tool.active)):tool.button?tool.onClick instanceof Function&&tool.onClick(event):(tool.activeTool=toolName,tool.onClick instanceof Function&&tool.onClick())}_onClickMenu(event){if(event.preventDefault(),!canvas?.ready)return;const controlName=event.currentTarget.dataset.control,control=this.controls.find((t=>t.name===controlName));control.button?control.onClick instanceof Function&&control.onClick(event):(this.activeControl=controlName,ui.controls.render())}getData(){const isActive=!!canvas?.scene,controls=this.controls.filter((s=>!1!==s.visible)).map((s=>((s=duplicate(s)).css=["custom-control",s.button?"button":null,isActive&&this.activeControl===s.name?"active":""].filter((t=>!!t)).join(" "),s.button||(s.tools=s.tools.filter((t=>!1!==t.visible)).map((t=>{const active=isActive&&(s.activeTool===t.name||t.toggle&&t.active);return t.css=[t.toggle?"toggle":null,active?"active":null,t.class?t.class:null].filter((t=>!!t)).join(" "),t}))),s)));return{active:isActive,cssClass:isActive?"":"disabled",controls}}_getControls(){const isGM=game.user.isGM,controls=[];return controls.push({icon:"game-icon game-icon-tentacle-strike",name:"main-menu",title:"CoC7.GmTools",visible:isGM,tools:[{toggle:!0,icon:"fas fa-angle-double-up",name:"devphase",active:game.settings.get("CoC7","developmentEnabled"),title:"CoC7.DevPhase",onClick:async()=>await CoC7Utilities.toggleDevPhase()},{toggle:!0,icon:"fas fa-user-edit",name:"charcreate",active:game.settings.get("CoC7","charCreationEnabled"),title:"CoC7.CharCreationMode",onClick:async()=>await CoC7Utilities.toggleCharCreation()},{button:!0,icon:"fas fa-user-plus",name:"actor-import",title:"CoC7.ActorImporter",onClick:async()=>await CoC7ActorImporterDialog.create({title:game.i18n.localize("CoC7.ActorImporter")})},{toggle:!0,icon:"fas fa-certificate",class:"xp_toggle",name:"xptoggle",active:game.settings.get("CoC7","xpEnabled"),title:"CoC7.toggleXP",onClick:async()=>await CoC7Utilities.toggleXPGain()},{button:!0,icon:"game-icon game-icon-card-joker",name:"fakeroll",title:"CoC7.FakeRoll",onClick:CoC7Chat.fakeRollMessage},{button:!0,icon:"fas fa-moon",name:"startrest",title:"CoC7.startRest",onClick:async()=>await CoC7Utilities.startRest()}]}),controls.push({icon:"game-icon game-icon-d10",name:"dice-roll",title:"CoC7.RollDice",button:!0,onClick:event=>CoC7Utilities.rollDice(event)}),controls.push({icon:"fas fa-link",name:"create-link",title:"CoC7.CreateLink",visible:isGM,button:!0,onClick:CoC7LinkCreationDialog.create}),controls}}class CoC7Canvas{static get COC7_TYPES_SUPPORTED(){return["link"]}static async onDropSomething(canvas,item){if(item.CoC7Type&&CoC7Canvas.COC7_TYPES_SUPPORTED.includes(item.CoC7Type)){const gridSize=canvas.scene.data.grid,x=item.x-gridSize/2,y=item.y-gridSize/2,height=gridSize,width=gridSize;let dropTargetTokens=canvas.tokens.placeables.filter((obj=>{const c=obj.center;return Number.between(c.x,x,x+width)&&Number.between(c.y,y,y+height)}));switch(dropTargetTokens.length||(dropTargetTokens=canvas.tokens.controlled),item.CoC7Type){case"link":{const link=await CoC7Link.fromData(item);link.link||ui.notifications.error("Invalid link");const option={};if(option.speaker={alias:game.user.name},dropTargetTokens.length)dropTargetTokens.forEach((t=>{t.actor.hasPlayerOwner&&(option.whisper=t.actor.owners,chatHelper.createMessage(null,game.i18n.format("CoC7.MessageTargetCheckRequested",{name:t.actor.name,check:link.link}),option))}));else{game.users.players.filter((u=>!!u.character)).forEach((u=>{option.whisper=[u],chatHelper.createMessage(null,game.i18n.format("CoC7.MessageTargetCheckRequested",{name:u.character.name,check:link.link}),option)}))}}}}}}class CoC7CompendiumDirectory extends CompendiumDirectory{activateListeners(html){super.activateListeners(html);let translated=!1;if("en"===game.i18n.lang)translated=!0;else if(void 0!==game.babele)for(const v of Object.values(game.babele.modules))v.lang===game.i18n.lang&&(translated=!0);translated||(html.find("footer.directory-footer").append('<a class="compendium-translation" title="'+game.i18n.localize("CoC7.HowToTranslateTitle")+'">'+game.i18n.localize("CoC7.HowToTranslateTitle")+"</a>"),html.find(".compendium-translation").click((()=>{const message="<p>"+game.i18n.localize("CoC7.HowToTranslateWarning")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateInstallBabele")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateInstallTranslation")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateEnableTranslation")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateNoTranslation")+"</p>";new Dialog({title:game.i18n.localize("CoC7.HowToTranslateTitle"),content:message,buttons:{},default:"close"},{}).render(!0)})))}}class CoC7Book extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/secret-book.svg"),super(data,context)}static convertDifficulty(difficulty){switch(difficulty){case"hard":return CoC7Check.difficultyLevel.hard;case"extreme":return CoC7Check.difficultyLevel.extreme;case"critical":return CoC7Check.difficultyLevel.critical;case"unreadable":return CoC7Check.difficultyLevel.impossible;default:return CoC7Check.difficultyLevel.regular}}async addSpells(spells){const collection=this.data.data.spells?duplicate(this.data.data.spells):[];return spells.forEach((async spell=>{collection.push(spell)})),await this.update({"data.spells":collection})}async attemptInitialReading(){const difficulty=CoC7Book.convertDifficulty(this.data.data.difficultyLevel),language=this.data.data.language,skill=this.actor?.getSkillsByName(language);if(skill){if(0===skill.length)return ui.notifications.error(game.i18n.format("CoC7.UnknownLanguage",{actor:this.actor.name}));{const check=new CoC7Check;return check.actor=this.actor,check.skill=skill[0].id,check.difficulty=difficulty,check.parent=this.uuid,check.context="INITIAL_READING",check.flavor=game.i18n.format("CoC7.ReadAttempt",{book:this.name,language,difficulty:this.data.data.difficultyLevel}),await check.roll(),await check.toMessage()}}return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"))}async changeProgress(mode,value){if(!this.isOwned&&"reset"!==mode)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));if(!this.data.data.initialReading&&"reset"!==mode)return ui.notifications.error(game.i18n.format("CoC7.InitialReadingNeeded",{actor:this.actor.name,book:this.name}));if(!this.data.data.type.mythos&&"reset"!==mode)return ui.notifications.error(game.i18n.localize("CoC7.NotMythosTome"));const necessary=this.data.data.study.necessary;let fullStudy=this.data.data.fullStudy,progress=this.data.data.study.progress;if(isNaN(progress))return await this.update({"data.study.progress":0});if(value&&progress>value)return await this.update({"data.fullStudy":++fullStudy,"data.study.progress":value}),await this.completeFullStudy();if("increase"===mode&&progress<necessary){if(!1!==await this.checkExhaustion())return;if(await this.update({"data.study.progress":++progress}),progress===necessary)return await this.update({"data.fullStudy":++fullStudy}),await this.grantFullStudy()}else if("decrease"===mode&&progress>0)return await this.update({"data.study.progress":--progress})}async checkExhaustion(){const actorMythosValue=this.actor?.cthulhuMythos,mythosRating=this.data.data.mythosRating;if(this.data.data.initialReading)return actorMythosValue>=mythosRating&&(await this.update({"data.study.progress":this.data.data.study.necessary}),ui.notifications.warn(game.i18n.format("CoC7.BookHasNothingMoreToTeach",{actor:this.actor.name,book:this.name})))}async grantFullStudy(){if(!this.data.data.type.mythos)return;if(!1!==await this.checkExhaustion())return;const actorMythosValue=this.actor.cthulhuMythos,developments=[],mythosRating=this.data.data.mythosRating;let mythosFinal=this.data.data.gains.cthulhuMythos.final;if(actorMythosValue+mythosFinal>mythosRating)for(let index=1;index<=mythosFinal;index++)actorMythosValue+mythosFinal-index<=mythosRating&&(mythosFinal-=index);return developments.push({name:game.i18n.localize("CoC7.CthulhuMythosName"),gain:parseInt(mythosFinal)},{name:this.data.data.language,gain:"development"}),await this.grantSkillDevelopment(developments),await this.rollSanityLoss(),await this.update({"data.fullStudies":++this.data.data.fullStudies})}async grantInitialReading(){if(this.data.data.initialReading)return;const developments=[],mythos={gains:this.data.data.gains.cthulhuMythos.initial,type:this.data.data.type.mythos},occult={gains:this.data.data.gains.occult,type:this.data.data.type.occult},other={gains:this.data.data.gains.others,type:this.data.data.type.other};return mythos.type&&mythos.gains&&developments.push({name:game.i18n.localize("CoC7.CthulhuMythosName"),gain:parseInt(mythos.gains)}),occult.type&&occult.gains&&developments.push({name:game.i18n.localize("CoC7.Occult"),gain:parseInt(occult.gains)}),other.type&&other.gains.forEach((async skill=>{const pattern=skill.name.match(/^(.+) \((.+)\)$/);pattern&&(skill.specialization=pattern[1],skill.name=pattern[2]),"development"!==skill.value&&(skill.value=(await new Roll(skill.value).roll({async:!0})).total),skill.value&&developments.push({name:skill.name,gain:skill.value,specialization:skill.specialization})})),await this.grantSkillDevelopment(developments),(mythos.type||occult.type)&&this.data.data.sanityLoss&&await this.rollSanityLoss(),await this.update({"data.initialReading":!0})}async grantSpellLearning(){return ui.notifications.warn("Automation of learning spells from books is not currently supported and will be added in future updates.")}async grantSkillDevelopment(developments){if(0!==developments.length){for(const development of developments){if(!development.gain)continue;let skill=await this.actor.getSkillsByName(development.name);if(0===skill.length){const existingSkill=await game.items.find((item=>"skill"===item.data.type&&item.data.name===development.name));existingSkill?skill=await this.actor.createEmbeddedDocuments("Item",[duplicate(existingSkill)]):(skill=await this.actor.createSkill(development.name,0),development.specialization&&await skill[0].update({"data.properties.special":!0,"data.specialization":development.specialization}))}if(skill=skill[0],"development"===development.gain)await skill.flagForDevelopement();else{if(skill.value+development.gain>99)for(let index=1;index<=development.gain;index++)skill.value+development.gain-index<=99&&(development.gain-=index,await skill.increaseExperience(development.gain));await skill.increaseExperience(development.gain)}}return this.showDevelopmentsTable(developments)}}async redoFullStudy(){return await this.update({"data.study.progress":0}),await this.update({"data.study.necessary":2*this.data.data.study.necessary})}async rollSanityLoss(){const value=this.data.data.sanityLoss;if(!value||""===value)return;const template=SanCheckCard.template;let html=await renderTemplate(template,{});const message=await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.ReadingMythosTome",{book:this.name}),content:html}),card=await message.getHTML();if(void 0!==card.length&&1===card.length){const sanityLoss=(await new Roll(value).roll({async:!0})).total;html=card.find(".chat-card")[0],html.dataset.object=escape(JSON.stringify({actorKey:this.actor.id,fastForward:!1,sanData:{sanMin:sanityLoss,sanMax:sanityLoss}}));const sanityCheck=SanCheckCard.getFromCard(html);await sanityCheck.bypassRollSan(),await sanityCheck.rollSanLoss(),sanityCheck.updateChatCard()}}async showDevelopmentsTable(developments){for(const development of developments)development.specialization&&(development.name=`${development.specialization} (${development.name})`),"development"===development.gain?development.gain=game.i18n.localize("CoC7.MarkedForDevelopment"):development.gain=`+${development.gain} ${game.i18n.localize("CoC7.Points")}`;const html=await renderTemplate("systems/CoC7/templates/items/book/development.hbs",{developments});return await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.GainsForReading",{book:this.name}),content:html})}async attemptSpellLearning(id){if(!this.isOwned)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));if(!this.data.data.initialReading)return ui.notifications.error(game.i18n.format("CoC7.InitialReadingNeeded",{actor:this.actor.name,book:this.name}));const spell=this.data.data.spells.find((spell=>spell._id===id));if(spell){const check=new CoC7Check;check.actor=this.actor,check.difficulty=CoC7Check.difficultyLevel.hard,check.parent=this.uuid,check.flavor=game.i18n.format("CoC7.LearnSpellAttempt",{book:this.name,spell:spell.name}),check.context="SPELL_LEARNING",await check.rollCharacteristic("int"),await check.toMessage()}}async updateRoll(roll){const check=CoC7Check.fromRollString(roll);if(check.passed){if("INITIAL_READING"===check.context)return await this.grantInitialReading();if("SPELL_LEARNING"===check.context)return await this.grantSpellLearning()}}}class CoC7DecaderDie extends DiceTerm{constructor(termData){super(termData),this.faces=10}get total(){const total=super.total;return 10===total?0:10*total}static get DENOMINATION(){return"t"}}class CoC7ArchetypeSheet extends ItemSheet{activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"skills"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"skills"))))}async _onDrop(event,type="skill",collectionName="skills"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item"),collection=this.item.data.data[collectionName]?duplicate(this.item.data.data[collectionName]):[];dataList.forEach((async item=>{item&&item.data&&[type].includes(item.data.type)&&(!CoC7Item.isAnySpec(item)&&collection.find((el=>el.name===item.data.name))||collection.push(duplicate(item.data)))})),await this.item.update({[`data.${collectionName}`]:collection})}_onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),chatData=this.item.data.data[collectionName].find((s=>s._id===li.data("item-id"))).data.description;if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData.value}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const itemIndex=$(event.currentTarget).parents(".item").data("item-id");itemIndex&&await this.removeItem(itemIndex,collectionName)}async removeItem(itemId,collectionName="items"){const itemIndex=this.item.data.data[collectionName].findIndex((s=>s._id===itemId));if(itemIndex>-1){const collection=this.item.data.data[collectionName]?duplicate(this.item.data.data[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`data.${collectionName}`]:collection})}}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","occupation"],width:520,height:480,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return"systems/CoC7/templates/items/archetype.html"}_onDragStart(event){const li=event.currentTarget.closest(".item"),dragData={type:"Item",data:this.item.data.data.skills.find((s=>s._id===li.dataset.itemId))};event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}getData(){const data=super.getData(),itemData=data.data;data.data=itemData.data,data.isOwned=this.item.isOwned;const coreCharacteristics=[];for(const[key,selected]of Object.entries(data.data.coreCharacteristics))if(selected){const characName=game.i18n.localize(`CHARAC.${key.toUpperCase()}`);coreCharacteristics.push(characName)}data.skillListEmpty=0===data.data.skills.length,data.data.skills.forEach((skill=>{skill.data.specialization&&!skill.name.includes(skill.data.specialization)?skill.displayName=`${skill.data.specialization} (${skill.name})`:skill.displayName=skill.name})),data.data.skills.sort(((a,b)=>a.displayName.localeCompare(b.displayName))),data.coreCharacteristicsString="";const orString=` ${game.i18n.localize("CoC7.Or")} `;return coreCharacteristics.length&&(data.coreCharacteristicsString+=coreCharacteristics.join(orString)),data.itemProperties=[],data.itemProperties.push(`${game.i18n.localize("CoC7.PulpTalents")}: ${data.data.bonusPoints}`),data.itemProperties.push(`${game.i18n.localize("CoC7.BonusPoints")}: ${data.data.talents}`),data}_updateObject(event,formData){if(formData.data||(formData=expandObject(formData)),formData.data.groups){formData.data.groups=Object.values(formData.data?.groups||{});for(let index=0;index<this.item.data.data.groups.length;index++)formData.data.groups[index].skills=duplicate(this.item.data.data.groups[index].skills)}super._updateObject(event,formData)}}class CoC7BookSheet extends ItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/items/book/main.hbs",classes:["coc7","item","book"],width:500,height:"auto",resizable:!1,dragDrop:[{dragSelector:".spells",dropSelector:null}],scrollY:[".body"],tabs:[{navSelector:".navigation",contentSelector:".body",initial:"description"}]})}async getData(){const data=super.getData(),itemData=data.data;return data.data=itemData.data,data.initialReading=this.item.data.data.initialReading,data.isKeeper=game.user.isGM,data.isOwned=this.item.isOwned,data.spellsLearned=this.spellsLearned,data.exhausted=!1!==await this.item.checkExhaustion(),data.studyCompleted=this.item.data.data.study.progress===this.item.data.data.study.necessary,data}get spellsLearned(){let amount=0;const spells=this.item.data.data.spells;for(const spell of spells)spell.data.learned&&amount++;return`${amount} / ${spells.length}`}activateListeners(html){super.activateListeners(html),html.find("#attempt-initial-reading").click((event=>{event.preventDefault(),this.item.attemptInitialReading()})),html.find(".delete-spell").click((event=>this._onDelete(event))),html.find(".teach-spell").click((event=>{const id=$(event.currentTarget).parents("li").data("id");this.item.attemptSpellLearning(id)})),html.find('[name="data.study.necessary"]').change((event=>{const value=parseInt(event.currentTarget.value);this.item.changeProgress("reset",value)})),html.find("#increase-progress").click((()=>{this.item.changeProgress("increase")})),html.find("#decrease-progress").click((()=>{this.item.changeProgress("decrease")})),html.find(".add-other-gains").click((event=>{this.modifyOthersGains(event,"add")})),html.find(".change-other-gains").change((event=>{this.modifyOthersGains(event,"change")})),html.find("#redo-full-study").click((()=>{this.item.redoFullStudy()})),html.find(".remove-other-gains").click((event=>{this.modifyOthersGains(event,"remove")})),html.find(".option").click((event=>this.modifyType(event)))}async _onDelete(event){if(!game.user.isGM)return;event.preventDefault();const index=$(event.currentTarget).parents("li").data("index"),spells=this.item.data.data.spells?duplicate(this.item.data.data.spells):[];return index>=0&&spells.splice(index,1),await this.item.update({"data.spells":spells})}async _onDrop(event,type="spell"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item"),spells=[];dataList.forEach((async item=>{item&&"spell"===item.data.type&&spells.push(item.data)})),await this.item.addSpells(spells)}modifyType(event){event.preventDefault(),event.stopPropagation();return $(event.currentTarget).prev().trigger("click")}async modifyOthersGains(event,mode){event.preventDefault();const element=$(event.currentTarget),index=element.parents("tr").data("index"),skills=this.item.data.data.gains.others?duplicate(this.item.data.data.gains.others):[];switch(mode){case"add":skills.push({name:game.i18n.localize("CoC7.NewSkillName"),value:"development"});break;case"change":skills[index]={name:element.is("input")?element.val():skills[index].name,value:element.is("select")?element.val():skills[index].value};break;case"remove":index>=0&&skills.splice(index,1)}return await this.item.update({"data.gains.others":skills})}}class CoC7ChaseSheet extends ItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","item","chase"],width:550,height:500,resizable:!0,tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"participants"}]})}get template(){return"systems/CoC7/templates/items/chase.html"}static get type(){return"coc7ChaseSheet"}getData(options={}){const data=super.getData(options),itemData=data.data;return data.data=itemData.data,data.participants=[],this.participants.forEach((p=>{data.participants.push(new _participant(p))})),data.preys=data.participants.filter((p=>p.chaser)).sort(((a,b)=>a.mov-b.mov)),data.chasers=data.participants.filter((p=>!p.chaser)).sort(((a,b)=>a.mov-b.mov)),data}get participants(){return this.item.data.data.participants}activateListeners(html){super.activateListeners(html),html.on("dblclick",".open-actor",CoC7Chat._onOpenActor.bind(this)),html.find(".participant").on("dragenter",(event=>this._onDragEnterParticipant(event))),html.find(".participant").on("dragover",(event=>this._onDragEnterParticipant(event))),html.find(".participant").on("dragleave",(event=>this._onDragLeaveParticipant(event))),html.find(".participant").on("drop",(event=>this._onDragLeaveParticipant(event))),html.find(".p-side").click(this._onChangeSide.bind(this)),html.find(".delete-participant").click(this._onDeleteParticipant.bind(this)),html.find(".reset-roll").click(this._onResetRoll.bind(this)),html.find(".delete-driver").click(this._onDeleteDriver.bind(this)),html.find(".new-participant").on("dragenter",(event=>this._onDragEnterParticipant(event))),html.find(".new-participant").on("dragover",(event=>this._onDragEnterParticipant(event))),html.find(".new-participant").on("dragleave",(event=>this._onDragLeaveParticipant(event))),html.find(".new-participant").on("drop",(event=>this._onDragLeaveParticipant(event))),html.find(".add-sign").click(this._onAddParticipant.bind(this)),html.find(".roll-participant").click(this._onRollParticipant.bind(this));new DragDrop({dropSelector:".participant",callbacks:{drop:this._onDropParticipant.bind(this)}}).bind(html[0]);new DragDrop({dropSelector:".new-participant",callbacks:{drop:this._onAddParticipant.bind(this)}}).bind(html[0])}_getSubmitData(updateData={}){let data=new FormDataExtended(this.form,{editors:this.editors}).toObject();if(data=updateData?mergeObject(data,updateData):expandObject(data),data.data.participants){const participants=duplicate(this.participants);for(const[k,v]of Object.entries(data.data.participants)){const index=Number(k),original=participants[Number(index)],cleaned=clean(v);mergeObject(original,cleaned),participants[index]=original}data.data.participants=participants}return flattenObject(data)}async _updateObject(event,formData){const target=event.currentTarget;if("true"===target?.dataset?.override){const[,type,sIndex,subType,data]=target.name.split("."),index=Number(sIndex);if("participants"===type&&!isNaN(index)&&"speed-check"===subType&&"name"===data){const participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[];return participants[index].speedCheck?(delete participants[index].speedCheck.id,delete participants[index].speedCheck.type):participants[index].speedCheck={},participants[index].speedCheck.name=target.value,void await this.item.update({"data.participants":participants})}}super._updateObject(event,formData)}async _onDropParticipant(event){const index=event.currentTarget.dataset?.index;if(!index)return;const dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);await this.alterParticipant(data,Number(index))}async _onAddParticipant(event){let data={};if(event.dataTransfer){const dataString=event.dataTransfer.getData("text/plain");data=JSON.parse(dataString)}await this.addParticipant(data)}async _onRollParticipant(event){const index=event.currentTarget.closest(".participant").dataset.index,participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[],participant=new _participant(participants[index]);if(participant.speedCheck.refSet){const roll=new CoC7Check;roll.parent=this.item.uuid,participant.data.rolled=!0,participant.data.rollUuid=roll.uuid,roll.actor=participant.actor.actorKey,!event.shiftKey&&participant.actor.player&&(roll.standby=!0,roll.standbyText="CoC7.Chase",roll.standbyRightIcon="systems/CoC7/assets/icons/running-solid.svg"),participant.speedCheck.isCharacteristic?(await roll.rollCharacteristic(participant.speedCheck.ref.key),roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isSkill?(roll.skill=participant.speedCheck.ref,await roll.roll(),roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isAttribute&&(await roll.rollAttribute(participant.speedCheck.ref.key),roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString)}else if(participant.speedCheck.score){const rollData={rawValue:participant.speedCheck.score,displayName:participant.speedCheck.name,actorName:participant.name?participant.name:void 0};participant.hasActor&&(rollData.actor=participant.actor.actorKey);const roll=CoC7Check.create(rollData);roll.parent=this.item.uuid,await roll.roll(),roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString,participant.data.rolled=!0,participant.data.rollUuid=roll.uuid}await this.item.update({"data.participants":participants})}async _onDragEnterParticipant(event){event.currentTarget.classList.add("drag-over")}async _onDragLeaveParticipant(event){event.currentTarget.classList.remove("drag-over")}async _onChangeSide(event){const index=event.currentTarget.closest(".participant").dataset.index,participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[];participants[index].chaser=!participants[index].chaser,await this.item.update({"data.participants":participants})}async _onDeleteDriver(event){const index=event.currentTarget.closest(".driver").dataset.index,participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[];delete participants[index].actorKey,await this.item.update({"data.participants":participants})}async _onDeleteParticipant(event){const index=event.currentTarget.closest(".participant").dataset.index,participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[];participants.splice(index,1),await this.item.update({"data.participants":participants})}async _onResetRoll(event){const index=event.currentTarget.closest(".participant").dataset.index,participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[];delete participants[index].speedCheck.rollDataString,await this.item.update({"data.participants":participants})}async alterParticipant(data,index){const actorKey=data.sceneId&&data.tokenId?`${data.sceneId}.${data.tokenId}`:"Actor"===data.type?data.id:data.actorId||data.actorKey,participant={},actor=chatHelper.getActorFromKey(actorKey);switch(actor&&("vehicle"===actor.data.type?participant.vehicleKey=actorKey:participant.actorKey=actorKey),data.type?.toLowerCase()){case"actor":break;case"item":participant.speedCheck={id:data.data?._id||data.id,type:"item"};break;case"characteristic":participant.speedCheck={id:data.name,type:"characteristic"};break;case"attribute":participant.speedCheck={id:data.name,type:"attribute"}}const participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[],oldParticipant=participants[index];oldParticipant.mov&&delete oldParticipant.mov,mergeObject(oldParticipant,participant),await this.item.update({"data.participants":participants})}async addParticipant(data){const actorKey=data.sceneId&&data.tokenId?`${data.sceneId}.${data.tokenId}`:data.actorId||data.actorKey||data.id,participant={},actor=chatHelper.getActorFromKey(actorKey);switch(actor&&("vehicle"===actor.data.type?participant.vehicleKey=actorKey:participant.actorKey=actorKey),data.type?.toLowerCase()){case"actor":break;case"item":if(data.id){if("skill"!==game.items.get(data.id)?.data?.type)return}participant.speedCheck={id:data.data?._id||data.id,type:"item"};break;case"characteristic":participant.speedCheck={id:data.name,type:"characteristic"};break;case"attribute":participant.speedCheck={id:data.name,type:"attribute"}}const participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[];participants.push(participant),await this.item.update({"data.participants":participants})}async updateRoll(rollString){if(game.user.isGM){const roll=CoC7Check.fromRollString(rollString),participants=this.item.data.data.participants?duplicate(this.item.data.data.participants):[],index=participants.findIndex((p=>p.rollUuid===roll.uuid));index>=0&&(participants[index].speedCheck.rollDataString=roll.JSONRollString,await this.item.update({"data.participants":participants}))}else{const data={data:rollString,type:"invoke",method:"updateRoll",item:this.item.uuid};game.socket.emit("system.CoC7",data)}}}function clean(obj){for(const propName in obj){const tp=getType(obj[propName]);"Object"===tp&&(obj[propName]=clean(obj[propName])),("Object"!==tp||Object.entries(obj[propName]).length)&&("string"!==tp||obj[propName].length)?"string"!==tp||isNaN(Number(obj[propName]))||(obj[propName]=Number(obj[propName])):obj[propName]=null}return obj}class _participant{constructor(data={}){this.data=data}get actor(){return this._actor||(this._actor=chatHelper.getActorFromKey(this.data.actorKey)),this._actor}get isActor(){return this.hasActor||this.hasVehicle}get key(){return this.hasVehicle?this.vehicle.actorKey:this.hasActor?this.actor.actorKey:void 0}get icon(){return this.isActor?this.hasVehicle?this.vehicle.img:this.hasActor?this.actor.img:void 0:"systems/CoC7/assets/icons/question-circle-regular.svg"}get driver(){return this._driver||(this._driver=chatHelper.getActorFromKey(this.data.actorKey)),this._driver}get vehicle(){return this.data.vehicleKey&&(this._vehicle=chatHelper.getActorFromKey(this.data.vehicleKey)),this._vehicle}get hasActor(){return!!this.actor}get hasVehicle(){return!!this.vehicle}get name(){return this.hasVehicle?this.vehicle.name:this.hasActor?this.actor.name:this.data.name||void 0}get mov(){return this.data.mov||(this.hasVehicle?this.data.mov=this.vehicle.mov:this.hasActor&&(this.data.mov=this.actor.mov)),this.data.mov&&(isNaN(Number(this.data.mov))?(this.data.hasValidMov=!1,this.data.mov=void 0):this.data.hasValidMov=!0),this.data.mov}get dex(){return this.data.dex||(this.hasVehicle&&this.hasDriver?this.data.dex=this.driver.characteristics.dex.value:this.hasActor&&(this.data.dex=this.actor.characteristics.dex.value)),this.data.dex&&(isNaN(Number(this.data.dex))?(this.data.hasValidDex=!1,this.data.dex=void 0):this.data.hasValidDex=!0),this.data.dex}get isChaser(){return!!this.data.chaser}get hasDriver(){return this.hasVehicle&&this.hasActor}get movAdjustment(){if(this.data.speedCheck?.rollDataString){const roll=CoC7Check.fromRollString(this.data.speedCheck.rollDataString);if(roll&&!roll.standby){if(roll.successLevel>=CoC7Check.successLevel.extreme)return 1;if(roll.failed)return-1}}return 0}get adjustedMov(){if(void 0!==this.mov&&!isNaN(Number(this.mov)))return Number(this.mov)+this.movAdjustment}get hasMovAdjustment(){return this.hasBonusMov||this.hasMalusMov}get hasBonusMov(){return this.data.movAdjustment>0}get hasMalusMov(){return this.data.movAdjustment<0}get speedCheck(){const check={};if(this.data.speedCheck?.name&&(check.name=this.data.speedCheck.name),this.data.speedCheck?.score&&(check.score=this.data.speedCheck.score),check.cssClasses="",this.data.speedCheck?.rollDataString&&(check.roll=CoC7Check.fromRollString(this.data.speedCheck.rollDataString),check.roll&&(check.roll.standby&&!check.roll.hasCard||(check.rolled=!0,check.inlineRoll=check.roll.inlineCheck.outerHTML,check.cssClasses+="rolled",check.roll.standby||(check.roll.successLevel>=CoC7Check.successLevel.extreme?check.modifierCss="upgrade":check.roll.failed&&(check.modifierCss="downgrade"),(check.roll.successLevel>=CoC7Check.successLevel.extreme||check.roll.failed)&&(check.hasModifier=!0))))),this.hasActor){if(check.options=[],["con"].forEach((c=>{const characterisitc=this.actor.getCharacteristic(c);characterisitc?.value&&check.options.push(characterisitc.label)})),this.actor.driveSkills.forEach((s=>{check.options.push(s.name)})),this.actor.pilotSkills.forEach((s=>{check.options.push(s.name)})),check.hasOptions=!!check.options.length,this.data.speedCheck?.id){let item=this.actor.find(this.data.speedCheck.id);if(!item){const gameItem=game.items.get(this.data.speedCheck.id);gameItem&&(item=this.actor.find(gameItem.name))}item&&("item"===item.type&&"skill"===item.value.data?.type&&(check.ref=item.value,check.name=item.value.name,check.type="skill",check.isSkill=!0,check.refSet=!0,check.score=item.value.value),"characteristic"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="characteristic",check.isCharacteristic=!0,check.refSet=!0,check.score=item.value.value),"attribute"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="attribute",check.isAttribute=!0,check.refSet=!0,check.score=item.value.value))}else if(this.data.speedCheck?.name){const item=this.actor.find(this.data.speedCheck.name);item&&("item"===item.type&&"skill"===item.value.data?.type&&(check.ref=item.value,check.name=item.value.name,check.type="skill",check.isSkill=!0,check.refSet=!0,check.score=item.value.value),"characteristic"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="characteristic",check.isCharacteristic=!0,check.refSet=!0,check.score=item.value.value),"attribute"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="attribute",check.isAttribute=!0,check.refSet=!0,check.score=item.value.value))}}else if(this.data.speedCheck?.id){const item=game.items.get(this.data.speedCheck.id);item&&"skill"===item.data?.type&&(check.ref=item,check.name=item.name,check.type="skill",check.isSkill=!0,check.refSet=!1,check.score=item.base)}return check.rolled||check.score||(check.cssClasses+=" invalid"),check}}class CoC7ItemSheetV2 extends ItemSheet{constructor(...args){super(...args),this._sheetTab="items"}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","item"],width:290,height:300,tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"skills"}]})}get template(){return"systems/CoC7/templates/items/item-sheetV2.html"}getData(options={}){const data=super.getData(options),itemData=data.data;if(data.data=itemData.data,data.hasOwner=null!==this.item.actor,"skill"===this.item.data.type){data._properties=[];for(const[key,value]of Object.entries(COC7.skillProperties)){const property={};property.id=key,property.name=value,property.isEnabled=!0===this.item.data.data.properties[key],data._properties.push(property)}data._eras=[];for(const[key,value]of Object.entries(COC7.eras)){const era={};era.id=key,era.name=value,era.isEnabled=!0===this.item.data.data.eras[key],data._eras.push(era)}data.isSpecialized=this.item.data.data.properties.special,data.canModifySpec=!this.item.data.data.properties.firearm&&!this.item.data.data.properties.fighting}return data}activateListeners(html){super.activateListeners(html),this.options.editable&&html.find(".toggle-switch").click(this._onClickToggle.bind(this))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property;await this.item.toggleProperty(propertyId,event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode)}}class CoC7ItemSheet extends CoC7ItemSheetV2{static get defaultOptions(){return mergeObject(super.defaultOptions,{width:520,height:480})}}class CoC7OccupationSheet extends ItemSheet{activateListeners(html){if(super.activateListeners(html),!this.options.editable)return;html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"skills"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"skills"))),html.find(".group-item-delete").click(this._onGroupItemDelete.bind(this)),html.find(".group-control").click(this._onGroupControl.bind(this));new DragDrop({dropSelector:".droppable",callbacks:{drop:this._onDrop.bind(this)}}).bind(html[0])}async _onDrop(event,type="skill",collectionName="skills"){event.preventDefault(),event.stopPropagation();const optionalSkill=event?.currentTarget?.classList?.contains("optional-skills"),ol=event?.currentTarget?.closest("ol"),index=ol?.dataset?.group,dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item"),collection=this.item.data.data[collectionName]?duplicate(this.item.data.data[collectionName]):[],groups=this.item.data.data.groups?duplicate(this.item.data.data.groups):[];dataList.forEach((async item=>{if(item&&item.data&&[type].includes(item.data.type))if(optionalSkill){if(!CoC7Item.isAnySpec(item)){if(collection.find((el=>el.name===item.data.name)))return;if(groups[index].skills.find((el=>el.name===item.name)))return}groups[index].skills=groups[index].skills.concat([item.data])}else{if(!CoC7Item.isAnySpec(item)){if(collection.find((el=>el.name===item.data.name)))return;for(let i=0;i<groups.length;i++){const index=groups[i].skills.findIndex((el=>el.name===item.data.name));-1!==index&&groups[i].skills.splice(index,1)}}collection.push(duplicate(item.data))}})),await this.item.update({"data.groups":groups}),await this.item.update({[`data.${collectionName}`]:collection})}async _onGroupControl(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("add-group")){await this._onSubmit(event);const groups=this.item.data.data.groups;await this.item.update({"data.groups":groups.concat([{options:0,skills:[]}])})}if(a.classList.contains("remove-group")){await this._onSubmit(event);const groups=duplicate(this.item.data.data.groups),ol=a.closest(".item-list.group");groups.splice(Number(ol.dataset.group),1),await this.item.update({"data.groups":groups})}}_onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),chatData=this.item.data.data[collectionName].find((s=>s._id===li.data("item-id"))).data.description;if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData.value}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const itemIndex=$(event.currentTarget).parents(".item").data("item-id");itemIndex&&await this.removeItem(itemIndex,collectionName)}async _onGroupItemDelete(event){const li=event.currentTarget.closest(".item"),ol=li.closest(".item-list.group"),groups=duplicate(this.item.data.data.groups);groups[Number(ol.dataset.group)].skills.splice(Number(li.dataset.itemIndex),1),await this.item.update({"data.groups":groups})}async removeItem(itemId,collectionName="items"){const itemIndex=this.item.data.data[collectionName].findIndex((s=>s._id===itemId));if(itemIndex>-1){const collection=this.item.data.data[collectionName]?duplicate(this.item.data.data[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`data.${collectionName}`]:collection})}}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","occupation"],width:520,height:480,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return"systems/CoC7/templates/items/occupation.html"}_onDragStart(event){const li=event.currentTarget.closest(".item"),dragData={type:"Item",data:this.item.data.data.skills.find((s=>s._id===li.dataset.itemId))};event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}getData(){const data=super.getData(),itemData=data.data;data.data=itemData.data,data.isOwned=this.item.isOwned;const optionnal=[],mandatory=[];for(const[key,carac]of Object.entries(data.data.occupationSkillPoints))if(carac.multiplier){const caracName=game.i18n.localize(`CHARAC.${key.toUpperCase()}`);carac.selected&&carac.optional&&optionnal.push(`${caracName}x${carac.multiplier}`),carac.selected&&!carac.optional&&mandatory.push(`${caracName}x${carac.multiplier}`)}data.skillListEmpty=0===data.data.skills.length,data.data.skills.forEach((skill=>{skill.data.specialization&&!skill.name.includes(skill.data.specialization)?skill.displayName=`${skill.data.specialization} (${skill.name})`:skill.displayName=skill.name})),data.data.skills.sort(((a,b)=>a.displayName.localeCompare(b.displayName)));for(let index=0;index<data.data.groups.length;index++)data.data.groups[index].isEmpty=0===data.data.groups[index].skills.length,data.data.groups[index].skills.forEach((skill=>{skill.data.specialization&&!skill.name.includes(skill.data.specialization)?skill.displayName=`${skill.data.specialization} (${skill.name})`:skill.displayName=skill.name})),data.data.groups[index].skills.sort(((a,b)=>a.displayName.localeCompare(b.displayName)));data.occupationPointsString="";const orString=` ${game.i18n.localize("CoC7.Or")} `;mandatory.length&&(data.occupationPointsString+=mandatory.join(" + ")),optionnal.length&&mandatory.length&&(data.occupationPointsString+=` + (${optionnal.join(orString)})`),optionnal.length&&!mandatory.length&&(data.occupationPointsString+=optionnal.join(orString)),data.itemProperties=[];for(const[key,value]of Object.entries(data.data.type))value&&data.itemProperties.push(COC7.occupationProperties[key]?COC7.occupationProperties[key]:null);return data}_updateObject(event,formData){if(formData.data||(formData=expandObject(formData)),formData.data.groups){formData.data.groups=Object.values(formData.data?.groups||{});for(let index=0;index<this.item.data.data.groups.length;index++)formData.data.groups[index].skills=duplicate(this.item.data.data.groups[index].skills)}super._updateObject(event,formData)}}class CoC7SetupSheet extends ItemSheet{activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"items"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"items"))),html.find(".add-bio").click((async()=>await this._onAddBio())),html.find(".remove-section").click(this._onRemoveSection.bind(this)))}async _onDrop(event,collectionName="items"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item"),collection=this.item.data.data[collectionName]?duplicate(this.item.data.data[collectionName]):[];dataList.forEach((async item=>{item&&item.data&&["item","weapon","skill","book","spell"].includes(item.data.type)&&(!CoC7Item.isAnySpec(item)&&collection.find((el=>el.name===item.data.name))||collection.push(duplicate(item.data)))})),await this.item.update({[`data.${collectionName}`]:collection})}async _onRemoveSection(event){const div=event.currentTarget.closest(".item"),bio=duplicate(this.item.data.data.bioSections);bio.splice(Number(div.dataset.index),1),await this.item.update({"data.bioSections":bio})}async _onAddBio(){const bio=this.item.data.data.bioSections?duplicate(this.item.data.data.bioSections):[];bio.push(null),await this.item.update({"data.bioSections":bio})}_onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),chatData=this.item.data.data[collectionName].find((s=>s._id===li.data("item-id"))).data.description;if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData.value}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const itemIndex=$(event.currentTarget).parents(".item").data("item-id");itemIndex&&await this.removeItem(itemIndex,collectionName)}getItem(itemId,collectionName="items"){return this.item.data.data[collectionName].find((s=>s._id===itemId))}async removeItem(itemId,collectionName="items"){const itemIndex=this.item.data.data[collectionName].findIndex((s=>s._id===itemId));if(itemIndex>-1){const collection=this.item.data.data[collectionName]?duplicate(this.item.data.data[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`data.${collectionName}`]:collection})}}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","setup"],width:520,height:530,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return"systems/CoC7/templates/items/setup.html"}_onDragStart(event){const li=event.currentTarget.closest(".item"),dragData={type:"Item",data:this.item.data.data.items.find((s=>s._id===li.dataset.itemId))};event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}getData(){const data=super.getData();data.isOwned=this.item.isOwned;const itemData=data.data;data.data=itemData.data,data.skills=data.data.items.filter((it=>"skill"===it.type)),data.otherItems=data.data.items.filter((it=>"skill"!==it.type)),data.skillListEmpty=0===data.skills.length,data.skills.forEach((skill=>{skill.data.specialization&&!skill.name.includes(skill.data.specialization)?skill.displayName=`${skill.data.specialization} (${skill.name})`:skill.displayName=skill.name})),data.skills.sort(((a,b)=>a.displayName.localeCompare(b.displayName))),data.eras={},data.itemProperties=[];for(const[key,value]of Object.entries(COC7.eras))data.data.eras[key]||(data.data.eras[key]={},data.data.eras[key].selected=!1),data.data.eras[key].name=game.i18n.localize(value),data.data.eras[key].internalName=value;for(const entry of Object.entries(data.data.eras))entry[1].selected&&data.itemProperties.push(entry[1].name);return data.oneBlockBackStory=game.settings.get("CoC7","oneBlockBackstory"),data}_updateObject(event,formData){formData.data||(formData=expandObject(formData)),formData.data.bioSections&&(formData.data.bioSections=Object.values(formData.data?.bioSections||[])),"data.characteristics.points.enabled"===event.currentTarget?.name&&(formData.data.characteristics.rolls.enabled=!event.currentTarget.checked),"data.characteristics.rolls.enabled"===event.currentTarget?.name&&(formData.data.characteristics.points.enabled=!event.currentTarget.checked),super._updateObject(event,formData)}}class CoC7SkillSheet extends ItemSheet{constructor(...args){super(...args),this._sheetTab="items"}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","item"],width:520,height:480,tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"skills"}]})}get template(){return`systems/CoC7/templates/items/${this.item.data.type}-sheet.html`}getData(){const data=super.getData(),itemData=data.data;if(data.data=itemData.data,data.hasOwner=null!==this.item.actor,"skill"===this.item.data.type){data._properties=[];for(const[key,value]of Object.entries(COC7.skillProperties)){const property={};property.id=key,property.name=value,property.isEnabled=!0===this.item.data.data.properties[key],data._properties.push(property)}data._eras=[];for(const[key,value]of Object.entries(COC7.eras)){const era={};era.id=key,era.name=value,era.isEnabled=!0===this.item.data.data.eras[key],data._eras.push(era)}data.isSpecialized=this.item.data.data.properties.special,data.canModifySpec=!this.item.data.data.properties.firearm&&!this.item.data.data.properties.fighting}return data}activateListeners(html){super.activateListeners(html),this.options.editable&&html.find(".toggle-switch").click(this._onClickToggle.bind(this))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property;await this.item.toggleProperty(propertyId,event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode)}}class CoC7SpellSheet extends ItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","spell"],width:520,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return"systems/CoC7/templates/items/spell.html"}getData(){const data=super.getData(),itemData=data.data;data.data=itemData.data,data.castingCost="",data.data.cost.mp&&(data.castingCost+=`${data.data.cost.mp} ${game.i18n.localize("CoC7.MP")};`),data.data.cost.san&&(data.castingCost+=`${data.data.cost.san} ${game.i18n.localize("CoC7.SAN")};`),data.data.cost.pow&&(data.castingCost+=`${data.data.cost.pow} ${game.i18n.localize("CHARAC.POW")};`),data.data.cost.hp&&(data.castingCost+=`${data.data.cost.hp} ${game.i18n.localize("CoC7.HP")};`),data.data.cost.other&&(data.castingCost+=`${data.data.cost.other};`),data.castingCost.length?data.castingCost=data.castingCost.slice(0,-1):data.castingCost=game.i18n.localize("CoC7.SpellCastingCost"),data.itemProperties=[];for(const[key,value]of Object.entries(data.data.type))value&&data.itemProperties.push(COC7.spellProperties[key]?COC7.spellProperties[key]:null);return data}}class CoC7StatusSheet extends ItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","status"],width:520,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return"systems/CoC7/templates/items/status.html"}getData(){const data=super.getData(),itemData=data.data;data.data=itemData.data,data.itemProperties=[];for(const[key,value]of Object.entries(data.data.type))value&&data.itemProperties.push(COC7.statusType[key]?COC7.statusType[key]:null);return data}}class CoC7TalentSheet extends ItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","talent"],width:520,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return"systems/CoC7/templates/items/talent.html"}getData(){const data=super.getData(),itemData=data.data;data.data=itemData.data,data.itemProperties=[];for(const[key,value]of Object.entries(data.data.type))value&&data.itemProperties.push(COC7.talentType[key]?COC7.talentType[key]:null);return data}}class CoC7VehicleSheet extends CoC7ActorSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","actor","item","vehicle"],width:520,height:420,resizable:!0,template:"systems/CoC7/templates/actors/vehicle.html",dragDrop:[{dragSelector:".actor",dropSelector:".dropZone"}],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"description"}]})}async getData(){const data=await super.getData();data.properties=[],this.actor.data.data.properties.armed&&data.properties.push(game.i18n.localize("CoC7.ArmedVehicle")),data.actor=this.actor;const expanded=this.actor.getFlag("CoC7","expanded");return data.expanded=void 0===expanded||expanded,data.expanded?data.options.height=420:data.options.height="auto",data}activateListeners(html){super.activateListeners(html),html.find(".add-armor").click((async()=>await this._onAddArmor())),html.find(".remove-armor").click((async event=>await this._onRemoveArmor(event))),html.find(".expand-button").click(this._onToggleExpand.bind(this))}async _onToggleExpand(){const expanded=this.actor.getFlag("CoC7","expanded");expanded?(this.oldSize=this.position.height,this.position.height="auto"):this.position.height=this.oldSize||420,await this.actor.setFlag("CoC7","expanded",!expanded)}async _onAddArmor(){const locations=duplicate(this.actor.data.data.attribs.armor.locations||[]);locations.push({name:null,value:null}),await this.actor.update({"data.attribs.armor.locations":locations})}async _onRemoveArmor(event){const index=event.currentTarget.closest(".armor").dataset.index,locations=duplicate(this.actor.data.data.attribs.armor.locations||null);locations&&(locations.splice(index,1),await this.actor.update({"data.attribs.armor.locations":locations}))}onCloseSheet(){super.onCloseSheet()}_getSubmitData(updateData={}){let data=new FormDataExtended(this.form,{editors:this.editors}).toObject();if(data=updateData?mergeObject(data,updateData):expandObject(data),data.data.attribs.armor?.localized){const armor=data.data?.attribs.armor;armor&&(armor.locations=Object.values(armor?.locations||this.actor.data.data.attribs.armor.locations||{}))}return flattenObject(data)}}class CoC7WeaponSheet extends ItemSheet{static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["coc7","sheet","item"],width:520,height:480,tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"skills"}]})}get template(){return"systems/CoC7/templates/items/weapon-sheet.html"}getData(){const data=super.getData();data.dtypes=["String","Number","Boolean"];const itemData=data.data;data.data=itemData.data,data.hasOwner=null!=this.item.actor,data.hasOwner&&(data.actorKey=this.item.actor.actorKey),data.combatSkill=[],data.hasOwner&&(data.firearmSkills=this.actor.firearmSkills,data.fightingSkills=this.actor.fightingSkills,data.combatSkill=this.item.actor.items.filter((item=>!("skill"!==item.type||!item.data.data.properties.combat))),data.combatSkill.sort(((a,b)=>{let lca,lcb;return a.data.properties&&b.data.properties?(lca=a.data.properties.special?a.data.specialization.toLowerCase()+a.name.toLowerCase():a.name.toLowerCase(),lcb=b.data.properties.special?b.data.specialization.toLowerCase()+b.name.toLowerCase():b.name.toLowerCase()):(lca=a.name.toLowerCase(),lcb=b.name.toLowerCase()),lca.localeCompare(lcb)}))),data._properties=[];for(const[key,value]of Object.entries(COC7.weaponProperties)){const property={};property.id=key,property.name=value,property.isEnabled=!0===this.item.data.data.properties[key],data._properties.push(property)}this.item.data.data.price||(this.item.data.data.price={}),data._eras=[];for(const[key,value]of Object.entries(COC7.eras)){const era={};this.item.data.data.price[key]||(this.item.data.data.price[key]=0),era.price=this.item.data.data.price[key],era.id=key,era.name=value,era.isEnabled=!0===this.item.data.data.eras[key],data._eras.push(era)}return data.usesAlternateSkill=!0===this.item.data.data.properties.auto||!0===this.item.data.data.properties.brst||!0===this.item.data.data.properties.thrown,data}activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find(".weapon-property").click(this._onPropertyClick.bind(this)))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property,elementName=event.currentTarget.parentElement.dataset.set+"-"+propertyId,checkboxControl=this.form.elements.namedItem(elementName);checkboxControl.checked?checkboxControl.checked=!1:checkboxControl.checked=!0,event.target.classList.toggle("switched-on"),await this._onSubmit(event)}async _onPropertyClick(event){event.preventDefault();const property=event.currentTarget.closest(".weapon-property").dataset.property,weaponId=event.currentTarget.closest(".weapon").dataset.itemId,actorKey=event.currentTarget.closest(".weapon").dataset.actorKey;let weapon=null;if(actorKey){weapon=CoCActor.getActorFromKey(actorKey).items.get(weaponId)}else weapon=game.items.get(weaponId);await weapon.toggleProperty(property)}}function listen(){Hooks.once("init",(async()=>{CONFIG.Actor.documentClass=CoCActor,CONFIG.Actor.documentClasses={},CONFIG.Item.documentClass=CoC7Item,CONFIG.Item.documentClasses={book:CoC7Book},async function(){loadTemplates(["systems/CoC7/templates/actors/parts/actor-skills.html","systems/CoC7/templates/actors/parts/npc-skills.html","systems/CoC7/templates/actors/parts/actor-weapons.html","systems/CoC7/templates/actors/parts/npc-combat.html","systems/CoC7/templates/actors/parts/character-development.html","systems/CoC7/templates/actors/parts/actor-inventory.html","systems/CoC7/templates/actors/parts/actor-background.html","systems/CoC7/templates/actors/parts/actor-skills-v2.html","systems/CoC7/templates/actors/parts/actor-weapons-v2.html","systems/CoC7/templates/actors/parts/character-development-v2.html","systems/CoC7/templates/actors/parts/development-controls.html","systems/CoC7/templates/actors/parts/vitals.html","systems/CoC7/templates/actors/parts/combat.html","systems/CoC7/templates/items/book/details.hbs"])}(),function(){if(game.settings.register("CoC7","pulpRules",{name:"SETTINGS.PulpRules",hint:"SETTINGS.PulpRulesHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","developmentRollForLuck",{name:"SETTINGS.developmentRollForLuck",hint:"SETTINGS.developmentRollForLuckHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","opposedRollTieBreaker",{name:"SETTINGS.OpposedRollTieBreaker",hint:"SETTINGS.OpposedRollTieBreakerHint",scope:"wolrd",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","initiativeRule",{name:"SETTINGS.InitiativeRule",hint:"SETTINGS.InitiativeRuleHint",scope:"world",config:!0,default:"basic",type:String,choices:{basic:"SETTINGS.InitiativeRuleBasic",optional:"SETTINGS.InitiativeRuleOptional"},onChange:rule=>_setInitiativeOptions(rule)}),game.settings.register("CoC7","displayInitDices",{name:"SETTINGS.displayInitDices",hint:"SETTINGS.displayInitDicesHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","displayInitAsText",{name:"SETTINGS.displayInitAsText",hint:"SETTINGS.displayInitAsTextHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","stanbyGMRolls",{name:"SETTINGS.StanbyGMRolls",hint:"SETTINGS.StanbyGMRollsHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","allowFlatDiceModifier",{name:"SETTINGS.AllowFlatDiceModifier",hint:"SETTINGS.AllowFlatDiceModifierHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","allowFlatThresholdModifier",{name:"SETTINGS.AllowFlatThresholdModifier",hint:"SETTINGS.AllowFlatThresholdModifierHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","defaultCheckDifficulty",{name:"SETTINGS.DefaultDifficulty",hint:"SETTINGS.DefaultDifficultyHint",scope:"world",config:!0,default:"regular",type:String,choices:{regular:"SETTINGS.CheckDifficultyRegular",unknown:"SETTINGS.CheckDifficultyUnknown"}}),game.settings.register("CoC7","selfRollWhisperTarget",{name:"SETTINGS.SelfRollWhisperTarget",hint:"SETTINGS.SelfRollWhisperTargetHint",scope:"world",config:!0,default:"everyone",type:String,choices:{nobody:"SETTINGS.DoNotAdvise",owners:"SETTINGS.AdviseOwnersOnly",everyone:"SETTINGS.AdviseAllPlayer"}}),game.settings.register("CoC7","displayActorOnCard",{name:"SETTINGS.DisplayActorOnCard",hint:"SETTINGS.DisplayActorOnCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","displayCheckSuccessLevel",{name:"SETTINGS.DisplayCheckSuccessLevel",scope:"client",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","displayResultType",{name:"SETTINGS.DisplayResultType",scope:"client",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","useToken",{name:"SETTINGS.UseToken",hint:"SETTINGS.UseTokenHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","enableStatusIcons",{name:"SETTINGS.EnableStatusIcons",hint:"SETTINGS.EnableStatusIconsHint",scope:"world",config:!0,type:Boolean,default:!0}),game.settings.register("CoC7","gridSpaces",{name:"SETTINGS.RestrictGridSpaces",hint:"SETTINGS.RestrictGridSpacesHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","displayPlayerNameOnSheet",{name:"SETTINGS.displayPlayerNameOnSheet",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","playerUnlockSheetMode",{name:"SETTINGS.PlayerUnlockSheetMode",scope:"world",config:!0,default:"always",type:String,choices:{always:"SETTINGS.AlwaysEditable",creation:"SETTINGS.CreationModeOnly",never:"SETTINGS.NeverEditable"}}),game.settings.register("CoC7","statusPlayerEditable",{name:"SETTINGS.StatusPlayerEditable",hint:"SETTINGS.StatusPlayerEditableHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","oneBlockBackstory",{name:"SETTINGS.OneBlockBackStory",hint:"SETTINGS.OneBlockBackStoryHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","overrideSheetArtwork",{name:"SETTINGS.OverrideSheetArtwork",hint:"SETTINGS.OverrideSheetArtworkHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.get("CoC7","overrideSheetArtwork")&&(game.settings.register("CoC7","artWorkSheetBackground",{name:"SETTINGS.ArtWorkSheetBackground",hint:"SETTINGS.ArtWorkSheetBackgroundHint",scope:"world",config:!0,default:"url('./assets/images/background.webp') 4 repeat",type:String}),game.settings.register("CoC7","artWorkSheetBackgroundType",{name:"SETTINGS.ArtWorkSheetBackgroundType",scope:"world",config:!0,default:"slice",type:String,choices:{slice:"SETTINGS.BackgroundSlice",auto:"SETTINGS.BackgroundAuto",contain:"SETTINGS.BackgroundContain",cover:"SETTINGS.BackgroundCover"}}),game.settings.register("CoC7","artWorkOtherSheetBackground",{name:"SETTINGS.ArtWorkOtherSheetBackground",hint:"SETTINGS.ArtWorkOtherSheetBackgroundHint",scope:"world",config:!0,default:"url( './assets/images/background.webp')",type:String}),game.settings.register("CoC7","artworkSheetImage",{name:"SETTINGS.ArtworkSheetImage",hint:"SETTINGS.ArtworkSheetImageHint",scope:"world",config:!0,default:"url('./assets/images/tentacles.webp')",type:String}),game.settings.register("CoC7","artworkFrontColor",{name:"SETTINGS.ArtworkFrontColor",hint:"SETTINGS.ArtworkFrontColorHint",scope:"world",config:!0,default:"rgba(43,55,83,1)",type:String}),game.settings.register("CoC7","artworkBackgroundColor",{name:"SETTINGS.ArtworkBackgroundColor",hint:"SETTINGS.ArtworkBackgroundColorHint",scope:"world",config:!0,default:"rgba(103,11,11,1)",type:String}),game.settings.register("CoC7","artworkInteractiveColor",{name:"SETTINGS.ArtworkInteractiveColor",hint:"SETTINGS.ArtworkInteractiveColorHint",scope:"world",config:!0,default:"rgba(103,11,11,1)",type:String}),game.settings.register("CoC7","artworkFixedSkillLength",{name:"SETTINGS.ArtworkFixedSkillLength",hint:"SETTINGS.ArtworkFixedSkillLengthHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","artworkMainFont",{name:"SETTINGS.ArtworkMainFont",scope:"world",config:!0,default:"",type:String}),game.settings.register("CoC7","artworkMainFontBold",{name:"SETTINGS.ArtworkMainFontBold",scope:"world",config:!0,default:"",type:String}),game.settings.register("CoC7","artworkMainFontSize",{name:"SETTINGS.ArtworkMainFontSize",scope:"world",config:!0,default:16,type:Number})),game.settings.register("CoC7","disregardUsePerRound",{name:"SETTINGS.DisregardUsePerRound",hint:"SETTINGS.DisregardUsePerRoundHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","disregardAmmo",{name:"SETTINGS.DisregardAmmo",hint:"SETTINGS.DisregardAmmoHint",scope:"world",config:!0,default:!1,type:Boolean}),game.modules.get("dice-so-nice")?.active){game.settings.register("CoC7","syncDice3d",{name:"SETTINGS.SyncDice3D",hint:"SETTINGS.SyncDice3DHint",scope:"world",config:!0,default:!0,type:Boolean});const[version]=game.modules.get("dice-so-nice")?.data.version.split(".");!isNaN(Number(version))&&Number(version)>=3&&(game.settings.register("CoC7","tenDieBonus",{name:"SETTINGS.TenDieBonus",hint:"SETTINGS.TenDieBonusHint",scope:"client",config:!0,default:"bronze",type:String}),game.settings.register("CoC7","tenDiePenalty",{name:"SETTINGS.TenDiePenalty",hint:"SETTINGS.TenDiePenaltyHint",scope:"client",config:!0,default:"bloodmoon",type:String}))}function _setInitiativeOptions(rule){let decimals=0;switch(rule){case"optional":decimals=2;break;case"basic":decimals=0}CONFIG.Combat.initiative={formula:null,decimals}}game.settings.register("CoC7","debugmode",{name:"SETTINGS.DebugMode",hint:"SETTINGS.DebugModeHint",scope:"world",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","developmentEnabled",{name:"Dev phased allowed",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","charCreationEnabled",{name:"Char creation allowed",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","systemUpdateVersion",{name:"System update version",scope:"world",config:!1,type:Number,default:"0.2"}),game.settings.register("CoC7","xpEnabled",{name:"Enable XP gain",scope:"world",config:!1,type:Boolean,default:!0}),CONFIG.Combat.initiative={formula:"@characteristics.dex.value",decimals:4},CONFIG.debug.hooks=!!game.settings.get("CoC7","debugmode"),_setInitiativeOptions(game.settings.get("CoC7","initiativeRule")),CONFIG.Dice.terms.t=CoC7DecaderDie}(),Actors.unregisterSheet("core",CoC7ActorSheet),Actors.registerSheet("CoC7",CoC7NPCSheet,{types:["npc"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7VehicleSheet,{types:["vehicle"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7CreatureSheet,{types:["creature"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7CharacterSheet,{types:["character"]}),Actors.registerSheet("CoC7",CoC7CharacterSheetV2,{types:["character"],makeDefault:!0}),Items.unregisterSheet("core",ItemSheet),Items.registerSheet("CoC7",CoC7SkillSheet,{types:["skill"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7WeaponSheet,{types:["weapon"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7BookSheet,{types:["book"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7SpellSheet,{types:["spell"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7TalentSheet,{types:["talent"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7StatusSheet,{types:["status"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7OccupationSheet,{types:["occupation"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ArchetypeSheet,{types:["archetype"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7SetupSheet,{types:["setup"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ChaseSheet,{types:["chase"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ItemSheet,{types:["item"]}),Items.registerSheet("CoC7",CoC7ItemSheetV2,{types:["item"],makeDefault:!0})}))}const CoC7Hooks={listen(){listen(),Hooks.once("ready",(async()=>{console.log("Call of Cthulhu 7th Edition | Ready")})),Hooks.on("renderActorSheet",(async(data,html,options)=>{console.log(data),"vehicle"===data.document.type&&(ui.notifications.warn("This feature is a work in progress and its use is still not recommended."),await data.close(),await data.close())})),Hooks.on("renderChatMessage",(()=>{})),Hooks.on("renderDialog",((dialog,html)=>{const form=html.find("form");if(form.is("#entity-create")&&0!==form.find("select").length){const entityCreateSelectTag=form.find("[name='type']"),entitySortedList=[];entityCreateSelectTag.children().each(((o,entityOption)=>{const key=entityOption.textContent?.capitalize();game.i18n.has(`CoC7.Entities.${key}`)&&(entityOption.textContent=game.i18n.localize(`CoC7.Entities.${key}`)),entitySortedList.push(entityOption)})),entityCreateSelectTag.empty(),entityCreateSelectTag.append(entitySortedList.sort(((first,second)=>first.innerText.localeCompare(second.innerText)))),"actor"===entityCreateSelectTag.val()?entityCreateSelectTag.val("character"):"book"===entityCreateSelectTag.val()&&entityCreateSelectTag.val("item")}})),Hooks.on("renderItemSheet",(async(data,html,options)=>{console.log(data),"chase"===data.document.type&&(ui.notifications.warn("This feature is a work in progress and its use is still not recommended."),await data.close(),await data.close())}))}};function _onLeftClick(event){return event.shiftKey}Hooks.on("renderSettingsConfig",((app,html,options)=>{const systemTab=$(app.form).find(".tab[data-tab=system]");systemTab.find("input[name=CoC7\\.pulpRules]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRules")+"</h2>"),systemTab.find("select[name=CoC7\\.initiativeRule]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleInitiative")+"</h2>"),systemTab.find("input[name=CoC7\\.stanbyGMRolls]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRoll")+"</h2>"),systemTab.find("input[name=CoC7\\.displayActorOnCard]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleChatCards")+"</h2>"),systemTab.find("input[name=CoC7\\.enableStatusIcons]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleScene")+"</h2>"),systemTab.find("input[name=CoC7\\.displayPlayerNameOnSheet]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleSheet")+"</h2>"),systemTab.find("input[name=CoC7\\.disregardUsePerRound]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleWeapon")+"</h2>"),systemTab.find("input[name=CoC7\\.syncDice3d]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleDiceSoNice")+"</h2>"),systemTab.find("input[name=CoC7\\.debugmode]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleDeveloperDebug")+"</h2>"),systemTab.find("select[name=CoC7\\.boutOfMadnessSummaryTable]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRollTable")+"</h2>")})),Hooks.once("diceSoNiceReady",(dice3d=>{dice3d.addDicePreset({type:"dt",labels:["10","20","30","40","50","60","70","80","90","00"],fontScale:.75,system:"standard"},"dt")})),Hooks.once("init",(async function(){game.CoC7={macros:{skillCheck:CoC7Utilities.skillCheckMacro,weaponCheck:CoC7Utilities.weaponCheckMacro,check:CoC7Utilities.checkMacro},cards:{DamageCard}},Combat.prototype.rollInitiative=rollInitiative})),Hooks.on("renderCombatTracker",((app,html,data)=>CoC7Combat.renderCombatTracker(app,html,data))),Hooks.on("chatMessage",((html,content)=>{if(content.match(/^\/(cbr|cc)/i)){const commands=content.match(/(\d+)/g);return commands?new Roll("1d100").roll({async:!0}).then((r=>{const s=r.result,res=commands.map((m=>{let res="";return res=s<=1?game.i18n.localize("CoC7.CriticalSuccess"):s>=100?game.i18n.localize("CoC7.Fumble"):s<=m/5?game.i18n.localize("CoC7.ExtremeSuccess"):s<=m/2?game.i18n.localize("CoC7.HardSuccess"):s<=m?game.i18n.localize("CoC7.RegularSuccess"):s>=96&&m<50?game.i18n.localize("CoC7.Fumble"):game.i18n.localize("CoC7.Failure"),res+=" "+game.i18n.localize("CoC7.Value")+" "+m,res})).join(" / ");r.toMessage({speaker:ChatMessage.getSpeaker(),flavor:res})})):ui.notifications.error("Incorrect usage of command"),!1}})),CoC7Hooks.listen(),Hooks.once("setup",(function(){const toLocalize=["spellProperties","bookType","talentType","occupationProperties","statusType"];for(const o of toLocalize){const localized=Object.entries(COC7[o]).map((e=>[e[0],game.i18n.localize(e[1])]));COC7[o]=localized.reduce(((obj,e)=>(obj[e[0]]=e[1],obj)),{})}let effectIndex=CONFIG.statusEffects.findIndex((t=>"dead"===t.id));-1!==effectIndex&&(CONFIG.statusEffects[effectIndex].icon="systems/CoC7/assets/icons/tombstone.svg"),effectIndex=CONFIG.statusEffects.findIndex((t=>"unconscious"===t.id)),-1!==effectIndex&&(CONFIG.statusEffects[effectIndex].icon="systems/CoC7/assets/icons/knocked-out-stars.svg"),CONFIG.statusEffects.unshift({id:"boutOfMadness",label:"CoC7.BoutOfMadnessName",icon:"systems/CoC7/assets/icons/hanging-spider.svg"},{id:"insanity",label:"CoC7.InsanityName",icon:"systems/CoC7/assets/icons/tentacles-skull.svg"},{id:"criticalWounds",label:"criticalWounds",icon:"systems/CoC7/assets/icons/arm-sling.svg"},{id:"dying",label:"dying",icon:"systems/CoC7/assets/icons/heart-beats.svg"})})),Hooks.on("hotbarDrop",(async(bar,data,slot)=>CoC7Utilities.createMacro(bar,data,slot))),Hooks.on("renderChatLog",((app,html,data)=>CoC7Chat.chatListeners(app,html,data))),Hooks.on("renderChatMessage",((app,html,data)=>CoC7Chat.renderMessageHook(app,html,data))),Hooks.on("updateChatMessage",((chatMessage,chatData,diff,speaker)=>CoC7Chat.onUpdateChatMessage(chatMessage,chatData,diff,speaker))),Hooks.on("ready",(async()=>{function _tableSettingsChanged(table,id){game.CoC7.tables[table]="none"===id?null:game.tables.get(id)}await Updater.checkForUpdate(),$("body").on("click","a.coc7-inline-check",CoC7Check._onClickInlineRoll),document.addEventListener("mousedown",_onLeftClick),game.socket.on("system.CoC7",(async data=>{if("updateChar"===data.type&&CoC7Utilities.updateCharSheets(),game.user.isGM&&(OpposedCheckCard.defaultConfig.type===data.type&&OpposedCheckCard.dispatch(data),CombinedCheckCard.defaultConfig.type===data.type&&CombinedCheckCard.dispatch(data),"invoke"===data.type)){(await fromUuid(data.item))[data.method](data.data)}}));const tableChoice={none:"SETTINGS.LetKeeperDecide"};game.tables.forEach((t=>{tableChoice[t.data._id]=t.data.name})),game.settings.register("CoC7","boutOfMadnessSummaryTable",{name:"SETTINGS.BoutOfMadnessSummaryTable",scope:"world",config:!0,default:"none",type:String,choices:tableChoice,onChange:id=>_tableSettingsChanged("boutOfMadness_Summary",id)}),game.settings.register("CoC7","boutOfMadnessRealTimeTable",{name:"SETTINGS.BoutOfMadnessRealTimeTable",scope:"world",config:!0,default:"none",type:String,choices:tableChoice,onChange:id=>_tableSettingsChanged("boutOfMadness_RealTime",id)}),game.CoC7.tables={boutOfMadness_Summary:"none"===game.settings.get("CoC7","boutOfMadnessSummaryTable")?null:game.tables.get(game.settings.get("CoC7","boutOfMadnessSummaryTable")),boutOfMadness_RealTime:"none"===game.settings.get("CoC7","boutOfMadnessRealTimeTable")?null:game.tables.get(game.settings.get("CoC7","boutOfMadnessRealTimeTable"))}})),Hooks.on("closeActorSheet",(characterSheet=>characterSheet.onCloseSheet())),Hooks.on("renderCoC7CreatureSheet",((app,html,data)=>CoC7CreatureSheet.forceAuto(app,html,data))),Hooks.on("renderCoC7NPCSheet",((app,html,data)=>CoC7NPCSheet.forceAuto(app,html,data))),Hooks.on("chatMessage",CoC7Utilities.ParseChatEntry),Hooks.on("getSceneControlButtons",(()=>{})),Hooks.on("renderItemSheet",CoC7Parser.ParseSheetContent),Hooks.on("renderJournalSheet",CoC7Parser.ParseSheetContent),Hooks.on("renderActorSheet",CoC7Parser.ParseSheetContent),Hooks.on("renderChatMessage",((app,html,data)=>{CoC7Chat.renderChatMessageHook(app,html,data),CoC7Parser.ParseMessage(app,html,data)})),Hooks.on("renderActorSheet",CoC7CharacterSheetV2.renderSheet),Hooks.on("renderItemSheet",CoC7CharacterSheetV2.renderSheet),Hooks.on("renderSceneControls",CoC7Menu.renderMenu),Hooks.on("dropCanvasData",CoC7Canvas.onDropSomething),tinyMCE.PluginManager.add("CoC7_Editor_OnDrop",(function(editor){editor.on("drop",(event=>CoC7Parser.onEditorDrop(event,editor)))})),CONFIG.TinyMCE.plugins=`CoC7_Editor_OnDrop ${CONFIG.TinyMCE.plugins}`,Hooks.on("targetToken",(function(user,token,targeted){if(targeted){let gmonly=!0;if(token.actor.data.permission.default===CONST.ENTITY_PERMISSIONS.OWNER)gmonly=!1;else{const gms=game.users.filter((a=>a.isGM)).map((a=>a.id));for(const[k,v]of Object.entries(token.actor.data.permission))"default"===k||v!==CONST.ENTITY_PERMISSIONS.OWNER||gms.includes(k)||(gmonly=!1)}if(!gmonly){0===game.users.filter((a=>!a.isGM&&a.data.character===token.actor.id)).length&&ui.notifications.error(game.i18n.format("CoC7.MessageSelectedTargetIsNotControlled",{name:token.name}))}}})),CONFIG.ui.compendium=CoC7CompendiumDirectory})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,